!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(R,t){"use strict";function m(t){return null!=t&&t===t.window}var e=[],r=Object.getPrototypeOf,s=e.slice,g=e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)},l=e.push,n=e.indexOf,i={},a=i.toString,E=i.hasOwnProperty,o=E.toString,h=o.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},w=R.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function T(t,e,i){var r,n,a=(i=i||w).createElement("script");if(a.text=t,e)for(r in c)(n=e[r]||e.getAttribute&&e.getAttribute(r))&&a.setAttribute(r,n);i.head.appendChild(a).parentNode.removeChild(a)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[a.call(t)]||"object":typeof t}var u="3.5.1",H=function(t,e){return new H.fn.init(t,e)};function d(t){var e=!!t&&"length"in t&&t.length,i=x(t);return!y(t)&&!m(t)&&("array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}H.fn=H.prototype={jquery:u,constructor:H,length:0,toArray:function(){return s.call(this)},get:function(t){return null==t?s.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=H.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return H.each(this,t)},map:function(i){return this.pushStack(H.map(this,function(t,e){return i.call(t,e,t)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(H.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(H.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(0<=i&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},H.extend=H.fn.extend=function(){var t,e,i,r,n,a,o=arguments[0]||{},s=1,l=arguments.length,h=!1;for("boolean"==typeof o&&(h=o,o=arguments[s]||{},s++),"object"==typeof o||y(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&o!==r&&(h&&r&&(H.isPlainObject(r)||(n=Array.isArray(r)))?(i=o[e],a=n&&!Array.isArray(i)?[]:n||H.isPlainObject(i)?i:{},n=!1,o[e]=H.extend(h,a,r)):void 0!==r&&(o[e]=r));return o},H.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==a.call(t))&&(!(e=r(t))||"function"==typeof(i=E.call(e,"constructor")&&e.constructor)&&o.call(i)===h)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){T(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,r=0;if(d(t))for(i=t.length;r<i&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(d(Object(t))?H.merge(i,"string"==typeof t?[t]:t):l.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:n.call(e,t,i)},merge:function(t,e){for(var i=+e.length,r=0,n=t.length;r<i;r++)t[n++]=e[r];return t.length=n,t},grep:function(t,e,i){for(var r=[],n=0,a=t.length,o=!i;n<a;n++)!e(t[n],n)!=o&&r.push(t[n]);return r},map:function(t,e,i){var r,n,a=0,o=[];if(d(t))for(r=t.length;a<r;a++)null!=(n=e(t[a],a,i))&&o.push(n);else for(a in t)null!=(n=e(t[a],a,i))&&o.push(n);return g(o)},guid:1,support:v}),"function"==typeof Symbol&&(H.fn[Symbol.iterator]=e[Symbol.iterator]),H.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){i["[object "+e+"]"]=e.toLowerCase()});var p=function(i){function u(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function n(){b()}var t,p,T,a,o,f,d,m,x,l,h,b,R,s,w,g,c,E,v,H="sizzle"+1*new Date,y=i.document,_=0,r=0,S=lt(),C=lt(),M=lt(),A=lt(),P=function(t,e){return t===e&&(h=!0),0},L={}.hasOwnProperty,e=[],D=e.pop,F=e.push,k=e.push,O=e.slice,B=function(t,e){for(var i=0,r=t.length;i<r;i++)if(t[i]===e)return i;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",z="(?:\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",U="\\["+I+"*("+z+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+z+"))|)"+I+"*\\]",V=":("+z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|.*)\\)|)",G=new RegExp(I+"+","g"),W=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g"),j=new RegExp("^"+I+"*,"+I+"*"),X=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),$=new RegExp(I+"|>"),q=new RegExp(V),Y=new RegExp("^"+z+"$"),K={ID:new RegExp("^#("+z+")"),CLASS:new RegExp("^\\.("+z+")"),TAG:new RegExp("^("+z+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+V),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,it=/[+~]/,rt=new RegExp("\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\([^\\r\\n\\f])","g"),nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,at=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=Tt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{k.apply(e=O.call(y.childNodes),y.childNodes),e[y.childNodes.length].nodeType}catch(t){k={apply:e.length?function(t,e){F.apply(t,O.call(e))}:function(t,e){for(var i=t.length,r=0;t[i++]=e[r++];);t.length=i-1}}}function st(e,t,i,r){var n,a,o,s,l,h,c,u=t&&t.ownerDocument,d=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==d&&9!==d&&11!==d)return i;if(!r&&(b(t),t=t||R,w)){if(11!==d&&(l=et.exec(e)))if(n=l[1]){if(9===d){if(!(o=t.getElementById(n)))return i;if(o.id===n)return i.push(o),i}else if(u&&(o=u.getElementById(n))&&v(t,o)&&o.id===n)return i.push(o),i}else{if(l[2])return k.apply(i,t.getElementsByTagName(e)),i;if((n=l[3])&&p.getElementsByClassName&&t.getElementsByClassName)return k.apply(i,t.getElementsByClassName(n)),i}if(p.qsa&&!A[e+" "]&&(!g||!g.test(e))&&(1!==d||"object"!==t.nodeName.toLowerCase())){if(c=e,u=t,1===d&&($.test(e)||X.test(e))){for((u=it.test(e)&&Et(t.parentNode)||t)===t&&p.scope||((s=t.getAttribute("id"))?s=s.replace(nt,at):t.setAttribute("id",s=H)),a=(h=f(e)).length;a--;)h[a]=(s?"#"+s:":scope")+" "+yt(h[a]);c=h.join(",")}try{return k.apply(i,u.querySelectorAll(c)),i}catch(t){A(e,!0)}finally{s===H&&t.removeAttribute("id")}}}return m(e.replace(W,"$1"),t,i,r)}function lt(){var r=[];return function t(e,i){return r.push(e+" ")>T.cacheLength&&delete t[r.shift()],t[e+" "]=i}}function ht(t){return t[H]=!0,t}function ct(t){var e=R.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var i=t.split("|"),r=i.length;r--;)T.attrHandle[i[r]]=e}function dt(t,e){var i=e&&t,r=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function pt(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function ft(i){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===i}}function mt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ot(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function gt(o){return ht(function(a){return a=+a,ht(function(t,e){for(var i,r=o([],t.length,a),n=r.length;n--;)t[i=r[n]]&&(t[i]=!(e[i]=t[i]))})})}function Et(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in p=st.support={},o=st.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!Q.test(e||i&&i.nodeName||"HTML")},b=st.setDocument=function(t){var e,i,r=t?t.ownerDocument||t:y;return r!=R&&9===r.nodeType&&r.documentElement&&(s=(R=r).documentElement,w=!o(R),y!=R&&(i=R.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",n,!1):i.attachEvent&&i.attachEvent("onunload",n)),p.scope=ct(function(t){return s.appendChild(t).appendChild(R.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),p.attributes=ct(function(t){return t.className="i",!t.getAttribute("className")}),p.getElementsByTagName=ct(function(t){return t.appendChild(R.createComment("")),!t.getElementsByTagName("*").length}),p.getElementsByClassName=tt.test(R.getElementsByClassName),p.getById=ct(function(t){return s.appendChild(t).id=H,!R.getElementsByName||!R.getElementsByName(H).length}),p.getById?(T.filter.ID=function(t){var e=t.replace(rt,u);return function(t){return t.getAttribute("id")===e}},T.find.ID=function(t,e){if(void 0!==e.getElementById&&w){var i=e.getElementById(t);return i?[i]:[]}}):(T.filter.ID=function(t){var i=t.replace(rt,u);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===i}},T.find.ID=function(t,e){if(void 0!==e.getElementById&&w){var i,r,n,a=e.getElementById(t);if(a){if((i=a.getAttributeNode("id"))&&i.value===t)return[a];for(n=e.getElementsByName(t),r=0;a=n[r++];)if((i=a.getAttributeNode("id"))&&i.value===t)return[a]}return[]}}),T.find.TAG=p.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):p.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,r=[],n=0,a=e.getElementsByTagName(t);if("*"!==t)return a;for(;i=a[n++];)1===i.nodeType&&r.push(i);return r},T.find.CLASS=p.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&w)return e.getElementsByClassName(t)},c=[],g=[],(p.qsa=tt.test(R.querySelectorAll))&&(ct(function(t){var e;s.appendChild(t).innerHTML="<a id='"+H+"'></a><select id='"+H+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+I+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+I+"*(?:value|"+N+")"),t.querySelectorAll("[id~="+H+"-]").length||g.push("~="),(e=R.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\["+I+"*name"+I+"*="+I+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+H+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")}),ct(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=R.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+I+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),s.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(p.matchesSelector=tt.test(E=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ct(function(t){p.disconnectedMatch=E.call(t,"*"),E.call(t,"[s!='']:x"),c.push("!=",V)}),g=g.length&&new RegExp(g.join("|")),c=c.length&&new RegExp(c.join("|")),e=tt.test(s.compareDocumentPosition),v=e||tt.test(s.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(i.contains?i.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},P=e?function(t,e){if(t===e)return h=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!p.sortDetached&&e.compareDocumentPosition(t)===i?t==R||t.ownerDocument==y&&v(y,t)?-1:e==R||e.ownerDocument==y&&v(y,e)?1:l?B(l,t)-B(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return h=!0,0;var i,r=0,n=t.parentNode,a=e.parentNode,o=[t],s=[e];if(!n||!a)return t==R?-1:e==R?1:n?-1:a?1:l?B(l,t)-B(l,e):0;if(n===a)return dt(t,e);for(i=t;i=i.parentNode;)o.unshift(i);for(i=e;i=i.parentNode;)s.unshift(i);for(;o[r]===s[r];)r++;return r?dt(o[r],s[r]):o[r]==y?-1:s[r]==y?1:0}),R},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if(b(t),p.matchesSelector&&w&&!A[e+" "]&&(!c||!c.test(e))&&(!g||!g.test(e)))try{var i=E.call(t,e);if(i||p.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){A(e,!0)}return 0<st(e,R,null,[t]).length},st.contains=function(t,e){return(t.ownerDocument||t)!=R&&b(t),v(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!=R&&b(t);var i=T.attrHandle[e.toLowerCase()],r=i&&L.call(T.attrHandle,e.toLowerCase())?i(t,e,!w):void 0;return void 0!==r?r:p.attributes||!w?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},st.escape=function(t){return(t+"").replace(nt,at)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,i=[],r=0,n=0;if(h=!p.detectDuplicates,l=!p.sortStable&&t.slice(0),t.sort(P),h){for(;e=t[n++];)e===t[n]&&(r=i.push(n));for(;r--;)t.splice(i[r],1)}return l=null,t},a=st.getText=function(t){var e,i="",r=0,n=t.nodeType;if(n){if(1===n||9===n||11===n){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=a(t)}else if(3===n||4===n)return t.nodeValue}else for(;e=t[r++];)i+=a(e);return i},(T=st.selectors={cacheLength:50,createPseudo:ht,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(rt,u),t[3]=(t[3]||t[4]||t[5]||"").replace(rt,u),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&q.test(i)&&(e=f(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(rt,u).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=S[t+" "];return e||(e=new RegExp("(^|"+I+")"+t+"("+I+"|$)"))&&S(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(i,r,n){return function(t){var e=st.attr(t,i);return null==e?"!="===r:!r||(e+="","="===r?e===n:"!="===r?e!==n:"^="===r?n&&0===e.indexOf(n):"*="===r?n&&-1<e.indexOf(n):"$="===r?n&&e.slice(-n.length)===n:"~="===r?-1<(" "+e.replace(G," ")+" ").indexOf(n):"|="===r&&(e===n||e.slice(0,n.length+1)===n+"-"))}},CHILD:function(f,t,e,m,g){var E="nth"!==f.slice(0,3),v="last"!==f.slice(-4),y="of-type"===t;return 1===m&&0===g?function(t){return!!t.parentNode}:function(t,e,i){var r,n,a,o,s,l,h=E!=v?"nextSibling":"previousSibling",c=t.parentNode,u=y&&t.nodeName.toLowerCase(),d=!i&&!y,p=!1;if(c){if(E){for(;h;){for(o=t;o=o[h];)if(y?o.nodeName.toLowerCase()===u:1===o.nodeType)return!1;l=h="only"===f&&!l&&"nextSibling"}return!0}if(l=[v?c.firstChild:c.lastChild],v&&d){for(p=(s=(r=(n=(a=(o=c)[H]||(o[H]={}))[o.uniqueID]||(a[o.uniqueID]={}))[f]||[])[0]===_&&r[1])&&r[2],o=s&&c.childNodes[s];o=++s&&o&&o[h]||(p=s=0)||l.pop();)if(1===o.nodeType&&++p&&o===t){n[f]=[_,s,p];break}}else if(d&&(p=s=(r=(n=(a=(o=t)[H]||(o[H]={}))[o.uniqueID]||(a[o.uniqueID]={}))[f]||[])[0]===_&&r[1]),!1===p)for(;(o=++s&&o&&o[h]||(p=s=0)||l.pop())&&((y?o.nodeName.toLowerCase()!==u:1!==o.nodeType)||!++p||(d&&((n=(a=o[H]||(o[H]={}))[o.uniqueID]||(a[o.uniqueID]={}))[f]=[_,p]),o!==t)););return(p-=g)===m||p%m==0&&0<=p/m}}},PSEUDO:function(t,a){var e,o=T.pseudos[t]||T.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return o[H]?o(a):1<o.length?(e=[t,t,"",a],T.setFilters.hasOwnProperty(t.toLowerCase())?ht(function(t,e){for(var i,r=o(t,a),n=r.length;n--;)t[i=B(t,r[n])]=!(e[i]=r[n])}):function(t){return o(t,0,e)}):o}},pseudos:{not:ht(function(t){var r=[],n=[],s=d(t.replace(W,"$1"));return s[H]?ht(function(t,e,i,r){for(var n,a=s(t,null,r,[]),o=t.length;o--;)(n=a[o])&&(t[o]=!(e[o]=n))}):function(t,e,i){return r[0]=t,s(r,null,i,n),r[0]=null,!n.pop()}}),has:ht(function(e){return function(t){return 0<st(e,t).length}}),contains:ht(function(e){return e=e.replace(rt,u),function(t){return-1<(t.textContent||a(t)).indexOf(e)}}),lang:ht(function(i){return Y.test(i||"")||st.error("unsupported lang: "+i),i=i.replace(rt,u).toLowerCase(),function(t){var e;do{if(e=w?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===i||0===e.indexOf(i+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=i.location&&i.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===s},focus:function(t){return t===R.activeElement&&(!R.hasFocus||R.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:mt(!1),disabled:mt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!T.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return Z.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt(function(){return[0]}),last:gt(function(t,e){return[e-1]}),eq:gt(function(t,e,i){return[i<0?i+e:i]}),even:gt(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:gt(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:gt(function(t,e,i){for(var r=i<0?i+e:e<i?e:i;0<=--r;)t.push(r);return t}),gt:gt(function(t,e,i){for(var r=i<0?i+e:i;++r<e;)t.push(r);return t})}}).pseudos.nth=T.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[t]=pt(t);for(t in{submit:!0,reset:!0})T.pseudos[t]=ft(t);function vt(){}function yt(t){for(var e=0,i=t.length,r="";e<i;e++)r+=t[e].value;return r}function Tt(s,t,e){var l=t.dir,h=t.next,c=h||l,u=e&&"parentNode"===c,d=r++;return t.first?function(t,e,i){for(;t=t[l];)if(1===t.nodeType||u)return s(t,e,i);return!1}:function(t,e,i){var r,n,a,o=[_,d];if(i){for(;t=t[l];)if((1===t.nodeType||u)&&s(t,e,i))return!0}else for(;t=t[l];)if(1===t.nodeType||u)if(n=(a=t[H]||(t[H]={}))[t.uniqueID]||(a[t.uniqueID]={}),h&&h===t.nodeName.toLowerCase())t=t[l]||t;else{if((r=n[c])&&r[0]===_&&r[1]===d)return o[2]=r[2];if((n[c]=o)[2]=s(t,e,i))return!0}return!1}}function xt(n){return 1<n.length?function(t,e,i){for(var r=n.length;r--;)if(!n[r](t,e,i))return!1;return!0}:n[0]}function bt(t,e,i,r,n){for(var a,o=[],s=0,l=t.length,h=null!=e;s<l;s++)(a=t[s])&&(i&&!i(a,r,n)||(o.push(a),h&&e.push(s)));return o}function Rt(p,f,m,g,E,t){return g&&!g[H]&&(g=Rt(g)),E&&!E[H]&&(E=Rt(E,t)),ht(function(t,e,i,r){var n,a,o,s=[],l=[],h=e.length,c=t||function(t,e,i){for(var r=0,n=e.length;r<n;r++)st(t,e[r],i);return i}(f||"*",i.nodeType?[i]:i,[]),u=!p||!t&&f?c:bt(c,s,p,i,r),d=m?E||(t?p:h||g)?[]:e:u;if(m&&m(u,d,i,r),g)for(n=bt(d,l),g(n,[],i,r),a=n.length;a--;)(o=n[a])&&(d[l[a]]=!(u[l[a]]=o));if(t){if(E||p){if(E){for(n=[],a=d.length;a--;)(o=d[a])&&n.push(u[a]=o);E(null,d=[],n,r)}for(a=d.length;a--;)(o=d[a])&&-1<(n=E?B(t,o):s[a])&&(t[n]=!(e[n]=o))}}else d=bt(d===e?d.splice(h,d.length):d),E?E(null,e,d,r):k.apply(e,d)})}function wt(t){for(var n,e,i,r=t.length,a=T.relative[t[0].type],o=a||T.relative[" "],s=a?1:0,l=Tt(function(t){return t===n},o,!0),h=Tt(function(t){return-1<B(n,t)},o,!0),c=[function(t,e,i){var r=!a&&(i||e!==x)||((n=e).nodeType?l(t,e,i):h(t,e,i));return n=null,r}];s<r;s++)if(e=T.relative[t[s].type])c=[Tt(xt(c),e)];else{if((e=T.filter[t[s].type].apply(null,t[s].matches))[H]){for(i=++s;i<r&&!T.relative[t[i].type];i++);return Rt(1<s&&xt(c),1<s&&yt(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(W,"$1"),e,s<i&&wt(t.slice(s,i)),i<r&&wt(t=t.slice(i)),i<r&&yt(t))}c.push(e)}return xt(c)}function Ht(g,E){function t(t,e,i,r,n){var a,o,s,l=0,h="0",c=t&&[],u=[],d=x,p=t||y&&T.find.TAG("*",n),f=_+=null==d?1:Math.random()||.1,m=p.length;for(n&&(x=e==R||e||n);h!==m&&null!=(a=p[h]);h++){if(y&&a){for(o=0,e||a.ownerDocument==R||(b(a),i=!w);s=g[o++];)if(s(a,e||R,i)){r.push(a);break}n&&(_=f)}v&&((a=!s&&a)&&l--,t&&c.push(a))}if(l+=h,v&&h!==l){for(o=0;s=E[o++];)s(c,u,e,i);if(t){if(0<l)for(;h--;)c[h]||u[h]||(u[h]=D.call(r));u=bt(u)}k.apply(r,u),n&&!t&&0<u.length&&1<l+E.length&&st.uniqueSort(r)}return n&&(_=f,x=d),c}var v=0<E.length,y=0<g.length;return v?ht(t):t}return vt.prototype=T.filters=T.pseudos,T.setFilters=new vt,f=st.tokenize=function(t,e){var i,r,n,a,o,s,l,h=C[t+" "];if(h)return e?0:h.slice(0);for(o=t,s=[],l=T.preFilter;o;){for(a in i&&!(r=j.exec(o))||(r&&(o=o.slice(r[0].length)||o),s.push(n=[])),i=!1,(r=X.exec(o))&&(i=r.shift(),n.push({value:i,type:r[0].replace(W," ")}),o=o.slice(i.length)),T.filter)!(r=K[a].exec(o))||l[a]&&!(r=l[a](r))||(i=r.shift(),n.push({value:i,type:a,matches:r}),o=o.slice(i.length));if(!i)break}return e?o.length:o?st.error(t):C(t,s).slice(0)},d=st.compile=function(t,e){var i,r=[],n=[],a=M[t+" "];if(!a){for(i=(e=e||f(t)).length;i--;)(a=wt(e[i]))[H]?r.push(a):n.push(a);(a=M(t,Ht(n,r))).selector=t}return a},m=st.select=function(t,e,i,r){var n,a,o,s,l,h="function"==typeof t&&t,c=!r&&f(t=h.selector||t);if(i=i||[],1===c.length){if(2<(a=c[0]=c[0].slice(0)).length&&"ID"===(o=a[0]).type&&9===e.nodeType&&w&&T.relative[a[1].type]){if(!(e=(T.find.ID(o.matches[0].replace(rt,u),e)||[])[0]))return i;h&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(n=K.needsContext.test(t)?0:a.length;n--&&(o=a[n],!T.relative[s=o.type]);)if((l=T.find[s])&&(r=l(o.matches[0].replace(rt,u),it.test(a[0].type)&&Et(e.parentNode)||e))){if(a.splice(n,1),!(t=r.length&&yt(a)))return k.apply(i,r),i;break}}return(h||d(t,c))(r,e,!w,i,!e||it.test(t)&&Et(e.parentNode)||e),i},p.sortStable=H.split("").sort(P).join("")===H,p.detectDuplicates=!!h,b(),p.sortDetached=ct(function(t){return 1&t.compareDocumentPosition(R.createElement("fieldset"))}),ct(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ut("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),p.attributes&&ct(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ut("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ct(function(t){return null==t.getAttribute("disabled")})||ut(N,function(t,e,i){var r;if(!i)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),st}(R);H.find=p,H.expr=p.selectors,H.expr[":"]=H.expr.pseudos,H.uniqueSort=H.unique=p.uniqueSort,H.text=p.getText,H.isXMLDoc=p.isXML,H.contains=p.contains,H.escapeSelector=p.escape;function f(t,e,i){for(var r=[],n=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(n&&H(t).is(i))break;r.push(t)}return r}function b(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}var _=H.expr.match.needsContext;function S(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var C=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function M(t,i,r){return y(i)?H.grep(t,function(t,e){return!!i.call(t,e,t)!==r}):i.nodeType?H.grep(t,function(t){return t===i!==r}):"string"!=typeof i?H.grep(t,function(t){return-1<n.call(i,t)!==r}):H.filter(i,t,r)}H.filter=function(t,e,i){var r=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?H.find.matchesSelector(r,t)?[r]:[]:H.find.matches(t,H.grep(e,function(t){return 1===t.nodeType}))},H.fn.extend({find:function(t){var e,i,r=this.length,n=this;if("string"!=typeof t)return this.pushStack(H(t).filter(function(){for(e=0;e<r;e++)if(H.contains(n[e],this))return!0}));for(i=this.pushStack([]),e=0;e<r;e++)H.find(t,n[e],i);return 1<r?H.uniqueSort(i):i},filter:function(t){return this.pushStack(M(this,t||[],!1))},not:function(t){return this.pushStack(M(this,t||[],!0))},is:function(t){return!!M(this,"string"==typeof t&&_.test(t)?H(t):t||[],!1).length}});var A,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(H.fn.init=function(t,e,i){var r,n;if(!t)return this;if(i=i||A,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==i.ready?i.ready(t):t(H):H.makeArray(t,this);if(!(r="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:P.exec(t))||!r[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof H?e[0]:e,H.merge(this,H.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:w,!0)),C.test(r[1])&&H.isPlainObject(e))for(r in e)y(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(n=w.getElementById(r[2]))&&(this[0]=n,this.length=1),this}).prototype=H.fn,A=H(w);var L=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function F(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}H.fn.extend({has:function(t){var e=H(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(H.contains(this,e[t]))return!0})},closest:function(t,e){var i,r=0,n=this.length,a=[],o="string"!=typeof t&&H(t);if(!_.test(t))for(;r<n;r++)for(i=this[r];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?-1<o.index(i):1===i.nodeType&&H.find.matchesSelector(i,t))){a.push(i);break}return this.pushStack(1<a.length?H.uniqueSort(a):a)},index:function(t){return t?"string"==typeof t?n.call(H(t),this[0]):n.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(H.uniqueSort(H.merge(this.get(),H(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),H.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return f(t,"parentNode")},parentsUntil:function(t,e,i){return f(t,"parentNode",i)},next:function(t){return F(t,"nextSibling")},prev:function(t){return F(t,"previousSibling")},nextAll:function(t){return f(t,"nextSibling")},prevAll:function(t){return f(t,"previousSibling")},nextUntil:function(t,e,i){return f(t,"nextSibling",i)},prevUntil:function(t,e,i){return f(t,"previousSibling",i)},siblings:function(t){return b((t.parentNode||{}).firstChild,t)},children:function(t){return b(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(S(t,"template")&&(t=t.content||t),H.merge([],t.childNodes))}},function(r,n){H.fn[r]=function(t,e){var i=H.map(this,n,t);return"Until"!==r.slice(-5)&&(e=t),e&&"string"==typeof e&&(i=H.filter(e,i)),1<this.length&&(D[r]||H.uniqueSort(i),L.test(r)&&i.reverse()),this.pushStack(i)}});var k=/[^\x20\t\r\n\f]+/g;function O(t){return t}function B(t){throw t}function N(t,e,i,r){var n;try{t&&y(n=t.promise)?n.call(t).done(e).fail(i):t&&y(n=t.then)?n.call(t,e,i):e.apply(void 0,[t].slice(r))}catch(t){i.apply(void 0,[t])}}H.Callbacks=function(r){r="string"==typeof r?function(t){var i={};return H.each(t.match(k)||[],function(t,e){i[e]=!0}),i}(r):H.extend({},r);function i(){for(a=a||r.once,e=n=!0;s.length;l=-1)for(t=s.shift();++l<o.length;)!1===o[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=o.length,t=!1);r.memory||(t=!1),n=!1,a&&(o=t?[]:"")}var n,t,e,a,o=[],s=[],l=-1,h={add:function(){return o&&(t&&!n&&(l=o.length-1,s.push(t)),function i(t){H.each(t,function(t,e){y(e)?r.unique&&h.has(e)||o.push(e):e&&e.length&&"string"!==x(e)&&i(e)})}(arguments),t&&!n&&i()),this},remove:function(){return H.each(arguments,function(t,e){for(var i;-1<(i=H.inArray(e,o,i));)o.splice(i,1),i<=l&&l--}),this},has:function(t){return t?-1<H.inArray(t,o):0<o.length},empty:function(){return o=o&&[],this},disable:function(){return a=s=[],o=t="",this},disabled:function(){return!o},lock:function(){return a=s=[],t||n||(o=t=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],s.push(e),n||i()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!e}};return h},H.extend({Deferred:function(t){var a=[["notify","progress",H.Callbacks("memory"),H.Callbacks("memory"),2],["resolve","done",H.Callbacks("once memory"),H.Callbacks("once memory"),0,"resolved"],["reject","fail",H.Callbacks("once memory"),H.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var n=arguments;return H.Deferred(function(r){H.each(a,function(t,e){var i=y(n[e[4]])&&n[e[4]];s[e[1]](function(){var t=i&&i.apply(this,arguments);t&&y(t.promise)?t.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[e[0]+"With"](this,i?[t]:arguments)})}),n=null}).promise()},then:function(e,i,r){var l=0;function h(n,a,o,s){return function(){function t(){var t,e;if(!(n<l)){if((t=o.apply(i,r))===a.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,y(e)?s?e.call(t,h(l,a,O,s),h(l,a,B,s)):(l++,e.call(t,h(l,a,O,s),h(l,a,B,s),h(l,a,O,a.notifyWith))):(o!==O&&(i=void 0,r=[t]),(s||a.resolveWith)(i,r))}}var i=this,r=arguments,e=s?t:function(){try{t()}catch(t){H.Deferred.exceptionHook&&H.Deferred.exceptionHook(t,e.stackTrace),l<=n+1&&(o!==B&&(i=void 0,r=[t]),a.rejectWith(i,r))}};n?e():(H.Deferred.getStackHook&&(e.stackTrace=H.Deferred.getStackHook()),R.setTimeout(e))}}return H.Deferred(function(t){a[0][3].add(h(0,t,y(r)?r:O,t.notifyWith)),a[1][3].add(h(0,t,y(e)?e:O)),a[2][3].add(h(0,t,y(i)?i:B))}).promise()},promise:function(t){return null!=t?H.extend(t,o):o}},s={};return H.each(a,function(t,e){var i=e[2],r=e[5];o[e[1]]=i.add,r&&i.add(function(){n=r},a[3-t][2].disable,a[3-t][3].disable,a[0][2].lock,a[0][3].lock),i.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=i.fireWith}),o.promise(s),t&&t.call(s,s),s},when:function(t){function e(e){return function(t){n[e]=this,a[e]=1<arguments.length?s.call(arguments):t,--i||o.resolveWith(n,a)}}var i=arguments.length,r=i,n=Array(r),a=s.call(arguments),o=H.Deferred();if(i<=1&&(N(t,o.done(e(r)).resolve,o.reject,!i),"pending"===o.state()||y(a[r]&&a[r].then)))return o.then();for(;r--;)N(a[r],e(r),o.reject);return o.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;H.Deferred.exceptionHook=function(t,e){R.console&&R.console.warn&&t&&I.test(t.name)&&R.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},H.readyException=function(t){R.setTimeout(function(){throw t})};var z=H.Deferred();function U(){w.removeEventListener("DOMContentLoaded",U),R.removeEventListener("load",U),H.ready()}H.fn.ready=function(t){return z.then(t).catch(function(t){H.readyException(t)}),this},H.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--H.readyWait:H.isReady)||(H.isReady=!0)!==t&&0<--H.readyWait||z.resolveWith(w,[H])}}),H.ready.then=z.then,"complete"===w.readyState||"loading"!==w.readyState&&!w.documentElement.doScroll?R.setTimeout(H.ready):(w.addEventListener("DOMContentLoaded",U),R.addEventListener("load",U));var V=function(t,e,i,r,n,a,o){var s=0,l=t.length,h=null==i;if("object"===x(i))for(s in n=!0,i)V(t,e,s,i[s],!0,a,o);else if(void 0!==r&&(n=!0,y(r)||(o=!0),h&&(e=o?(e.call(t,r),null):(h=e,function(t,e,i){return h.call(H(t),i)})),e))for(;s<l;s++)e(t[s],i,o?r:r.call(t[s],s,e(t[s],i)));return n?t:h?e.call(t):l?e(t[0],i):a},G=/^-ms-/,W=/-([a-z])/g;function j(t,e){return e.toUpperCase()}function X(t){return t.replace(G,"ms-").replace(W,j)}function $(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function q(){this.expando=H.expando+q.uid++}q.uid=1,q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},$(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var r,n=this.cache(t);if("string"==typeof e)n[X(e)]=i;else for(r in e)n[X(r)]=e[r];return n},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,r=t[this.expando];if(void 0!==r){if(void 0!==e){i=(e=Array.isArray(e)?e.map(X):(e=X(e))in r?[e]:e.match(k)||[]).length;for(;i--;)delete r[e[i]]}void 0!==e&&!H.isEmptyObject(r)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!H.isEmptyObject(e)}};var Y=new q,K=new q,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(t,e,i){var r;if(void 0===i&&1===t.nodeType)if(r="data-"+e.replace(Z,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(r))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Q.test(t)?JSON.parse(t):t)}(i)}catch(t){}K.set(t,e,i)}else i=void 0;return i}H.extend({hasData:function(t){return K.hasData(t)||Y.hasData(t)},data:function(t,e,i){return K.access(t,e,i)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,i){return Y.access(t,e,i)},_removeData:function(t,e){Y.remove(t,e)}}),H.fn.extend({data:function(i,t){var e,r,n,a=this[0],o=a&&a.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):V(this,function(t){var e;if(a&&void 0===t)return void 0!==(e=K.get(a,i))?e:void 0!==(e=J(a,i))?e:void 0;this.each(function(){K.set(this,i,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(n=K.get(a),1===a.nodeType&&!Y.get(a,"hasDataAttrs"))){for(e=o.length;e--;)o[e]&&0===(r=o[e].name).indexOf("data-")&&(r=X(r.slice(5)),J(a,r,n[r]));Y.set(a,"hasDataAttrs",!0)}return n},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),H.extend({queue:function(t,e,i){var r;if(t)return e=(e||"fx")+"queue",r=Y.get(t,e),i&&(!r||Array.isArray(i)?r=Y.access(t,e,H.makeArray(i)):r.push(i)),r||[]},dequeue:function(t,e){e=e||"fx";var i=H.queue(t,e),r=i.length,n=i.shift(),a=H._queueHooks(t,e);"inprogress"===n&&(n=i.shift(),r--),n&&("fx"===e&&i.unshift("inprogress"),delete a.stop,n.call(t,function(){H.dequeue(t,e)},a)),!r&&a&&a.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Y.get(t,i)||Y.access(t,i,{empty:H.Callbacks("once memory").add(function(){Y.remove(t,[e+"queue",i])})})}}),H.fn.extend({queue:function(e,i){var t=2;return"string"!=typeof e&&(i=e,e="fx",t--),arguments.length<t?H.queue(this[0],e):void 0===i?this:this.each(function(){var t=H.queue(this,e,i);H._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&H.dequeue(this,e)})},dequeue:function(t){return this.each(function(){H.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function i(){--n||a.resolveWith(o,[o])}var r,n=1,a=H.Deferred(),o=this,s=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(r=Y.get(o[s],t+"queueHooks"))&&r.empty&&(n++,r.empty.add(i));return i(),a.promise(e)}});var tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,et=new RegExp("^(?:([+-])=|)("+tt+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],rt=w.documentElement,nt=function(t){return H.contains(t.ownerDocument,t)},at={composed:!0};rt.getRootNode&&(nt=function(t){return H.contains(t.ownerDocument,t)||t.getRootNode(at)===t.ownerDocument});var ot=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&nt(t)&&"none"===H.css(t,"display")};function st(t,e,i,r){var n,a,o=20,s=r?function(){return r.cur()}:function(){return H.css(t,e,"")},l=s(),h=i&&i[3]||(H.cssNumber[e]?"":"px"),c=t.nodeType&&(H.cssNumber[e]||"px"!==h&&+l)&&et.exec(H.css(t,e));if(c&&c[3]!==h){for(l/=2,h=h||c[3],c=+l||1;o--;)H.style(t,e,c+h),(1-a)*(1-(a=s()/l||.5))<=0&&(o=0),c/=a;c*=2,H.style(t,e,c+h),i=i||[]}return i&&(c=+c||+l||0,n=i[1]?c+(i[1]+1)*i[2]:+i[2],r&&(r.unit=h,r.start=c,r.end=n)),n}var lt={};function ht(t,e){for(var i,r,n,a,o,s,l,h=[],c=0,u=t.length;c<u;c++)(r=t[c]).style&&(i=r.style.display,e?("none"===i&&(h[c]=Y.get(r,"display")||null,h[c]||(r.style.display="")),""===r.style.display&&ot(r)&&(h[c]=(l=o=a=void 0,o=(n=r).ownerDocument,s=n.nodeName,(l=lt[s])||(a=o.body.appendChild(o.createElement(s)),l=H.css(a,"display"),a.parentNode.removeChild(a),"none"===l&&(l="block"),lt[s]=l)))):"none"!==i&&(h[c]="none",Y.set(r,"display",i)));for(c=0;c<u;c++)null!=h[c]&&(t[c].style.display=h[c]);return t}H.fn.extend({show:function(){return ht(this,!0)},hide:function(){return ht(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){ot(this)?H(this).show():H(this).hide()})}});var ct,ut,dt=/^(?:checkbox|radio)$/i,pt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ft=/^$|^module$|\/(?:java|ecma)script/i;ct=w.createDocumentFragment().appendChild(w.createElement("div")),(ut=w.createElement("input")).setAttribute("type","radio"),ut.setAttribute("checked","checked"),ut.setAttribute("name","t"),ct.appendChild(ut),v.checkClone=ct.cloneNode(!0).cloneNode(!0).lastChild.checked,ct.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ct.cloneNode(!0).lastChild.defaultValue,ct.innerHTML="<option></option>",v.option=!!ct.lastChild;var mt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&S(t,e)?H.merge([t],i):i}function Et(t,e){for(var i=0,r=t.length;i<r;i++)Y.set(t[i],"globalEval",!e||Y.get(e[i],"globalEval"))}mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead,mt.th=mt.td,v.option||(mt.optgroup=mt.option=[1,"<select multiple='multiple'>","</select>"]);var vt=/<|&#?\w+;/;function yt(t,e,i,r,n){for(var a,o,s,l,h,c,u=e.createDocumentFragment(),d=[],p=0,f=t.length;p<f;p++)if((a=t[p])||0===a)if("object"===x(a))H.merge(d,a.nodeType?[a]:a);else if(vt.test(a)){for(o=o||u.appendChild(e.createElement("div")),s=(pt.exec(a)||["",""])[1].toLowerCase(),l=mt[s]||mt._default,o.innerHTML=l[1]+H.htmlPrefilter(a)+l[2],c=l[0];c--;)o=o.lastChild;H.merge(d,o.childNodes),(o=u.firstChild).textContent=""}else d.push(e.createTextNode(a));for(u.textContent="",p=0;a=d[p++];)if(r&&-1<H.inArray(a,r))n&&n.push(a);else if(h=nt(a),o=gt(u.appendChild(a),"script"),h&&Et(o),i)for(c=0;a=o[c++];)ft.test(a.type||"")&&i.push(a);return u}var Tt=/^key/,xt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,bt=/^([^.]*)(?:\.(.+)|)/;function Rt(){return!0}function wt(){return!1}function Ht(t,e){return t===function(){try{return w.activeElement}catch(t){}}()==("focus"===e)}function _t(t,e,i,r,n,a){var o,s;if("object"==typeof e){for(s in"string"!=typeof i&&(r=r||i,i=void 0),e)_t(t,s,i,r,e[s],a);return t}if(null==r&&null==n?(n=i,r=i=void 0):null==n&&("string"==typeof i?(n=r,r=void 0):(n=r,r=i,i=void 0)),!1===n)n=wt;else if(!n)return t;return 1===a&&(o=n,(n=function(t){return H().off(t),o.apply(this,arguments)}).guid=o.guid||(o.guid=H.guid++)),t.each(function(){H.event.add(this,e,n,r,i)})}function St(t,n,a){a?(Y.set(t,n,!1),H.event.add(t,n,{namespace:!1,handler:function(t){var e,i,r=Y.get(this,n);if(1&t.isTrigger&&this[n]){if(r.length)(H.event.special[n]||{}).delegateType&&t.stopPropagation();else if(r=s.call(arguments),Y.set(this,n,r),e=a(this,n),this[n](),r!==(i=Y.get(this,n))||e?Y.set(this,n,!1):i={},r!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else r.length&&(Y.set(this,n,{value:H.event.trigger(H.extend(r[0],H.Event.prototype),r.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Y.get(t,n)&&H.event.add(t,n,Rt)}H.event={global:{},add:function(e,t,i,r,n){var a,o,s,l,h,c,u,d,p,f,m,g=Y.get(e);if($(e))for(i.handler&&(i=(a=i).handler,n=a.selector),n&&H.find.matchesSelector(rt,n),i.guid||(i.guid=H.guid++),(l=g.events)||(l=g.events=Object.create(null)),(o=g.handle)||(o=g.handle=function(t){return void 0!==H&&H.event.triggered!==t.type?H.event.dispatch.apply(e,arguments):void 0}),h=(t=(t||"").match(k)||[""]).length;h--;)p=m=(s=bt.exec(t[h])||[])[1],f=(s[2]||"").split(".").sort(),p&&(u=H.event.special[p]||{},p=(n?u.delegateType:u.bindType)||p,u=H.event.special[p]||{},c=H.extend({type:p,origType:m,data:r,handler:i,guid:i.guid,selector:n,needsContext:n&&H.expr.match.needsContext.test(n),namespace:f.join(".")},a),(d=l[p])||((d=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,r,f,o)||e.addEventListener&&e.addEventListener(p,o)),u.add&&(u.add.call(e,c),c.handler.guid||(c.handler.guid=i.guid)),n?d.splice(d.delegateCount++,0,c):d.push(c),H.event.global[p]=!0)},remove:function(t,e,i,r,n){var a,o,s,l,h,c,u,d,p,f,m,g=Y.hasData(t)&&Y.get(t);if(g&&(l=g.events)){for(h=(e=(e||"").match(k)||[""]).length;h--;)if(p=m=(s=bt.exec(e[h])||[])[1],f=(s[2]||"").split(".").sort(),p){for(u=H.event.special[p]||{},d=l[p=(r?u.delegateType:u.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=a=d.length;a--;)c=d[a],!n&&m!==c.origType||i&&i.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(a,1),c.selector&&d.delegateCount--,u.remove&&u.remove.call(t,c));o&&!d.length&&(u.teardown&&!1!==u.teardown.call(t,f,g.handle)||H.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)H.event.remove(t,p+e[h],i,r,!0);H.isEmptyObject(l)&&Y.remove(t,"handle events")}},dispatch:function(t){var e,i,r,n,a,o,s=new Array(arguments.length),l=H.event.fix(t),h=(Y.get(this,"events")||Object.create(null))[l.type]||[],c=H.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(o=H.event.handlers.call(this,l,h),e=0;(n=o[e++])&&!l.isPropagationStopped();)for(l.currentTarget=n.elem,i=0;(a=n.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(r=((H.event.special[a.origType]||{}).handle||a.handler).apply(n.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,r,n,a,o,s=[],l=e.delegateCount,h=t.target;if(l&&h.nodeType&&!("click"===t.type&&1<=t.button))for(;h!==this;h=h.parentNode||this)if(1===h.nodeType&&("click"!==t.type||!0!==h.disabled)){for(a=[],o={},i=0;i<l;i++)void 0===o[n=(r=e[i]).selector+" "]&&(o[n]=r.needsContext?-1<H(n,this).index(h):H.find(n,this,null,[h]).length),o[n]&&a.push(r);a.length&&s.push({elem:h,handlers:a})}return h=this,l<e.length&&s.push({elem:h,handlers:e.slice(l)}),s},addProp:function(e,t){Object.defineProperty(H.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[H.expando]?t:new H.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return dt.test(e.type)&&e.click&&S(e,"input")&&St(e,"click",Rt),!1},trigger:function(t){var e=this||t;return dt.test(e.type)&&e.click&&S(e,"input")&&St(e,"click"),!0},_default:function(t){var e=t.target;return dt.test(e.type)&&e.click&&S(e,"input")&&Y.get(e,"click")||S(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},H.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},H.Event=function(t,e){if(!(this instanceof H.Event))return new H.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Rt:wt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&H.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[H.expando]=!0},H.Event.prototype={constructor:H.Event,isDefaultPrevented:wt,isPropagationStopped:wt,isImmediatePropagationStopped:wt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Rt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Rt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Rt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},H.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Tt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&xt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},H.event.addProp),H.each({focus:"focusin",blur:"focusout"},function(t,e){H.event.special[t]={setup:function(){return St(this,t,Ht),!1},trigger:function(){return St(this,t),!0},delegateType:e}}),H.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,n){H.event.special[t]={delegateType:n,bindType:n,handle:function(t){var e,i=t.relatedTarget,r=t.handleObj;return i&&(i===this||H.contains(this,i))||(t.type=r.origType,e=r.handler.apply(this,arguments),t.type=n),e}}}),H.fn.extend({on:function(t,e,i,r){return _t(this,t,e,i,r)},one:function(t,e,i,r){return _t(this,t,e,i,r,1)},off:function(t,e,i){var r,n;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,H(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=wt),this.each(function(){H.event.remove(this,t,i,e)});for(n in t)this.off(n,e,t[n]);return this}});var Ct=/<script|<style|<link/i,Mt=/checked\s*(?:[^=]|=\s*.checked.)/i,At=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pt(t,e){return S(t,"table")&&S(11!==e.nodeType?e:e.firstChild,"tr")&&H(t).children("tbody")[0]||t}function Lt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Dt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var i,r,n,a,o,s;if(1===e.nodeType){if(Y.hasData(t)&&(s=Y.get(t).events))for(n in Y.remove(e,"handle events"),s)for(i=0,r=s[n].length;i<r;i++)H.event.add(e,n,s[n][i]);K.hasData(t)&&(a=K.access(t),o=H.extend({},a),K.set(e,o))}}function kt(i,r,n,a){r=g(r);var t,e,o,s,l,h,c=0,u=i.length,d=u-1,p=r[0],f=y(p);if(f||1<u&&"string"==typeof p&&!v.checkClone&&Mt.test(p))return i.each(function(t){var e=i.eq(t);f&&(r[0]=p.call(this,t,e.html())),kt(e,r,n,a)});if(u&&(e=(t=yt(r,i[0].ownerDocument,!1,i,a)).firstChild,1===t.childNodes.length&&(t=e),e||a)){for(s=(o=H.map(gt(t,"script"),Lt)).length;c<u;c++)l=t,c!==d&&(l=H.clone(l,!0,!0),s&&H.merge(o,gt(l,"script"))),n.call(i[c],l,c);if(s)for(h=o[o.length-1].ownerDocument,H.map(o,Dt),c=0;c<s;c++)l=o[c],ft.test(l.type||"")&&!Y.access(l,"globalEval")&&H.contains(h,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?H._evalUrl&&!l.noModule&&H._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},h):T(l.textContent.replace(At,""),l,h))}return i}function Ot(t,e,i){for(var r,n=e?H.filter(e,t):t,a=0;null!=(r=n[a]);a++)i||1!==r.nodeType||H.cleanData(gt(r)),r.parentNode&&(i&&nt(r)&&Et(gt(r,"script")),r.parentNode.removeChild(r));return t}H.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var r,n,a,o,s,l,h,c=t.cloneNode(!0),u=nt(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||H.isXMLDoc(t)))for(o=gt(c),r=0,n=(a=gt(t)).length;r<n;r++)s=a[r],l=o[r],void 0,"input"===(h=l.nodeName.toLowerCase())&&dt.test(s.type)?l.checked=s.checked:"input"!==h&&"textarea"!==h||(l.defaultValue=s.defaultValue);if(e)if(i)for(a=a||gt(t),o=o||gt(c),r=0,n=a.length;r<n;r++)Ft(a[r],o[r]);else Ft(t,c);return 0<(o=gt(c,"script")).length&&Et(o,!u&&gt(t,"script")),c},cleanData:function(t){for(var e,i,r,n=H.event.special,a=0;void 0!==(i=t[a]);a++)if($(i)){if(e=i[Y.expando]){if(e.events)for(r in e.events)n[r]?H.event.remove(i,r):H.removeEvent(i,r,e.handle);i[Y.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),H.fn.extend({detach:function(t){return Ot(this,t,!0)},remove:function(t){return Ot(this,t)},text:function(t){return V(this,function(t){return void 0===t?H.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return kt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pt(this,t).appendChild(t)})},prepend:function(){return kt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Pt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return kt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return kt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(H.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return H.clone(this,t,e)})},html:function(t){return V(this,function(t){var e=this[0]||{},i=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ct.test(t)&&!mt[(pt.exec(t)||["",""])[1].toLowerCase()]){t=H.htmlPrefilter(t);try{for(;i<r;i++)1===(e=this[i]||{}).nodeType&&(H.cleanData(gt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var i=[];return kt(this,arguments,function(t){var e=this.parentNode;H.inArray(this,i)<0&&(H.cleanData(gt(this)),e&&e.replaceChild(t,this))},i)}}),H.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,o){H.fn[t]=function(t){for(var e,i=[],r=H(t),n=r.length-1,a=0;a<=n;a++)e=a===n?this:this.clone(!0),H(r[a])[o](e),l.apply(i,e.get());return this.pushStack(i)}});function Bt(t,e,i){var r,n,a={};for(n in e)a[n]=t.style[n],t.style[n]=e[n];for(n in r=i.call(t),e)t.style[n]=a[n];return r}var Nt,It,zt,Ut,Vt,Gt,Wt,jt,Xt=new RegExp("^("+tt+")(?!px)[a-z%]+$","i"),$t=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=R),e.getComputedStyle(t)},qt=new RegExp(it.join("|"),"i");function Yt(){if(jt){Wt.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",jt.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",rt.appendChild(Wt).appendChild(jt);var t=R.getComputedStyle(jt);Nt="1%"!==t.top,Gt=12===Kt(t.marginLeft),jt.style.right="60%",Ut=36===Kt(t.right),It=36===Kt(t.width),jt.style.position="absolute",zt=12===Kt(jt.offsetWidth/3),rt.removeChild(Wt),jt=null}}function Kt(t){return Math.round(parseFloat(t))}function Qt(t,e,i){var r,n,a,o,s=t.style;return(i=i||$t(t))&&(""!==(o=i.getPropertyValue(e)||i[e])||nt(t)||(o=H.style(t,e)),!v.pixelBoxStyles()&&Xt.test(o)&&qt.test(e)&&(r=s.width,n=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=i.width,s.width=r,s.minWidth=n,s.maxWidth=a)),void 0!==o?o+"":o}function Zt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Wt=w.createElement("div"),(jt=w.createElement("div")).style&&(jt.style.backgroundClip="content-box",jt.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===jt.style.backgroundClip,H.extend(v,{boxSizingReliable:function(){return Yt(),It},pixelBoxStyles:function(){return Yt(),Ut},pixelPosition:function(){return Yt(),Nt},reliableMarginLeft:function(){return Yt(),Gt},scrollboxSize:function(){return Yt(),zt},reliableTrDimensions:function(){var t,e,i,r;return null==Vt&&(t=w.createElement("table"),e=w.createElement("tr"),i=w.createElement("div"),t.style.cssText="position:absolute;left:-11111px",e.style.height="1px",i.style.height="9px",rt.appendChild(t).appendChild(e).appendChild(i),r=R.getComputedStyle(e),Vt=3<parseInt(r.height),rt.removeChild(t)),Vt}}));var Jt=["Webkit","Moz","ms"],te=w.createElement("div").style,ee={};function ie(t){var e=H.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=Jt.length;i--;)if((t=Jt[i]+e)in te)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ne=/^--/,ae={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"};function se(t,e,i){var r=et.exec(e);return r?Math.max(0,r[2]-(i||0))+(r[3]||"px"):e}function le(t,e,i,r,n,a){var o="width"===e?1:0,s=0,l=0;if(i===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===i&&(l+=H.css(t,i+it[o],!0,n)),r?("content"===i&&(l-=H.css(t,"padding"+it[o],!0,n)),"margin"!==i&&(l-=H.css(t,"border"+it[o]+"Width",!0,n))):(l+=H.css(t,"padding"+it[o],!0,n),"padding"!==i?l+=H.css(t,"border"+it[o]+"Width",!0,n):s+=H.css(t,"border"+it[o]+"Width",!0,n));return!r&&0<=a&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-a-l-s-.5))||0),l}function he(t,e,i){var r=$t(t),n=(!v.boxSizingReliable()||i)&&"border-box"===H.css(t,"boxSizing",!1,r),a=n,o=Qt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(Xt.test(o)){if(!i)return o;o="auto"}return(!v.boxSizingReliable()&&n||!v.reliableTrDimensions()&&S(t,"tr")||"auto"===o||!parseFloat(o)&&"inline"===H.css(t,"display",!1,r))&&t.getClientRects().length&&(n="border-box"===H.css(t,"boxSizing",!1,r),(a=s in t)&&(o=t[s])),(o=parseFloat(o)||0)+le(t,e,i||(n?"border":"content"),a,r,o)+"px"}function ce(t,e,i,r,n){return new ce.prototype.init(t,e,i,r,n)}H.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Qt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var n,a,o,s=X(e),l=ne.test(e),h=t.style;if(l||(e=ie(s)),o=H.cssHooks[e]||H.cssHooks[s],void 0===i)return o&&"get"in o&&void 0!==(n=o.get(t,!1,r))?n:h[e];"string"===(a=typeof i)&&(n=et.exec(i))&&n[1]&&(i=st(t,e,n),a="number"),null!=i&&i==i&&("number"!==a||l||(i+=n&&n[3]||(H.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==i||0!==e.indexOf("background")||(h[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,r))||(l?h.setProperty(e,i):h[e]=i))}},css:function(t,e,i,r){var n,a,o,s=X(e);return ne.test(e)||(e=ie(s)),(o=H.cssHooks[e]||H.cssHooks[s])&&"get"in o&&(n=o.get(t,!0,i)),void 0===n&&(n=Qt(t,e,r)),"normal"===n&&e in oe&&(n=oe[e]),""===i||i?(a=parseFloat(n),!0===i||isFinite(a)?a||0:n):n}}),H.each(["height","width"],function(t,l){H.cssHooks[l]={get:function(t,e,i){if(e)return!re.test(H.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?he(t,l,i):Bt(t,ae,function(){return he(t,l,i)})},set:function(t,e,i){var r,n=$t(t),a=!v.scrollboxSize()&&"absolute"===n.position,o=(a||i)&&"border-box"===H.css(t,"boxSizing",!1,n),s=i?le(t,l,i,o,n):0;return o&&a&&(s-=Math.ceil(t["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(n[l])-le(t,l,"border",!1,n)-.5)),s&&(r=et.exec(e))&&"px"!==(r[3]||"px")&&(t.style[l]=e,e=H.css(t,l)),se(0,e,s)}}}),H.cssHooks.marginLeft=Zt(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-Bt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),H.each({margin:"",padding:"",border:"Width"},function(n,a){H.cssHooks[n+a]={expand:function(t){for(var e=0,i={},r="string"==typeof t?t.split(" "):[t];e<4;e++)i[n+it[e]+a]=r[e]||r[e-2]||r[0];return i}},"margin"!==n&&(H.cssHooks[n+a].set=se)}),H.fn.extend({css:function(t,e){return V(this,function(t,e,i){var r,n,a={},o=0;if(Array.isArray(e)){for(r=$t(t),n=e.length;o<n;o++)a[e[o]]=H.css(t,e[o],!1,r);return a}return void 0!==i?H.style(t,e,i):H.css(t,e)},t,e,1<arguments.length)}}),((H.Tween=ce).prototype={constructor:ce,init:function(t,e,i,r,n,a){this.elem=t,this.prop=i,this.easing=n||H.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=a||(H.cssNumber[i]?"":"px")},cur:function(){var t=ce.propHooks[this.prop];return t&&t.get?t.get(this):ce.propHooks._default.get(this)},run:function(t){var e,i=ce.propHooks[this.prop];return this.options.duration?this.pos=e=H.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ce.propHooks._default.set(this),this}}).init.prototype=ce.prototype,(ce.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=H.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){H.fx.step[t.prop]?H.fx.step[t.prop](t):1!==t.elem.nodeType||!H.cssHooks[t.prop]&&null==t.elem.style[ie(t.prop)]?t.elem[t.prop]=t.now:H.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=ce.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},H.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},H.fx=ce.prototype.init,H.fx.step={};var ue,de,pe,fe,me=/^(?:toggle|show|hide)$/,ge=/queueHooks$/;function Ee(){de&&(!1===w.hidden&&R.requestAnimationFrame?R.requestAnimationFrame(Ee):R.setTimeout(Ee,H.fx.interval),H.fx.tick())}function ve(){return R.setTimeout(function(){ue=void 0}),ue=Date.now()}function ye(t,e){var i,r=0,n={height:t};for(e=e?1:0;r<4;r+=2-e)n["margin"+(i=it[r])]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function Te(t,e,i){for(var r,n=(xe.tweeners[e]||[]).concat(xe.tweeners["*"]),a=0,o=n.length;a<o;a++)if(r=n[a].call(i,e,t))return r}function xe(a,t,e){var i,o,r=0,n=xe.prefilters.length,s=H.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=ue||ve(),e=Math.max(0,h.startTime+h.duration-t),i=1-(e/h.duration||0),r=0,n=h.tweens.length;r<n;r++)h.tweens[r].run(i);return s.notifyWith(a,[h,i,e]),i<1&&n?e:(n||s.notifyWith(a,[h,1,0]),s.resolveWith(a,[h]),!1)},h=s.promise({elem:a,props:H.extend({},t),opts:H.extend(!0,{specialEasing:{},easing:H.easing._default},e),originalProperties:t,originalOptions:e,startTime:ue||ve(),duration:e.duration,tweens:[],createTween:function(t,e){var i=H.Tween(a,h.opts,t,e,h.opts.specialEasing[t]||h.opts.easing);return h.tweens.push(i),i},stop:function(t){var e=0,i=t?h.tweens.length:0;if(o)return this;for(o=!0;e<i;e++)h.tweens[e].run(1);return t?(s.notifyWith(a,[h,1,0]),s.resolveWith(a,[h,t])):s.rejectWith(a,[h,t]),this}}),c=h.props;for(!function(t,e){var i,r,n,a,o;for(i in t)if(n=e[r=X(i)],a=t[i],Array.isArray(a)&&(n=a[1],a=t[i]=a[0]),i!==r&&(t[r]=a,delete t[i]),(o=H.cssHooks[r])&&"expand"in o)for(i in a=o.expand(a),delete t[r],a)i in t||(t[i]=a[i],e[i]=n);else e[r]=n}(c,h.opts.specialEasing);r<n;r++)if(i=xe.prefilters[r].call(h,a,c,h.opts))return y(i.stop)&&(H._queueHooks(h.elem,h.opts.queue).stop=i.stop.bind(i)),i;return H.map(c,Te,h),y(h.opts.start)&&h.opts.start.call(a,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),H.fx.timer(H.extend(l,{elem:a,anim:h,queue:h.opts.queue})),h}H.Animation=H.extend(xe,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return st(i.elem,t,et.exec(e),i),i}]},tweener:function(t,e){for(var i,r=0,n=(t=y(t)?(e=t,["*"]):t.match(k)).length;r<n;r++)i=t[r],xe.tweeners[i]=xe.tweeners[i]||[],xe.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var r,n,a,o,s,l,h,c,u="width"in e||"height"in e,d=this,p={},f=t.style,m=t.nodeType&&ot(t),g=Y.get(t,"fxshow");for(r in i.queue||(null==(o=H._queueHooks(t,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,d.always(function(){d.always(function(){o.unqueued--,H.queue(t,"fx").length||o.empty.fire()})})),e)if(n=e[r],me.test(n)){if(delete e[r],a=a||"toggle"===n,n===(m?"hide":"show")){if("show"!==n||!g||void 0===g[r])continue;m=!0}p[r]=g&&g[r]||H.style(t,r)}if((l=!H.isEmptyObject(e))||!H.isEmptyObject(p))for(r in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(h=g&&g.display)&&(h=Y.get(t,"display")),"none"===(c=H.css(t,"display"))&&(h?c=h:(ht([t],!0),h=t.style.display||h,c=H.css(t,"display"),ht([t]))),("inline"===c||"inline-block"===c&&null!=h)&&"none"===H.css(t,"float")&&(l||(d.done(function(){f.display=h}),null==h&&(c=f.display,h="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=Y.access(t,"fxshow",{display:h}),a&&(g.hidden=!m),m&&ht([t],!0),d.done(function(){for(r in m||ht([t]),Y.remove(t,"fxshow"),p)H.style(t,r,p[r])})),l=Te(m?g[r]:0,r,d),r in g||(g[r]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?xe.prefilters.unshift(t):xe.prefilters.push(t)}}),H.speed=function(t,e,i){var r=t&&"object"==typeof t?H.extend({},t):{complete:i||!i&&e||y(t)&&t,duration:t,easing:i&&e||e&&!y(e)&&e};return H.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in H.fx.speeds?r.duration=H.fx.speeds[r.duration]:r.duration=H.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&H.dequeue(this,r.queue)},r},H.fn.extend({fadeTo:function(t,e,i,r){return this.filter(ot).css("opacity",0).show().end().animate({opacity:e},t,i,r)},animate:function(e,t,i,r){function n(){var t=xe(this,H.extend({},e),o);(a||Y.get(this,"finish"))&&t.stop(!0)}var a=H.isEmptyObject(e),o=H.speed(t,i,r);return n.finish=n,a||!1===o.queue?this.each(n):this.queue(o.queue,n)},stop:function(n,t,a){function o(t){var e=t.stop;delete t.stop,e(a)}return"string"!=typeof n&&(a=t,t=n,n=void 0),t&&this.queue(n||"fx",[]),this.each(function(){var t=!0,e=null!=n&&n+"queueHooks",i=H.timers,r=Y.get(this);if(e)r[e]&&r[e].stop&&o(r[e]);else for(e in r)r[e]&&r[e].stop&&ge.test(e)&&o(r[e]);for(e=i.length;e--;)i[e].elem!==this||null!=n&&i[e].queue!==n||(i[e].anim.stop(a),t=!1,i.splice(e,1));!t&&a||H.dequeue(this,n)})},finish:function(o){return!1!==o&&(o=o||"fx"),this.each(function(){var t,e=Y.get(this),i=e[o+"queue"],r=e[o+"queueHooks"],n=H.timers,a=i?i.length:0;for(e.finish=!0,H.queue(this,o,[]),r&&r.stop&&r.stop.call(this,!0),t=n.length;t--;)n[t].elem===this&&n[t].queue===o&&(n[t].anim.stop(!0),n.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete e.finish})}}),H.each(["toggle","show","hide"],function(t,r){var n=H.fn[r];H.fn[r]=function(t,e,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ye(r,!0),t,e,i)}}),H.each({slideDown:ye("show"),slideUp:ye("hide"),slideToggle:ye("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,r){H.fn[t]=function(t,e,i){return this.animate(r,t,e,i)}}),H.timers=[],H.fx.tick=function(){var t,e=0,i=H.timers;for(ue=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||H.fx.stop(),ue=void 0},H.fx.timer=function(t){H.timers.push(t),H.fx.start()},H.fx.interval=13,H.fx.start=function(){de||(de=!0,Ee())},H.fx.stop=function(){de=null},H.fx.speeds={slow:600,fast:200,_default:400},H.fn.delay=function(r,t){return r=H.fx&&H.fx.speeds[r]||r,t=t||"fx",this.queue(t,function(t,e){var i=R.setTimeout(t,r);e.stop=function(){R.clearTimeout(i)}})},pe=w.createElement("input"),fe=w.createElement("select").appendChild(w.createElement("option")),pe.type="checkbox",v.checkOn=""!==pe.value,v.optSelected=fe.selected,(pe=w.createElement("input")).value="t",pe.type="radio",v.radioValue="t"===pe.value;var be,Re=H.expr.attrHandle;H.fn.extend({attr:function(t,e){return V(this,H.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){H.removeAttr(this,t)})}}),H.extend({attr:function(t,e,i){var r,n,a=t.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===t.getAttribute?H.prop(t,e,i):(1===a&&H.isXMLDoc(t)||(n=H.attrHooks[e.toLowerCase()]||(H.expr.match.bool.test(e)?be:void 0)),void 0!==i?null===i?void H.removeAttr(t,e):n&&"set"in n&&void 0!==(r=n.set(t,i,e))?r:(t.setAttribute(e,i+""),i):n&&"get"in n&&null!==(r=n.get(t,e))?r:null==(r=H.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&S(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,r=0,n=e&&e.match(k);if(n&&1===t.nodeType)for(;i=n[r++];)t.removeAttribute(i)}}),be={set:function(t,e,i){return!1===e?H.removeAttr(t,i):t.setAttribute(i,i),i}},H.each(H.expr.match.bool.source.match(/\w+/g),function(t,e){var o=Re[e]||H.find.attr;Re[e]=function(t,e,i){var r,n,a=e.toLowerCase();return i||(n=Re[a],Re[a]=r,r=null!=o(t,e,i)?a:null,Re[a]=n),r}});var we=/^(?:input|select|textarea|button)$/i,He=/^(?:a|area)$/i;function _e(t){return(t.match(k)||[]).join(" ")}function Se(t){return t.getAttribute&&t.getAttribute("class")||""}function Ce(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(k)||[]}H.fn.extend({prop:function(t,e){return V(this,H.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[H.propFix[t]||t]})}}),H.extend({prop:function(t,e,i){var r,n,a=t.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&H.isXMLDoc(t)||(e=H.propFix[e]||e,n=H.propHooks[e]),void 0!==i?n&&"set"in n&&void 0!==(r=n.set(t,i,e))?r:t[e]=i:n&&"get"in n&&null!==(r=n.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=H.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||He.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(H.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),H.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){H.propFix[this.toLowerCase()]=this}),H.fn.extend({addClass:function(e){var t,i,r,n,a,o,s,l=0;if(y(e))return this.each(function(t){H(this).addClass(e.call(this,t,Se(this)))});if((t=Ce(e)).length)for(;i=this[l++];)if(n=Se(i),r=1===i.nodeType&&" "+_e(n)+" "){for(o=0;a=t[o++];)r.indexOf(" "+a+" ")<0&&(r+=a+" ");n!==(s=_e(r))&&i.setAttribute("class",s)}return this},removeClass:function(e){var t,i,r,n,a,o,s,l=0;if(y(e))return this.each(function(t){H(this).removeClass(e.call(this,t,Se(this)))});if(!arguments.length)return this.attr("class","");if((t=Ce(e)).length)for(;i=this[l++];)if(n=Se(i),r=1===i.nodeType&&" "+_e(n)+" "){for(o=0;a=t[o++];)for(;-1<r.indexOf(" "+a+" ");)r=r.replace(" "+a+" "," ");n!==(s=_e(r))&&i.setAttribute("class",s)}return this},toggleClass:function(n,e){var a=typeof n,o="string"==a||Array.isArray(n);return"boolean"==typeof e&&o?e?this.addClass(n):this.removeClass(n):y(n)?this.each(function(t){H(this).toggleClass(n.call(this,t,Se(this),e),e)}):this.each(function(){var t,e,i,r;if(o)for(e=0,i=H(this),r=Ce(n);t=r[e++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==n&&"boolean"!=a||((t=Se(this))&&Y.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===n?"":Y.get(this,"__className__")||""))})},hasClass:function(t){var e,i,r=0;for(e=" "+t+" ";i=this[r++];)if(1===i.nodeType&&-1<(" "+_e(Se(i))+" ").indexOf(e))return!0;return!1}});var Me=/\r/g;H.fn.extend({val:function(i){var r,t,n,e=this[0];return arguments.length?(n=y(i),this.each(function(t){var e;1===this.nodeType&&(null==(e=n?i.call(this,t,H(this).val()):i)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=H.map(e,function(t){return null==t?"":t+""})),(r=H.valHooks[this.type]||H.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,e,"value")||(this.value=e))})):e?(r=H.valHooks[e.type]||H.valHooks[e.nodeName.toLowerCase()])&&"get"in r&&void 0!==(t=r.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(Me,""):null==t?"":t:void 0}}),H.extend({valHooks:{option:{get:function(t){var e=H.find.attr(t,"value");return null!=e?e:_e(H.text(t))}},select:{get:function(t){var e,i,r,n=t.options,a=t.selectedIndex,o="select-one"===t.type,s=o?null:[],l=o?a+1:n.length;for(r=a<0?l:o?a:0;r<l;r++)if(((i=n[r]).selected||r===a)&&!i.disabled&&(!i.parentNode.disabled||!S(i.parentNode,"optgroup"))){if(e=H(i).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var i,r,n=t.options,a=H.makeArray(e),o=n.length;o--;)((r=n[o]).selected=-1<H.inArray(H.valHooks.option.get(r),a))&&(i=!0);return i||(t.selectedIndex=-1),a}}}}),H.each(["radio","checkbox"],function(){H.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<H.inArray(H(t).val(),e)}},v.checkOn||(H.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in R;function Ae(t){t.stopPropagation()}var Pe=/^(?:focusinfocus|focusoutblur)$/;H.extend(H.event,{trigger:function(t,e,i,r){var n,a,o,s,l,h,c,u,d=[i||w],p=E.call(t,"type")?t.type:t,f=E.call(t,"namespace")?t.namespace.split("."):[];if(a=u=o=i=i||w,3!==i.nodeType&&8!==i.nodeType&&!Pe.test(p+H.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),l=p.indexOf(":")<0&&"on"+p,(t=t[H.expando]?t:new H.Event(p,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:H.makeArray(e,[t]),c=H.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(i,e))){if(!r&&!c.noBubble&&!m(i)){for(s=c.delegateType||p,Pe.test(s+p)||(a=a.parentNode);a;a=a.parentNode)d.push(a),o=a;o===(i.ownerDocument||w)&&d.push(o.defaultView||o.parentWindow||R)}for(n=0;(a=d[n++])&&!t.isPropagationStopped();)u=a,t.type=1<n?s:c.bindType||p,(h=(Y.get(a,"events")||Object.create(null))[t.type]&&Y.get(a,"handle"))&&h.apply(a,e),(h=l&&a[l])&&h.apply&&$(a)&&(t.result=h.apply(a,e),!1===t.result&&t.preventDefault());return t.type=p,r||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),e)||!$(i)||l&&y(i[p])&&!m(i)&&((o=i[l])&&(i[l]=null),H.event.triggered=p,t.isPropagationStopped()&&u.addEventListener(p,Ae),i[p](),t.isPropagationStopped()&&u.removeEventListener(p,Ae),H.event.triggered=void 0,o&&(i[l]=o)),t.result}},simulate:function(t,e,i){var r=H.extend(new H.Event,i,{type:t,isSimulated:!0});H.event.trigger(r,null,e)}}),H.fn.extend({trigger:function(t,e){return this.each(function(){H.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return H.event.trigger(t,e,i,!0)}}),v.focusin||H.each({focus:"focusin",blur:"focusout"},function(i,r){function n(t){H.event.simulate(r,t.target,H.event.fix(t))}H.event.special[r]={setup:function(){var t=this.ownerDocument||this.document||this,e=Y.access(t,r);e||t.addEventListener(i,n,!0),Y.access(t,r,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,e=Y.access(t,r)-1;e?Y.access(t,r,e):(t.removeEventListener(i,n,!0),Y.remove(t,r))}}});var Le=R.location,De={guid:Date.now()},Fe=/\?/;H.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new R.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||H.error("Invalid XML: "+t),e};var ke=/\[\]$/,Oe=/\r?\n/g,Be=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;function Ie(i,t,r,n){var e;if(Array.isArray(t))H.each(t,function(t,e){r||ke.test(i)?n(i,e):Ie(i+"["+("object"==typeof e&&null!=e?t:"")+"]",e,r,n)});else if(r||"object"!==x(t))n(i,t);else for(e in t)Ie(i+"["+e+"]",t[e],r,n)}H.param=function(t,e){function i(t,e){var i=y(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)}var r,n=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!H.isPlainObject(t))H.each(t,function(){i(this.name,this.value)});else for(r in t)Ie(r,t[r],e,i);return n.join("&")},H.fn.extend({serialize:function(){return H.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=H.prop(this,"elements");return t?H.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!H(this).is(":disabled")&&Ne.test(this.nodeName)&&!Be.test(t)&&(this.checked||!dt.test(t))}).map(function(t,e){var i=H(this).val();return null==i?null:Array.isArray(i)?H.map(i,function(t){return{name:e.name,value:t.replace(Oe,"\r\n")}}):{name:e.name,value:i.replace(Oe,"\r\n")}}).get()}});var ze=/%20/g,Ue=/#.*$/,Ve=/([?&])_=[^&]*/,Ge=/^(.*?):[ \t]*([^\r\n]*)$/gm,We=/^(?:GET|HEAD)$/,je=/^\/\//,Xe={},$e={},qe="*/".concat("*"),Ye=w.createElement("a");function Ke(a){return function(t,e){"string"!=typeof t&&(e=t,t="*");var i,r=0,n=t.toLowerCase().match(k)||[];if(y(e))for(;i=n[r++];)"+"===i[0]?(i=i.slice(1)||"*",(a[i]=a[i]||[]).unshift(e)):(a[i]=a[i]||[]).push(e)}}function Qe(e,n,a,o){var s={},l=e===$e;function h(t){var r;return s[t]=!0,H.each(e[t]||[],function(t,e){var i=e(n,a,o);return"string"!=typeof i||l||s[i]?l?!(r=i):void 0:(n.dataTypes.unshift(i),h(i),!1)}),r}return h(n.dataTypes[0])||!s["*"]&&h("*")}function Ze(t,e){var i,r,n=H.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((n[i]?t:r=r||{})[i]=e[i]);return r&&H.extend(!0,t,r),t}Ye.href=Le.href,H.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Le.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Le.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":H.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ze(Ze(t,H.ajaxSettings),e):Ze(H.ajaxSettings,t)},ajaxPrefilter:Ke(Xe),ajaxTransport:Ke($e),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var c,u,d,i,p,r,f,m,n,a,g=H.ajaxSetup({},e),E=g.context||g,v=g.context&&(E.nodeType||E.jquery)?H(E):H.event,y=H.Deferred(),T=H.Callbacks("once memory"),x=g.statusCode||{},o={},s={},l="canceled",b={readyState:0,getResponseHeader:function(t){var e;if(f){if(!i)for(i={};e=Ge.exec(d);)i[e[1].toLowerCase()+" "]=(i[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=i[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return f?d:null},setRequestHeader:function(t,e){return null==f&&(t=s[t.toLowerCase()]=s[t.toLowerCase()]||t,o[t]=e),this},overrideMimeType:function(t){return null==f&&(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(f)b.always(t[b.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||l;return c&&c.abort(e),h(0,e),this}};if(y.promise(b),g.url=((t||g.url||Le.href)+"").replace(je,Le.protocol+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(k)||[""],null==g.crossDomain){r=w.createElement("a");try{r.href=g.url,r.href=r.href,g.crossDomain=Ye.protocol+"//"+Ye.host!=r.protocol+"//"+r.host}catch(t){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=H.param(g.data,g.traditional)),Qe(Xe,g,e,b),f)return b;for(n in(m=H.event&&g.global)&&0==H.active++&&H.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!We.test(g.type),u=g.url.replace(Ue,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(ze,"+")):(a=g.url.slice(u.length),g.data&&(g.processData||"string"==typeof g.data)&&(u+=(Fe.test(u)?"&":"?")+g.data,delete g.data),!1===g.cache&&(u=u.replace(Ve,"$1"),a=(Fe.test(u)?"&":"?")+"_="+De.guid+++a),g.url=u+a),g.ifModified&&(H.lastModified[u]&&b.setRequestHeader("If-Modified-Since",H.lastModified[u]),H.etag[u]&&b.setRequestHeader("If-None-Match",H.etag[u])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&b.setRequestHeader("Content-Type",g.contentType),b.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+qe+"; q=0.01":""):g.accepts["*"]),g.headers)b.setRequestHeader(n,g.headers[n]);if(g.beforeSend&&(!1===g.beforeSend.call(E,b,g)||f))return b.abort();if(l="abort",T.add(g.complete),b.done(g.success),b.fail(g.error),c=Qe($e,g,e,b)){if(b.readyState=1,m&&v.trigger("ajaxSend",[b,g]),f)return b;g.async&&0<g.timeout&&(p=R.setTimeout(function(){b.abort("timeout")},g.timeout));try{f=!1,c.send(o,h)}catch(t){if(f)throw t;h(-1,t)}}else h(-1,"No Transport");function h(t,e,i,r){var n,a,o,s,l,h=e;f||(f=!0,p&&R.clearTimeout(p),c=void 0,d=r||"",b.readyState=0<t?4:0,n=200<=t&&t<300||304===t,i&&(s=function(t,e,i){for(var r,n,a,o,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(n in s)if(s[n]&&s[n].test(r)){l.unshift(n);break}if(l[0]in i)a=l[0];else{for(n in i){if(!l[0]||t.converters[n+" "+l[0]]){a=n;break}o=o||n}a=a||o}if(a)return a!==l[0]&&l.unshift(a),i[a]}(g,b,i)),!n&&-1<H.inArray("script",g.dataTypes)&&(g.converters["text script"]=function(){}),s=function(t,e,i,r){var n,a,o,s,l,h={},c=t.dataTypes.slice();if(c[1])for(o in t.converters)h[o.toLowerCase()]=t.converters[o];for(a=c.shift();a;)if(t.responseFields[a]&&(i[t.responseFields[a]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=a,a=c.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(o=h[l+" "+a]||h["* "+a]))for(n in h)if((s=n.split(" "))[1]===a&&(o=h[l+" "+s[0]]||h["* "+s[0]])){!0===o?o=h[n]:!0!==h[n]&&(a=s[0],c.unshift(s[1]));break}if(!0!==o)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+l+" to "+a}}}return{state:"success",data:e}}(g,s,b,n),n?(g.ifModified&&((l=b.getResponseHeader("Last-Modified"))&&(H.lastModified[u]=l),(l=b.getResponseHeader("etag"))&&(H.etag[u]=l)),204===t||"HEAD"===g.type?h="nocontent":304===t?h="notmodified":(h=s.state,a=s.data,n=!(o=s.error))):(o=h,!t&&h||(h="error",t<0&&(t=0))),b.status=t,b.statusText=(e||h)+"",n?y.resolveWith(E,[a,h,b]):y.rejectWith(E,[b,h,o]),b.statusCode(x),x=void 0,m&&v.trigger(n?"ajaxSuccess":"ajaxError",[b,g,n?a:o]),T.fireWith(E,[b,h]),m&&(v.trigger("ajaxComplete",[b,g]),--H.active||H.event.trigger("ajaxStop")))}return b},getJSON:function(t,e,i){return H.get(t,e,i,"json")},getScript:function(t,e){return H.get(t,void 0,e,"script")}}),H.each(["get","post"],function(t,n){H[n]=function(t,e,i,r){return y(e)&&(r=r||i,i=e,e=void 0),H.ajax(H.extend({url:t,type:n,dataType:r,data:e,success:i},H.isPlainObject(t)&&t))}}),H.ajaxPrefilter(function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),H._evalUrl=function(t,e,i){return H.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){H.globalEval(t,e,i)}})},H.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=H(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(i){return y(i)?this.each(function(t){H(this).wrapInner(i.call(this,t))}):this.each(function(){var t=H(this),e=t.contents();e.length?e.wrapAll(i):t.append(i)})},wrap:function(e){var i=y(e);return this.each(function(t){H(this).wrapAll(i?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){H(this).replaceWith(this.childNodes)}),this}}),H.expr.pseudos.hidden=function(t){return!H.expr.pseudos.visible(t)},H.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},H.ajaxSettings.xhr=function(){try{return new R.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},ti=H.ajaxSettings.xhr();v.cors=!!ti&&"withCredentials"in ti,v.ajax=ti=!!ti,H.ajaxTransport(function(n){var a,o;if(v.cors||ti&&!n.crossDomain)return{send:function(t,e){var i,r=n.xhr();if(r.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(i in n.xhrFields)r[i]=n.xhrFields[i];for(i in n.mimeType&&r.overrideMimeType&&r.overrideMimeType(n.mimeType),n.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)r.setRequestHeader(i,t[i]);a=function(t){return function(){a&&(a=o=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===t?r.abort():"error"===t?"number"!=typeof r.status?e(0,"error"):e(r.status,r.statusText):e(Je[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=a(),o=r.onerror=r.ontimeout=a("error"),void 0!==r.onabort?r.onabort=o:r.onreadystatechange=function(){4===r.readyState&&R.setTimeout(function(){a&&o()})},a=a("abort");try{r.send(n.hasContent&&n.data||null)}catch(t){if(a)throw t}},abort:function(){a&&a()}}}),H.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),H.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return H.globalEval(t),t}}}),H.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),H.ajaxTransport("script",function(i){var r,n;if(i.crossDomain||i.scriptAttrs)return{send:function(t,e){r=H("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",n=function(t){r.remove(),n=null,t&&e("error"===t.type?404:200,t.type)}),w.head.appendChild(r[0])},abort:function(){n&&n()}}});var ei,ii=[],ri=/(=)\?(?=&|$)|\?\?/;H.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ii.pop()||H.expando+"_"+De.guid++;return this[t]=!0,t}}),H.ajaxPrefilter("json jsonp",function(t,e,i){var r,n,a,o=!1!==t.jsonp&&(ri.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ri.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(ri,"$1"+r):!1!==t.jsonp&&(t.url+=(Fe.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||H.error(r+" was not called"),a[0]},t.dataTypes[0]="json",n=R[r],R[r]=function(){a=arguments},i.always(function(){void 0===n?H(R).removeProp(r):R[r]=n,t[r]&&(t.jsonpCallback=e.jsonpCallback,ii.push(r)),a&&y(n)&&n(a[0]),a=n=void 0}),"script"}),v.createHTMLDocument=((ei=w.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ei.childNodes.length),H.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(v.createHTMLDocument?((r=(e=w.implementation.createHTMLDocument("")).createElement("base")).href=w.location.href,e.head.appendChild(r)):e=w),a=!i&&[],(n=C.exec(t))?[e.createElement(n[1])]:(n=yt([t],e,a),a&&a.length&&H(a).remove(),H.merge([],n.childNodes)));var r,n,a},H.fn.load=function(t,e,i){var r,n,a,o=this,s=t.indexOf(" ");return-1<s&&(r=_e(t.slice(s)),t=t.slice(0,s)),y(e)?(i=e,e=void 0):e&&"object"==typeof e&&(n="POST"),0<o.length&&H.ajax({url:t,type:n||"GET",dataType:"html",data:e}).done(function(t){a=arguments,o.html(r?H("<div>").append(H.parseHTML(t)).find(r):t)}).always(i&&function(t,e){o.each(function(){i.apply(this,a||[t.responseText,e,t])})}),this},H.expr.pseudos.animated=function(e){return H.grep(H.timers,function(t){return e===t.elem}).length},H.offset={setOffset:function(t,e,i){var r,n,a,o,s,l,h=H.css(t,"position"),c=H(t),u={};"static"===h&&(t.style.position="relative"),s=c.offset(),a=H.css(t,"top"),l=H.css(t,"left"),n=("absolute"===h||"fixed"===h)&&-1<(a+l).indexOf("auto")?(o=(r=c.position()).top,r.left):(o=parseFloat(a)||0,parseFloat(l)||0),y(e)&&(e=e.call(t,i,H.extend({},s))),null!=e.top&&(u.top=e.top-s.top+o),null!=e.left&&(u.left=e.left-s.left+n),"using"in e?e.using.call(t,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),c.css(u))}},H.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){H.offset.setOffset(this,e,t)});var t,i,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),i=r.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,r=this[0],n={top:0,left:0};if("fixed"===H.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),i=r.ownerDocument,t=r.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===H.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((n=H(t).offset()).top+=H.css(t,"borderTopWidth",!0),n.left+=H.css(t,"borderLeftWidth",!0))}return{top:e.top-n.top-H.css(r,"marginTop",!0),left:e.left-n.left-H.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===H.css(t,"position");)t=t.offsetParent;return t||rt})}}),H.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var a="pageYOffset"===n;H.fn[e]=function(t){return V(this,function(t,e,i){var r;if(m(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===i)return r?r[n]:t[e];r?r.scrollTo(a?r.pageXOffset:i,a?i:r.pageYOffset):t[e]=i},e,t,arguments.length)}}),H.each(["top","left"],function(t,i){H.cssHooks[i]=Zt(v.pixelPosition,function(t,e){if(e)return e=Qt(t,i),Xt.test(e)?H(t).position()[i]+"px":e})}),H.each({Height:"height",Width:"width"},function(o,s){H.each({padding:"inner"+o,content:s,"":"outer"+o},function(r,a){H.fn[a]=function(t,e){var i=arguments.length&&(r||"boolean"!=typeof t),n=r||(!0===t||!0===e?"margin":"border");return V(this,function(t,e,i){var r;return m(t)?0===a.indexOf("outer")?t["inner"+o]:t.document.documentElement["client"+o]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+o],r["scroll"+o],t.body["offset"+o],r["offset"+o],r["client"+o])):void 0===i?H.css(t,e,n):H.style(t,e,i,n)},s,i?t:void 0,i)}})}),H.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){H.fn[e]=function(t){return this.on(e,t)}}),H.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,r){return this.on(e,t,i,r)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),H.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,i){H.fn[i]=function(t,e){return 0<arguments.length?this.on(i,null,t,e):this.trigger(i)}});var ni=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;H.proxy=function(t,e){var i,r,n;if("string"==typeof e&&(i=t[e],e=t,t=i),y(t))return r=s.call(arguments,2),(n=function(){return t.apply(e||this,r.concat(s.call(arguments)))}).guid=t.guid=t.guid||H.guid++,n},H.holdReady=function(t){t?H.readyWait++:H.ready(!0)},H.isArray=Array.isArray,H.parseJSON=JSON.parse,H.nodeName=S,H.isFunction=y,H.isWindow=m,H.camelCase=X,H.type=x,H.now=Date.now,H.isNumeric=function(t){var e=H.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},H.trim=function(t){return null==t?"":(t+"").replace(ni,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return H});var ai=R.jQuery,oi=R.$;return H.noConflict=function(t){return R.$===H&&(R.$=oi),t&&R.jQuery===H&&(R.jQuery=ai),H},void 0===t&&(R.jQuery=R.$=H),H}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).Swiper=e()}(this,function(){"use strict";function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function e(){return(e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t}).apply(this,arguments)}function r(t){return null!==t&&"object"==typeof t&&"constructor"in t&&t.constructor===Object}function n(e,i){void 0===e&&(e={}),void 0===i&&(i={}),Object.keys(i).forEach(function(t){void 0===e[t]?e[t]=i[t]:r(i[t])&&r(e[t])&&0<Object.keys(i[t]).length&&n(e[t],i[t])})}var i={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function T(){var t="undefined"!=typeof document?document:{};return n(t,i),t}var a={document:i,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(t){return"undefined"==typeof setTimeout?(t(),null):setTimeout(t,0)},cancelAnimationFrame:function(t){"undefined"!=typeof setTimeout&&clearTimeout(t)}};function at(){var t="undefined"!=typeof window?window:{};return n(t,a),t}function o(t){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function l(t,e,i){return(l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function(t,e,i){var r=[null];r.push.apply(r,e);var n=new(Function.bind.apply(t,r));return i&&s(n,i.prototype),n}).apply(null,arguments)}function h(t){var r="function"==typeof Map?new Map:void 0;return(h=function(t){if(null===t||(e=t,-1===Function.toString.call(e).indexOf("[native code]")))return t;var e;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,i)}function i(){return l(t,arguments,o(this).constructor)}return i.prototype=Object.create(t.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),s(i,t)})(t)}var c,u,d,p=(c=h(Array),d=c,(u=f).prototype=Object.create(d.prototype),(u.prototype.constructor=u).__proto__=d,f);function f(t){var e,i,r;return i=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(e=c.call.apply(c,[this].concat(t))||this),r=i.__proto__,Object.defineProperty(i,"__proto__",{get:function(){return r},set:function(t){r.__proto__=t}}),e}function m(t){void 0===t&&(t=[]);var e=[];return t.forEach(function(t){Array.isArray(t)?e.push.apply(e,m(t)):e.push(t)}),e}function g(t,e){return Array.prototype.filter.call(t,e)}function P(t,n){var e=at(),a=T(),i=[];if(!n&&t instanceof p)return t;if(!t)return new p(i);if("string"==typeof t){var r=t.trim();if(0<=r.indexOf("<")&&0<=r.indexOf(">")){var o="div";0===r.indexOf("<li")&&(o="ul"),0===r.indexOf("<tr")&&(o="tbody"),0!==r.indexOf("<td")&&0!==r.indexOf("<th")||(o="tr"),0===r.indexOf("<tbody")&&(o="table"),0===r.indexOf("<option")&&(o="select");var s=a.createElement(o);s.innerHTML=r;for(var l=0;l<s.childNodes.length;l+=1)i.push(s.childNodes[l])}else i=function(t){if("string"!=typeof t)return[t];for(var e=[],i=(n||a).querySelectorAll(t),r=0;r<i.length;r+=1)e.push(i[r]);return e}(t.trim())}else if(t.nodeType||t===e||t===a)i.push(t);else if(Array.isArray(t)){if(t instanceof p)return t;i=t}return new p(function(t){for(var e=[],i=0;i<t.length;i+=1)-1===e.indexOf(t[i])&&e.push(t[i]);return e}(i))}P.fn=p.prototype;var E,v,y,x={addClass:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r=m(e.map(function(t){return t.split(" ")}));return this.forEach(function(t){var e;(e=t.classList).add.apply(e,r)}),this},removeClass:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r=m(e.map(function(t){return t.split(" ")}));return this.forEach(function(t){var e;(e=t.classList).remove.apply(e,r)}),this},hasClass:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r=m(e.map(function(t){return t.split(" ")}));return 0<g(this,function(e){return 0<r.filter(function(t){return e.classList.contains(t)}).length}).length},toggleClass:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r=m(e.map(function(t){return t.split(" ")}));this.forEach(function(e){r.forEach(function(t){e.classList.toggle(t)})})},attr:function(t,e){if(1===arguments.length&&"string"==typeof t)return this[0]?this[0].getAttribute(t):void 0;for(var i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(t,e);else for(var r in t)this[i][r]=t[r],this[i].setAttribute(r,t[r]);return this},removeAttr:function(t){for(var e=0;e<this.length;e+=1)this[e].removeAttribute(t);return this},transform:function(t){for(var e=0;e<this.length;e+=1)this[e].style.transform=t;return this},transition:function(t){for(var e=0;e<this.length;e+=1)this[e].style.transition="string"!=typeof t?t+"ms":t;return this},on:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r=e[0],a=e[1],o=e[2],n=e[3];function s(t){var e=t.target;if(e){var i=t.target.dom7EventData||[];if(i.indexOf(t)<0&&i.unshift(t),P(e).is(a))o.apply(e,i);else for(var r=P(e).parents(),n=0;n<r.length;n+=1)P(r[n]).is(a)&&o.apply(r[n],i)}}function l(t){var e=t&&t.target&&t.target.dom7EventData||[];e.indexOf(t)<0&&e.unshift(t),o.apply(this,e)}"function"==typeof e[1]&&(r=e[0],o=e[1],n=e[2],a=void 0),n=n||!1;for(var h,c=r.split(" "),u=0;u<this.length;u+=1){var d=this[u];if(a)for(h=0;h<c.length;h+=1){var p=c[h];d.dom7LiveListeners||(d.dom7LiveListeners={}),d.dom7LiveListeners[p]||(d.dom7LiveListeners[p]=[]),d.dom7LiveListeners[p].push({listener:o,proxyListener:s}),d.addEventListener(p,s,n)}else for(h=0;h<c.length;h+=1){var f=c[h];d.dom7Listeners||(d.dom7Listeners={}),d.dom7Listeners[f]||(d.dom7Listeners[f]=[]),d.dom7Listeners[f].push({listener:o,proxyListener:l}),d.addEventListener(f,l,n)}}return this},off:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r=e[0],n=e[1],a=e[2],o=e[3];"function"==typeof e[1]&&(r=e[0],a=e[1],o=e[2],n=void 0),o=o||!1;for(var s=r.split(" "),l=0;l<s.length;l+=1)for(var h=s[l],c=0;c<this.length;c+=1){var u=this[c],d=void 0;if(!n&&u.dom7Listeners?d=u.dom7Listeners[h]:n&&u.dom7LiveListeners&&(d=u.dom7LiveListeners[h]),d&&d.length)for(var p=d.length-1;0<=p;p-=1){var f=d[p];a&&f.listener===a||a&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===a?(u.removeEventListener(h,f.proxyListener,o),d.splice(p,1)):a||(u.removeEventListener(h,f.proxyListener,o),d.splice(p,1))}}return this},trigger:function(){for(var t=at(),e=arguments.length,i=new Array(e),r=0;r<e;r++)i[r]=arguments[r];for(var n=i[0].split(" "),a=i[1],o=0;o<n.length;o+=1)for(var s=n[o],l=0;l<this.length;l+=1){var h=this[l];if(t.CustomEvent){var c=new t.CustomEvent(s,{detail:a,bubbles:!0,cancelable:!0});h.dom7EventData=i.filter(function(t,e){return 0<e}),h.dispatchEvent(c),h.dom7EventData=[],delete h.dom7EventData}}return this},transitionEnd:function(i){var r=this;return i&&r.on("transitionend",function t(e){e.target===this&&(i.call(this,e),r.off("transitionend",t))}),this},outerWidth:function(t){if(0<this.length){if(t){var e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(t){if(0<this.length){if(t){var e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var t=at();return this[0]?t.getComputedStyle(this[0],null):{}},offset:function(){if(0<this.length){var t=at(),e=T(),i=this[0],r=i.getBoundingClientRect(),n=e.body,a=i.clientTop||n.clientTop||0,o=i.clientLeft||n.clientLeft||0,s=i===t?t.scrollY:i.scrollTop,l=i===t?t.scrollX:i.scrollLeft;return{top:r.top+s-a,left:r.left+l-o}}return null},css:function(t,e){var i,r=at();if(1===arguments.length){if("string"!=typeof t){for(i=0;i<this.length;i+=1)for(var n in t)this[i].style[n]=t[n];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(t)}if(2!==arguments.length||"string"!=typeof t)return this;for(i=0;i<this.length;i+=1)this[i].style[t]=e;return this},each:function(i){return i&&this.forEach(function(t,e){i.apply(t,[t,e])}),this},html:function(t){if(void 0===t)return this[0]?this[0].innerHTML:null;for(var e=0;e<this.length;e+=1)this[e].innerHTML=t;return this},text:function(t){if(void 0===t)return this[0]?this[0].textContent.trim():null;for(var e=0;e<this.length;e+=1)this[e].textContent=t;return this},is:function(t){var e,i,r=at(),n=T(),a=this[0];if(!a||void 0===t)return!1;if("string"==typeof t){if(a.matches)return a.matches(t);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(t);if(a.msMatchesSelector)return a.msMatchesSelector(t);for(e=P(t),i=0;i<e.length;i+=1)if(e[i]===a)return!0;return!1}if(t===n)return a===n;if(t===r)return a===r;if(t.nodeType||t instanceof p){for(e=t.nodeType?[t]:t,i=0;i<e.length;i+=1)if(e[i]===a)return!0;return!1}return!1},index:function(){var t,e=this[0];if(e){for(t=0;null!==(e=e.previousSibling);)1===e.nodeType&&(t+=1);return t}},eq:function(t){if(void 0===t)return this;var e=this.length;if(e-1<t)return P([]);if(t<0){var i=e+t;return P(i<0?[]:[this[i]])}return P([this[t]])},append:function(){for(var t,e=T(),i=0;i<arguments.length;i+=1){t=i<0||arguments.length<=i?void 0:arguments[i];for(var r=0;r<this.length;r+=1)if("string"==typeof t){var n=e.createElement("div");for(n.innerHTML=t;n.firstChild;)this[r].appendChild(n.firstChild)}else if(t instanceof p)for(var a=0;a<t.length;a+=1)this[r].appendChild(t[a]);else this[r].appendChild(t)}return this},prepend:function(t){var e,i,r=T();for(e=0;e<this.length;e+=1)if("string"==typeof t){var n=r.createElement("div");for(n.innerHTML=t,i=n.childNodes.length-1;0<=i;i-=1)this[e].insertBefore(n.childNodes[i],this[e].childNodes[0])}else if(t instanceof p)for(i=0;i<t.length;i+=1)this[e].insertBefore(t[i],this[e].childNodes[0]);else this[e].insertBefore(t,this[e].childNodes[0]);return this},next:function(t){return 0<this.length?t?this[0].nextElementSibling&&P(this[0].nextElementSibling).is(t)?P([this[0].nextElementSibling]):P([]):this[0].nextElementSibling?P([this[0].nextElementSibling]):P([]):P([])},nextAll:function(t){var e=[],i=this[0];if(!i)return P([]);for(;i.nextElementSibling;){var r=i.nextElementSibling;t?P(r).is(t)&&e.push(r):e.push(r),i=r}return P(e)},prev:function(t){if(0<this.length){var e=this[0];return t?e.previousElementSibling&&P(e.previousElementSibling).is(t)?P([e.previousElementSibling]):P([]):e.previousElementSibling?P([e.previousElementSibling]):P([])}return P([])},prevAll:function(t){var e=[],i=this[0];if(!i)return P([]);for(;i.previousElementSibling;){var r=i.previousElementSibling;t?P(r).is(t)&&e.push(r):e.push(r),i=r}return P(e)},parent:function(t){for(var e=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(t?P(this[i].parentNode).is(t)&&e.push(this[i].parentNode):e.push(this[i].parentNode));return P(e)},parents:function(t){for(var e=[],i=0;i<this.length;i+=1)for(var r=this[i].parentNode;r;)t?P(r).is(t)&&e.push(r):e.push(r),r=r.parentNode;return P(e)},closest:function(t){var e=this;return void 0===t?P([]):(e.is(t)||(e=e.parents(t).eq(0)),e)},find:function(t){for(var e=[],i=0;i<this.length;i+=1)for(var r=this[i].querySelectorAll(t),n=0;n<r.length;n+=1)e.push(r[n]);return P(e)},children:function(t){for(var e=[],i=0;i<this.length;i+=1)for(var r=this[i].children,n=0;n<r.length;n+=1)t&&!P(r[n]).is(t)||e.push(r[n]);return P(e)},filter:function(t){return P(g(this,t))},remove:function(){for(var t=0;t<this.length;t+=1)this[t].parentNode&&this[t].parentNode.removeChild(this[t]);return this}};function F(t,e){return void 0===e&&(e=0),setTimeout(t,e)}function k(){return Date.now()}function b(t,e){void 0===e&&(e="x");var i,r,n,a=at(),o=a.getComputedStyle(t,null);return a.WebKitCSSMatrix?(6<(r=o.transform||o.webkitTransform).split(",").length&&(r=r.split(", ").map(function(t){return t.replace(",",".")}).join(", ")),n=new a.WebKitCSSMatrix("none"===r?"":r)):i=(n=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===e&&(r=a.WebKitCSSMatrix?n.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===e&&(r=a.WebKitCSSMatrix?n.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}function R(t){return"object"==typeof t&&null!==t&&t.constructor&&t.constructor===Object}function ot(t){for(var e=Object(arguments.length<=0?void 0:t),i=1;i<arguments.length;i+=1){var r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r)for(var n=Object.keys(Object(r)),a=0,o=n.length;a<o;a+=1){var s=n[a],l=Object.getOwnPropertyDescriptor(r,s);void 0!==l&&l.enumerable&&(R(e[s])&&R(r[s])?ot(e[s],r[s]):!R(e[s])&&R(r[s])?(e[s]={},ot(e[s],r[s])):e[s]=r[s])}}return e}function w(i,r){Object.keys(r).forEach(function(e){R(r[e])&&Object.keys(r[e]).forEach(function(t){"function"==typeof r[e][t]&&(r[e][t]=r[e][t].bind(i))}),i[e]=r[e]})}function H(){return E||(i=at(),t=T(),E={touch:!!("ontouchstart"in i||i.DocumentTouch&&t instanceof i.DocumentTouch),pointerEvents:!!i.PointerEvent&&"maxTouchPoints"in i.navigator&&0<=i.navigator.maxTouchPoints,observer:"MutationObserver"in i||"WebkitMutationObserver"in i,passiveListener:function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});i.addEventListener("testPassiveListener",null,e)}catch(t){}return t}(),gestures:"ongesturestart"in i}),E;var i,t}Object.keys(x).forEach(function(t){P.fn[t]=x[t]});var _={name:"resize",create:function(){var t=this;ot(t,{resize:{resizeHandler:function(){t&&!t.destroyed&&t.initialized&&(t.emit("beforeResize"),t.emit("resize"))},orientationChangeHandler:function(){t&&!t.destroyed&&t.initialized&&t.emit("orientationchange")}}})},on:{init:function(t){var e=at();e.addEventListener("resize",t.resize.resizeHandler),e.addEventListener("orientationchange",t.resize.orientationChangeHandler)},destroy:function(t){var e=at();e.removeEventListener("resize",t.resize.resizeHandler),e.removeEventListener("orientationchange",t.resize.orientationChangeHandler)}}},S={attach:function(t,e){void 0===e&&(e={});var i=at(),r=this,n=new(i.MutationObserver||i.WebkitMutationObserver)(function(t){if(1!==t.length){var e=function(){r.emit("observerUpdate",t[0])};i.requestAnimationFrame?i.requestAnimationFrame(e):i.setTimeout(e,0)}else r.emit("observerUpdate",t[0])});n.observe(t,{attributes:void 0===e.attributes||e.attributes,childList:void 0===e.childList||e.childList,characterData:void 0===e.characterData||e.characterData}),r.observer.observers.push(n)},init:function(){if(this.support.observer&&this.params.observer){if(this.params.observeParents)for(var t=this.$el.parents(),e=0;e<t.length;e+=1)this.observer.attach(t[e]);this.observer.attach(this.$el[0],{childList:this.params.observeSlideChildren}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(t){t.disconnect()}),this.observer.observers=[]}},C={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){w(this,{observer:e(e({},S),{},{observers:[]})})},on:{init:function(t){t.observer.init()},destroy:function(t){t.observer.destroy()}}};function M(){var t=this.params,e=this.el;if(!e||0!==e.offsetWidth){t.breakpoints&&this.setBreakpoint();var i=this.allowSlideNext,r=this.allowSlidePrev,n=this.snapGrid;this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),this.updateSlidesClasses(),("auto"===t.slidesPerView||1<t.slidesPerView)&&this.isEnd&&!this.isBeginning&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0),this.autoplay&&this.autoplay.running&&this.autoplay.paused&&this.autoplay.run(),this.allowSlidePrev=r,this.allowSlideNext=i,this.params.watchOverflow&&n!==this.snapGrid&&this.checkOverflow()}}var A=!1;function L(){}var D,O={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1},B={modular:{useParams:function(i){var r=this;r.modules&&Object.keys(r.modules).forEach(function(t){var e=r.modules[t];e.params&&ot(i,e.params)})},useModules:function(r){void 0===r&&(r={});var n=this;n.modules&&Object.keys(n.modules).forEach(function(t){var e=n.modules[t],i=r[t]||{};e.on&&n.on&&Object.keys(e.on).forEach(function(t){n.on(t,e.on[t])}),e.create&&e.create.bind(n)(i)})}},eventsEmitter:{on:function(t,e,i){var r=this;if("function"!=typeof e)return r;var n=i?"unshift":"push";return t.split(" ").forEach(function(t){r.eventsListeners[t]||(r.eventsListeners[t]=[]),r.eventsListeners[t][n](e)}),r},once:function(r,n,t){var a=this;if("function"!=typeof n)return a;function o(){a.off(r,o),o.__emitterProxy&&delete o.__emitterProxy;for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];n.apply(a,e)}return o.__emitterProxy=n,a.on(r,o,t)},onAny:function(t,e){if("function"!=typeof t)return this;var i=e?"unshift":"push";return this.eventsAnyListeners.indexOf(t)<0&&this.eventsAnyListeners[i](t),this},offAny:function(t){if(!this.eventsAnyListeners)return this;var e=this.eventsAnyListeners.indexOf(t);return 0<=e&&this.eventsAnyListeners.splice(e,1),this},off:function(t,r){var n=this;return n.eventsListeners&&t.split(" ").forEach(function(i){void 0===r?n.eventsListeners[i]=[]:n.eventsListeners[i]&&n.eventsListeners[i].forEach(function(t,e){(t===r||t.__emitterProxy&&t.__emitterProxy===r)&&n.eventsListeners[i].splice(e,1)})}),n},emit:function(){var t,i,r,n=this;if(!n.eventsListeners)return n;for(var e=arguments.length,a=new Array(e),o=0;o<e;o++)a[o]=arguments[o];return r="string"==typeof a[0]||Array.isArray(a[0])?(t=a[0],i=a.slice(1,a.length),n):(t=a[0].events,i=a[0].data,a[0].context||n),i.unshift(r),(Array.isArray(t)?t:t.split(" ")).forEach(function(t){if(n.eventsListeners&&n.eventsListeners[t]){var e=[];n.eventsListeners[t].forEach(function(t){e.push(t)}),e.forEach(function(t){t.apply(r,i)})}}),n}},update:{updateSize:function(){var t,e,i=this.$el;t=void 0!==this.params.width&&null!==this.params.width?this.params.width:i[0].clientWidth,e=void 0!==this.params.height&&null!==this.params.width?this.params.height:i[0].clientHeight,0===t&&this.isHorizontal()||0===e&&this.isVertical()||(t=t-parseInt(i.css("padding-left")||0,10)-parseInt(i.css("padding-right")||0,10),e=e-parseInt(i.css("padding-top")||0,10)-parseInt(i.css("padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(e)&&(e=0),ot(this,{width:t,height:e,size:this.isHorizontal()?t:e}))},updateSlides:function(){var t=at(),i=this.params,e=this.$wrapperEl,r=this.size,n=this.rtlTranslate,a=this.wrongRTL,o=this.virtual&&i.virtual.enabled,s=o?this.virtual.slides.length:this.slides.length,l=e.children("."+this.params.slideClass),h=o?this.virtual.slides.length:l.length,c=[],u=[],d=[];function p(t,e){return!i.cssMode||e!==l.length-1}var f=i.slidesOffsetBefore;"function"==typeof f&&(f=i.slidesOffsetBefore.call(this));var m=i.slidesOffsetAfter;"function"==typeof m&&(m=i.slidesOffsetAfter.call(this));var g=this.snapGrid.length,E=this.snapGrid.length,v=i.spaceBetween,y=-f,T=0,x=0;if(void 0!==r){var b,R;"string"==typeof v&&0<=v.indexOf("%")&&(v=parseFloat(v.replace("%",""))/100*r),this.virtualSize=-v,n?l.css({marginLeft:"",marginTop:""}):l.css({marginRight:"",marginBottom:""}),1<i.slidesPerColumn&&(b=Math.floor(h/i.slidesPerColumn)===h/this.params.slidesPerColumn?h:Math.ceil(h/i.slidesPerColumn)*i.slidesPerColumn,"auto"!==i.slidesPerView&&"row"===i.slidesPerColumnFill&&(b=Math.max(b,i.slidesPerView*i.slidesPerColumn)));for(var w,H=i.slidesPerColumn,_=b/H,S=Math.floor(h/i.slidesPerColumn),C=0;C<h;C+=1){R=0;var M=l.eq(C);if(1<i.slidesPerColumn){var A=void 0,P=void 0,L=void 0;if("row"===i.slidesPerColumnFill&&1<i.slidesPerGroup){var D=Math.floor(C/(i.slidesPerGroup*i.slidesPerColumn)),F=C-i.slidesPerColumn*i.slidesPerGroup*D,k=0===D?i.slidesPerGroup:Math.min(Math.ceil((h-D*H*i.slidesPerGroup)/H),i.slidesPerGroup);A=(P=F-(L=Math.floor(F/k))*k+D*i.slidesPerGroup)+L*b/H,M.css({"-webkit-box-ordinal-group":A,"-moz-box-ordinal-group":A,"-ms-flex-order":A,"-webkit-order":A,order:A})}else"column"===i.slidesPerColumnFill?(L=C-(P=Math.floor(C/H))*H,(S<P||P===S&&L===H-1)&&(L+=1)>=H&&(L=0,P+=1)):P=C-(L=Math.floor(C/_))*_;M.css("margin-"+(this.isHorizontal()?"top":"left"),0!==L&&i.spaceBetween&&i.spaceBetween+"px")}if("none"!==M.css("display")){if("auto"===i.slidesPerView){var O=t.getComputedStyle(M[0],null),B=M[0].style.transform,N=M[0].style.webkitTransform;if(B&&(M[0].style.transform="none"),N&&(M[0].style.webkitTransform="none"),i.roundLengths)R=this.isHorizontal()?M.outerWidth(!0):M.outerHeight(!0);else if(this.isHorizontal()){var I=parseFloat(O.getPropertyValue("width")||0),z=parseFloat(O.getPropertyValue("padding-left")||0),U=parseFloat(O.getPropertyValue("padding-right")||0),V=parseFloat(O.getPropertyValue("margin-left")||0),G=parseFloat(O.getPropertyValue("margin-right")||0),W=O.getPropertyValue("box-sizing");R=W&&"border-box"===W?I+V+G:I+z+U+V+G}else{var j=parseFloat(O.getPropertyValue("height")||0),X=parseFloat(O.getPropertyValue("padding-top")||0),$=parseFloat(O.getPropertyValue("padding-bottom")||0),q=parseFloat(O.getPropertyValue("margin-top")||0),Y=parseFloat(O.getPropertyValue("margin-bottom")||0),K=O.getPropertyValue("box-sizing");R=K&&"border-box"===K?j+q+Y:j+X+$+q+Y}B&&(M[0].style.transform=B),N&&(M[0].style.webkitTransform=N),i.roundLengths&&(R=Math.floor(R))}else R=(r-(i.slidesPerView-1)*v)/i.slidesPerView,i.roundLengths&&(R=Math.floor(R)),l[C]&&(this.isHorizontal()?l[C].style.width=R+"px":l[C].style.height=R+"px");l[C]&&(l[C].swiperSlideSize=R),d.push(R),i.centeredSlides?(y=y+R/2+T/2+v,0===T&&0!==C&&(y=y-r/2-v),0===C&&(y=y-r/2-v),Math.abs(y)<.001&&(y=0),i.roundLengths&&(y=Math.floor(y)),x%i.slidesPerGroup==0&&c.push(y),u.push(y)):(i.roundLengths&&(y=Math.floor(y)),(x-Math.min(this.params.slidesPerGroupSkip,x))%this.params.slidesPerGroup==0&&c.push(y),u.push(y),y=y+R+v),this.virtualSize+=R+v,T=R,x+=1}}if(this.virtualSize=Math.max(this.virtualSize,r)+m,n&&a&&("slide"===i.effect||"coverflow"===i.effect)&&e.css({width:this.virtualSize+i.spaceBetween+"px"}),i.setWrapperSize&&(this.isHorizontal()?e.css({width:this.virtualSize+i.spaceBetween+"px"}):e.css({height:this.virtualSize+i.spaceBetween+"px"})),1<i.slidesPerColumn&&(this.virtualSize=(R+i.spaceBetween)*b,this.virtualSize=Math.ceil(this.virtualSize/i.slidesPerColumn)-i.spaceBetween,this.isHorizontal()?e.css({width:this.virtualSize+i.spaceBetween+"px"}):e.css({height:this.virtualSize+i.spaceBetween+"px"}),i.centeredSlides)){w=[];for(var Q=0;Q<c.length;Q+=1){var Z=c[Q];i.roundLengths&&(Z=Math.floor(Z)),c[Q]<this.virtualSize+c[0]&&w.push(Z)}c=w}if(!i.centeredSlides){w=[];for(var J=0;J<c.length;J+=1){var tt=c[J];i.roundLengths&&(tt=Math.floor(tt)),c[J]<=this.virtualSize-r&&w.push(tt)}c=w,1<Math.floor(this.virtualSize-r)-Math.floor(c[c.length-1])&&c.push(this.virtualSize-r)}if(0===c.length&&(c=[0]),0!==i.spaceBetween&&(this.isHorizontal()?n?l.filter(p).css({marginLeft:v+"px"}):l.filter(p).css({marginRight:v+"px"}):l.filter(p).css({marginBottom:v+"px"})),i.centeredSlides&&i.centeredSlidesBounds){var et=0;d.forEach(function(t){et+=t+(i.spaceBetween?i.spaceBetween:0)});var it=(et-=i.spaceBetween)-r;c=c.map(function(t){return t<0?-f:it<t?it+m:t})}if(i.centerInsufficientSlides){var rt=0;if(d.forEach(function(t){rt+=t+(i.spaceBetween?i.spaceBetween:0)}),(rt-=i.spaceBetween)<r){var nt=(r-rt)/2;c.forEach(function(t,e){c[e]=t-nt}),u.forEach(function(t,e){u[e]=t+nt})}}ot(this,{slides:l,snapGrid:c,slidesGrid:u,slidesSizesGrid:d}),h!==s&&this.emit("slidesLengthChange"),c.length!==g&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange")),u.length!==E&&this.emit("slidesGridLengthChange"),(i.watchSlidesProgress||i.watchSlidesVisibility)&&this.updateSlidesOffset()}},updateAutoHeight:function(t){var e,i=[],r=0;if("number"==typeof t?this.setTransition(t):!0===t&&this.setTransition(this.params.speed),"auto"!==this.params.slidesPerView&&1<this.params.slidesPerView)if(this.params.centeredSlides)this.visibleSlides.each(function(t){i.push(t)});else for(e=0;e<Math.ceil(this.params.slidesPerView);e+=1){var n=this.activeIndex+e;if(n>this.slides.length)break;i.push(this.slides.eq(n)[0])}else i.push(this.slides.eq(this.activeIndex)[0]);for(e=0;e<i.length;e+=1)if(void 0!==i[e]){var a=i[e].offsetHeight;r=r<a?a:r}r&&this.$wrapperEl.css("height",r+"px")},updateSlidesOffset:function(){for(var t=this.slides,e=0;e<t.length;e+=1)t[e].swiperSlideOffset=this.isHorizontal()?t[e].offsetLeft:t[e].offsetTop},updateSlidesProgress:function(t){void 0===t&&(t=this&&this.translate||0);var e=this.params,i=this.slides,r=this.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var n=-t;r&&(n=t),i.removeClass(e.slideVisibleClass),this.visibleSlidesIndexes=[],this.visibleSlides=[];for(var a=0;a<i.length;a+=1){var o=i[a],s=(n+(e.centeredSlides?this.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+e.spaceBetween);if(e.watchSlidesVisibility||e.centeredSlides&&e.autoHeight){var l=-(n-o.swiperSlideOffset),h=l+this.slidesSizesGrid[a];(0<=l&&l<this.size-1||1<h&&h<=this.size||l<=0&&h>=this.size)&&(this.visibleSlides.push(o),this.visibleSlidesIndexes.push(a),i.eq(a).addClass(e.slideVisibleClass))}o.progress=r?-s:s}this.visibleSlides=P(this.visibleSlides)}},updateProgress:function(t){if(void 0===t){var e=this.rtlTranslate?-1:1;t=this&&this.translate&&this.translate*e||0}var i=this.params,r=this.maxTranslate()-this.minTranslate(),n=this.progress,a=this.isBeginning,o=this.isEnd,s=a,l=o;o=0==r?a=!(n=0):(a=(n=(t-this.minTranslate())/r)<=0,1<=n),ot(this,{progress:n,isBeginning:a,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&this.updateSlidesProgress(t),a&&!s&&this.emit("reachBeginning toEdge"),o&&!l&&this.emit("reachEnd toEdge"),(s&&!a||l&&!o)&&this.emit("fromEdge"),this.emit("progress",n)},updateSlidesClasses:function(){var t,e=this.slides,i=this.params,r=this.$wrapperEl,n=this.activeIndex,a=this.realIndex,o=this.virtual&&i.virtual.enabled;e.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(t=o?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+n+'"]'):e.eq(n)).addClass(i.slideActiveClass),i.loop&&(t.hasClass(i.slideDuplicateClass)?r.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+a+'"]').addClass(i.slideDuplicateActiveClass):r.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+a+'"]').addClass(i.slideDuplicateActiveClass));var s=t.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===s.length&&(s=e.eq(0)).addClass(i.slideNextClass);var l=t.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=e.eq(-1)).addClass(i.slidePrevClass),i.loop&&(s.hasClass(i.slideDuplicateClass)?r.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+s.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):r.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+s.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?r.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):r.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass)),this.emitSlidesClasses()},updateActiveIndex:function(t){var e,i=this.rtlTranslate?this.translate:-this.translate,r=this.slidesGrid,n=this.snapGrid,a=this.params,o=this.activeIndex,s=this.realIndex,l=this.snapIndex,h=t;if(void 0===h){for(var c=0;c<r.length;c+=1)void 0!==r[c+1]?i>=r[c]&&i<r[c+1]-(r[c+1]-r[c])/2?h=c:i>=r[c]&&i<r[c+1]&&(h=c+1):i>=r[c]&&(h=c);a.normalizeSlideIndex&&(h<0||void 0===h)&&(h=0)}if(0<=n.indexOf(i))e=n.indexOf(i);else{var u=Math.min(a.slidesPerGroupSkip,h);e=u+Math.floor((h-u)/a.slidesPerGroup)}if(e>=n.length&&(e=n.length-1),h!==o){var d=parseInt(this.slides.eq(h).attr("data-swiper-slide-index")||h,10);ot(this,{snapIndex:e,realIndex:d,previousIndex:o,activeIndex:h}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),s!==d&&this.emit("realIndexChange"),(this.initialized||this.params.runCallbacksOnInit)&&this.emit("slideChange")}else e!==l&&(this.snapIndex=e,this.emit("snapIndexChange"))},updateClickedSlide:function(t){var e=this.params,i=P(t.target).closest("."+e.slideClass)[0],r=!1;if(i)for(var n=0;n<this.slides.length;n+=1)this.slides[n]===i&&(r=!0);if(!i||!r)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt(P(i).attr("data-swiper-slide-index"),10):this.clickedIndex=P(i).index(),e.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()}},translate:{getTranslate:function(t){void 0===t&&(t=this.isHorizontal()?"x":"y");var e=this.params,i=this.rtlTranslate,r=this.translate,n=this.$wrapperEl;if(e.virtualTranslate)return i?-r:r;if(e.cssMode)return r;var a=b(n[0],t);return i&&(a=-a),a||0},setTranslate:function(t,e){var i=this.rtlTranslate,r=this.params,n=this.$wrapperEl,a=this.wrapperEl,o=this.progress,s=0,l=0;this.isHorizontal()?s=i?-t:t:l=t,r.roundLengths&&(s=Math.floor(s),l=Math.floor(l)),r.cssMode?a[this.isHorizontal()?"scrollLeft":"scrollTop"]=this.isHorizontal()?-s:-l:r.virtualTranslate||n.transform("translate3d("+s+"px, "+l+"px, 0px)"),this.previousTranslate=this.translate,this.translate=this.isHorizontal()?s:l;var h=this.maxTranslate()-this.minTranslate();(0==h?0:(t-this.minTranslate())/h)!==o&&this.updateProgress(t),this.emit("setTranslate",this.translate,e)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(t,e,i,r,n){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0),void 0===r&&(r=!0);var a=this,o=a.params,s=a.wrapperEl;if(a.animating&&o.preventInteractionOnTransition)return!1;var l,h=a.minTranslate(),c=a.maxTranslate();if(l=r&&h<t?h:r&&t<c?c:t,a.updateProgress(l),o.cssMode){var u,d=a.isHorizontal();return 0===e?s[d?"scrollLeft":"scrollTop"]=-l:s.scrollTo?s.scrollTo(((u={})[d?"left":"top"]=-l,u.behavior="smooth",u)):s[d?"scrollLeft":"scrollTop"]=-l,!0}return 0===e?(a.setTransition(0),a.setTranslate(l),i&&(a.emit("beforeTransitionStart",e,n),a.emit("transitionEnd"))):(a.setTransition(e),a.setTranslate(l),i&&(a.emit("beforeTransitionStart",e,n),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(t){a&&!a.destroyed&&t.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,i&&a.emit("transitionEnd"))}),a.$wrapperEl[0].addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(t,e){this.params.cssMode||this.$wrapperEl.transition(t),this.emit("setTransition",t,e)},transitionStart:function(t,e){void 0===t&&(t=!0);var i=this.activeIndex,r=this.params,n=this.previousIndex;if(!r.cssMode){r.autoHeight&&this.updateAutoHeight();var a=e;if(a=a||(n<i?"next":i<n?"prev":"reset"),this.emit("transitionStart"),t&&i!==n){if("reset"===a)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===a?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},transitionEnd:function(t,e){void 0===t&&(t=!0);var i=this.activeIndex,r=this.previousIndex,n=this.params;if(this.animating=!1,!n.cssMode){this.setTransition(0);var a=e;if(a=a||(r<i?"next":i<r?"prev":"reset"),this.emit("transitionEnd"),t&&i!==r){if("reset"===a)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===a?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0);var n=this,a=t;a<0&&(a=0);var o=n.params,s=n.snapGrid,l=n.slidesGrid,h=n.previousIndex,c=n.activeIndex,u=n.rtlTranslate,d=n.wrapperEl;if(n.animating&&o.preventInteractionOnTransition)return!1;var p=Math.min(n.params.slidesPerGroupSkip,a),f=p+Math.floor((a-p)/n.params.slidesPerGroup);f>=s.length&&(f=s.length-1),(c||o.initialSlide||0)===(h||0)&&i&&n.emit("beforeSlideChangeStart");var m,g=-s[f];if(n.updateProgress(g),o.normalizeSlideIndex)for(var E=0;E<l.length;E+=1)-Math.floor(100*g)>=Math.floor(100*l[E])&&(a=E);if(n.initialized&&a!==c){if(!n.allowSlideNext&&g<n.translate&&g<n.minTranslate())return!1;if(!n.allowSlidePrev&&g>n.translate&&g>n.maxTranslate()&&(c||0)!==a)return!1}if(m=c<a?"next":a<c?"prev":"reset",u&&-g===n.translate||!u&&g===n.translate)return n.updateActiveIndex(a),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==o.effect&&n.setTranslate(g),"reset"!=m&&(n.transitionStart(i,m),n.transitionEnd(i,m)),!1;if(o.cssMode){var v,y=n.isHorizontal(),T=-g;return u&&(T=d.scrollWidth-d.offsetWidth-T),0===e?d[y?"scrollLeft":"scrollTop"]=T:d.scrollTo?d.scrollTo(((v={})[y?"left":"top"]=T,v.behavior="smooth",v)):d[y?"scrollLeft":"scrollTop"]=T,!0}return 0===e?(n.setTransition(0),n.setTranslate(g),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",e,r),n.transitionStart(i,m),n.transitionEnd(i,m)):(n.setTransition(e),n.setTranslate(g),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",e,r),n.transitionStart(i,m),n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(t){n&&!n.destroyed&&t.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,m))}),n.$wrapperEl[0].addEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0);var n=t;return this.params.loop&&(n+=this.loopedSlides),this.slideTo(n,e,i,r)},slideNext:function(t,e,i){void 0===t&&(t=this.params.speed),void 0===e&&(e=!0);var r=this.params,n=this.animating,a=this.activeIndex<r.slidesPerGroupSkip?1:r.slidesPerGroup;if(r.loop){if(n&&r.loopPreventsSlide)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+a,t,e,i)},slidePrev:function(t,e,i){void 0===t&&(t=this.params.speed),void 0===e&&(e=!0);var r=this.params,n=this.animating,a=this.snapGrid,o=this.slidesGrid,s=this.rtlTranslate;if(r.loop){if(n&&r.loopPreventsSlide)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}function l(t){return t<0?-Math.floor(Math.abs(t)):Math.floor(t)}var h,c=l(s?this.translate:-this.translate),u=a.map(function(t){return l(t)}),d=(a[u.indexOf(c)],a[u.indexOf(c)-1]);return void 0===d&&r.cssMode&&a.forEach(function(t){!d&&t<=c&&(d=t)}),void 0!==d&&(h=o.indexOf(d))<0&&(h=this.activeIndex-1),this.slideTo(h,t,e,i)},slideReset:function(t,e,i){return void 0===t&&(t=this.params.speed),void 0===e&&(e=!0),this.slideTo(this.activeIndex,t,e,i)},slideToClosest:function(t,e,i,r){void 0===t&&(t=this.params.speed),void 0===e&&(e=!0),void 0===r&&(r=.5);var n=this.activeIndex,a=Math.min(this.params.slidesPerGroupSkip,n),o=a+Math.floor((n-a)/this.params.slidesPerGroup),s=this.rtlTranslate?this.translate:-this.translate;if(s>=this.snapGrid[o]){var l=this.snapGrid[o];s-l>(this.snapGrid[o+1]-l)*r&&(n+=this.params.slidesPerGroup)}else{var h=this.snapGrid[o-1];s-h<=(this.snapGrid[o]-h)*r&&(n-=this.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,this.slidesGrid.length-1),this.slideTo(n,t,e,i)},slideToClickedSlide:function(){var t,e=this,i=e.params,r=e.$wrapperEl,n="auto"===i.slidesPerView?e.slidesPerViewDynamic():i.slidesPerView,a=e.clickedIndex;if(i.loop){if(e.animating)return;t=parseInt(P(e.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?a<e.loopedSlides-n/2||a>e.slides.length-e.loopedSlides+n/2?(e.loopFix(),a=r.children("."+i.slideClass+'[data-swiper-slide-index="'+t+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),F(function(){e.slideTo(a)})):e.slideTo(a):a>e.slides.length-n?(e.loopFix(),a=r.children("."+i.slideClass+'[data-swiper-slide-index="'+t+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),F(function(){e.slideTo(a)})):e.slideTo(a)}else e.slideTo(a)}},loop:{loopCreate:function(){var r=this,t=T(),e=r.params,i=r.$wrapperEl;i.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var n=i.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var a=e.slidesPerGroup-n.length%e.slidesPerGroup;if(a!==e.slidesPerGroup){for(var o=0;o<a;o+=1){var s=P(t.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);i.append(s)}n=i.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=n.length),r.loopedSlides=Math.ceil(parseFloat(e.loopedSlides||e.slidesPerView,10)),r.loopedSlides+=e.loopAdditionalSlides,r.loopedSlides>n.length&&(r.loopedSlides=n.length);var l=[],h=[];n.each(function(t,e){var i=P(t);e<r.loopedSlides&&h.push(t),e<n.length&&e>=n.length-r.loopedSlides&&l.push(t),i.attr("data-swiper-slide-index",e)});for(var c=0;c<h.length;c+=1)i.append(P(h[c].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var u=l.length-1;0<=u;u-=1)i.prepend(P(l[u].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){this.emit("beforeLoopFix");var t,e=this.activeIndex,i=this.slides,r=this.loopedSlides,n=this.allowSlidePrev,a=this.allowSlideNext,o=this.snapGrid,s=this.rtlTranslate;this.allowSlidePrev=!0,this.allowSlideNext=!0;var l=-o[e]-this.getTranslate();e<r?(t=i.length-3*r+e,t+=r,this.slideTo(t,0,!1,!0)&&0!=l&&this.setTranslate((s?-this.translate:this.translate)-l)):e>=i.length-r&&(t=-i.length+e+r,t+=r,this.slideTo(t,0,!1,!0)&&0!=l&&this.setTranslate((s?-this.translate:this.translate)-l)),this.allowSlidePrev=n,this.allowSlideNext=a,this.emit("loopFix")},loopDestroy:function(){var t=this.$wrapperEl,e=this.params,i=this.slides;t.children("."+e.slideClass+"."+e.slideDuplicateClass+",."+e.slideClass+"."+e.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(t){if(!(this.support.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)){var e=this.el;e.style.cursor="move",e.style.cursor=t?"-webkit-grabbing":"-webkit-grab",e.style.cursor=t?"-moz-grabbin":"-moz-grab",e.style.cursor=t?"grabbing":"grab"}},unsetGrabCursor:function(){this.support.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}},manipulation:{appendSlide:function(t){var e=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof t&&"length"in t)for(var r=0;r<t.length;r+=1)t[r]&&e.append(t[r]);else e.append(t);i.loop&&this.loopCreate(),i.observer&&this.support.observer||this.update()},prependSlide:function(t){var e=this.params,i=this.$wrapperEl,r=this.activeIndex;e.loop&&this.loopDestroy();var n=r+1;if("object"==typeof t&&"length"in t){for(var a=0;a<t.length;a+=1)t[a]&&i.prepend(t[a]);n=r+t.length}else i.prepend(t);e.loop&&this.loopCreate(),e.observer&&this.support.observer||this.update(),this.slideTo(n,0,!1)},addSlide:function(t,e){var i=this.$wrapperEl,r=this.params,n=this.activeIndex;r.loop&&(n-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+r.slideClass));var a=this.slides.length;if(t<=0)this.prependSlide(e);else if(a<=t)this.appendSlide(e);else{for(var o=t<n?n+1:n,s=[],l=a-1;t<=l;l-=1){var h=this.slides.eq(l);h.remove(),s.unshift(h)}if("object"==typeof e&&"length"in e){for(var c=0;c<e.length;c+=1)e[c]&&i.append(e[c]);o=t<n?n+e.length:n}else i.append(e);for(var u=0;u<s.length;u+=1)i.append(s[u]);r.loop&&this.loopCreate(),r.observer&&this.support.observer||this.update(),r.loop?this.slideTo(o+this.loopedSlides,0,!1):this.slideTo(o,0,!1)}},removeSlide:function(t){var e=this.params,i=this.$wrapperEl,r=this.activeIndex;e.loop&&(r-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+e.slideClass));var n,a=r;if("object"==typeof t&&"length"in t){for(var o=0;o<t.length;o+=1)n=t[o],this.slides[n]&&this.slides.eq(n).remove(),n<a&&(a-=1);a=Math.max(a,0)}else n=t,this.slides[n]&&this.slides.eq(n).remove(),n<a&&(a-=1),a=Math.max(a,0);e.loop&&this.loopCreate(),e.observer&&this.support.observer||this.update(),e.loop?this.slideTo(a+this.loopedSlides,0,!1):this.slideTo(a,0,!1)},removeAllSlides:function(){for(var t=[],e=0;e<this.slides.length;e+=1)t.push(e);this.removeSlide(t)}},events:{attachEvents:function(){var t=T(),e=this.params,i=this.touchEvents,r=this.el,n=this.wrapperEl,a=this.device,o=this.support;this.onTouchStart=function(t){var e=T(),i=at(),r=this.touchEventsData,n=this.params,a=this.touches;if(!this.animating||!n.preventInteractionOnTransition){var o=t;o.originalEvent&&(o=o.originalEvent);var s=P(o.target);if(("wrapper"!==n.touchEventsTarget||s.closest(this.wrapperEl).length)&&(r.isTouchEvent="touchstart"===o.type,(r.isTouchEvent||!("which"in o)||3!==o.which)&&!(!r.isTouchEvent&&"button"in o&&0<o.button||r.isTouched&&r.isMoved)))if(n.noSwiping&&s.closest(n.noSwipingSelector?n.noSwipingSelector:"."+n.noSwipingClass)[0])this.allowClick=!0;else if(!n.swipeHandler||s.closest(n.swipeHandler)[0]){a.currentX="touchstart"===o.type?o.targetTouches[0].pageX:o.pageX,a.currentY="touchstart"===o.type?o.targetTouches[0].pageY:o.pageY;var l=a.currentX,h=a.currentY,c=n.edgeSwipeDetection||n.iOSEdgeSwipeDetection,u=n.edgeSwipeThreshold||n.iOSEdgeSwipeThreshold;if(!c||!(l<=u||l>=i.screen.width-u)){if(ot(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=l,a.startY=h,r.touchStartTime=k(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,0<n.threshold&&(r.allowThresholdMove=!1),"touchstart"!==o.type){var d=!0;s.is(r.formElements)&&(d=!1),e.activeElement&&P(e.activeElement).is(r.formElements)&&e.activeElement!==s[0]&&e.activeElement.blur();var p=d&&this.allowTouchMove&&n.touchStartPreventDefault;(n.touchStartForcePreventDefault||p)&&o.preventDefault()}this.emit("touchStart",o)}}}}.bind(this),this.onTouchMove=function(t){var e=T(),i=this.touchEventsData,r=this.params,n=this.touches,a=this.rtlTranslate,o=t;if(o.originalEvent&&(o=o.originalEvent),i.isTouched){if(!i.isTouchEvent||"touchmove"===o.type){var s="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),l="touchmove"===o.type?s.pageX:o.pageX,h="touchmove"===o.type?s.pageY:o.pageY;if(o.preventedByNestedSwiper)return n.startX=l,void(n.startY=h);if(!this.allowTouchMove)return this.allowClick=!1,void(i.isTouched&&(ot(n,{startX:l,startY:h,currentX:l,currentY:h}),i.touchStartTime=k()));if(i.isTouchEvent&&r.touchReleaseOnEdges&&!r.loop)if(this.isVertical()){if(h<n.startY&&this.translate<=this.maxTranslate()||h>n.startY&&this.translate>=this.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(l<n.startX&&this.translate<=this.maxTranslate()||l>n.startX&&this.translate>=this.minTranslate())return;if(i.isTouchEvent&&e.activeElement&&o.target===e.activeElement&&P(o.target).is(i.formElements))return i.isMoved=!0,void(this.allowClick=!1);if(i.allowTouchCallbacks&&this.emit("touchMove",o),!(o.targetTouches&&1<o.targetTouches.length)){n.currentX=l,n.currentY=h;var c,u=n.currentX-n.startX,d=n.currentY-n.startY;if(!(this.params.threshold&&Math.sqrt(Math.pow(u,2)+Math.pow(d,2))<this.params.threshold))if(void 0===i.isScrolling&&(this.isHorizontal()&&n.currentY===n.startY||this.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:25<=u*u+d*d&&(c=180*Math.atan2(Math.abs(d),Math.abs(u))/Math.PI,i.isScrolling=this.isHorizontal()?c>r.touchAngle:90-c>r.touchAngle)),i.isScrolling&&this.emit("touchMoveOpposite",o),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){this.allowClick=!1,!r.cssMode&&o.cancelable&&o.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&o.stopPropagation(),i.isMoved||(r.loop&&this.loopFix(),i.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!r.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",o)),this.emit("sliderMove",o),i.isMoved=!0;var p=this.isHorizontal()?u:d;n.diff=p,p*=r.touchRatio,a&&(p=-p),this.swipeDirection=0<p?"prev":"next",i.currentTranslate=p+i.startTranslate;var f=!0,m=r.resistanceRatio;if(r.touchReleaseOnEdges&&(m=0),0<p&&i.currentTranslate>this.minTranslate()?(f=!1,r.resistance&&(i.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+i.startTranslate+p,m))):p<0&&i.currentTranslate<this.maxTranslate()&&(f=!1,r.resistance&&(i.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-i.startTranslate-p,m))),f&&(o.preventedByNestedSwiper=!0),!this.allowSlideNext&&"next"===this.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!this.allowSlidePrev&&"prev"===this.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),0<r.threshold){if(!(Math.abs(p)>r.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=this.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode||r.watchSlidesProgress||r.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses()),r.freeMode&&(0===i.velocities.length&&i.velocities.push({position:n[this.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:n[this.isHorizontal()?"currentX":"currentY"],time:k()})),this.updateProgress(i.currentTranslate),this.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&this.emit("touchMoveOpposite",o)}.bind(this),this.onTouchEnd=function(t){var e=this,i=e.touchEventsData,r=e.params,n=e.touches,a=e.rtlTranslate,o=e.$wrapperEl,s=e.slidesGrid,l=e.snapGrid,h=t;if(h.originalEvent&&(h=h.originalEvent),i.allowTouchCallbacks&&e.emit("touchEnd",h),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&r.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);r.grabCursor&&i.isMoved&&i.isTouched&&(!0===e.allowSlideNext||!0===e.allowSlidePrev)&&e.setGrabCursor(!1);var c,u=k(),d=u-i.touchStartTime;if(e.allowClick&&(e.updateClickedSlide(h),e.emit("tap click",h),d<300&&u-i.lastClickTime<300&&e.emit("doubleTap doubleClick",h)),i.lastClickTime=k(),F(function(){e.destroyed||(e.allowClick=!0)}),!i.isTouched||!i.isMoved||!e.swipeDirection||0===n.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,c=r.followFinger?a?e.translate:-e.translate:-i.currentTranslate,!r.cssMode)if(r.freeMode){if(c<-e.minTranslate())return void e.slideTo(e.activeIndex);if(c>-e.maxTranslate())return void(e.slides.length<l.length?e.slideTo(l.length-1):e.slideTo(e.slides.length-1));if(r.freeModeMomentum){if(1<i.velocities.length){var p=i.velocities.pop(),f=i.velocities.pop(),m=p.position-f.position,g=p.time-f.time;e.velocity=m/g,e.velocity/=2,Math.abs(e.velocity)<r.freeModeMinimumVelocity&&(e.velocity=0),(150<g||300<k()-p.time)&&(e.velocity=0)}else e.velocity=0;e.velocity*=r.freeModeMomentumVelocityRatio,i.velocities.length=0;var E=1e3*r.freeModeMomentumRatio,v=e.velocity*E,y=e.translate+v;a&&(y=-y);var T,x,b=!1,R=20*Math.abs(e.velocity)*r.freeModeMomentumBounceRatio;if(y<e.maxTranslate())r.freeModeMomentumBounce?(y+e.maxTranslate()<-R&&(y=e.maxTranslate()-R),T=e.maxTranslate(),b=!0,i.allowMomentumBounce=!0):y=e.maxTranslate(),r.loop&&r.centeredSlides&&(x=!0);else if(y>e.minTranslate())r.freeModeMomentumBounce?(y-e.minTranslate()>R&&(y=e.minTranslate()+R),T=e.minTranslate(),b=!0,i.allowMomentumBounce=!0):y=e.minTranslate(),r.loop&&r.centeredSlides&&(x=!0);else if(r.freeModeSticky){for(var w,H=0;H<l.length;H+=1)if(l[H]>-y){w=H;break}y=-(y=Math.abs(l[w]-y)<Math.abs(l[w-1]-y)||"next"===e.swipeDirection?l[w]:l[w-1])}if(x&&e.once("transitionEnd",function(){e.loopFix()}),0!==e.velocity){if(E=a?Math.abs((-y-e.translate)/e.velocity):Math.abs((y-e.translate)/e.velocity),r.freeModeSticky){var _=Math.abs((a?-y:y)-e.translate),S=e.slidesSizesGrid[e.activeIndex];E=_<S?r.speed:_<2*S?1.5*r.speed:2.5*r.speed}}else if(r.freeModeSticky)return void e.slideToClosest();r.freeModeMomentumBounce&&b?(e.updateProgress(T),e.setTransition(E),e.setTranslate(y),e.transitionStart(!0,e.swipeDirection),e.animating=!0,o.transitionEnd(function(){e&&!e.destroyed&&i.allowMomentumBounce&&(e.emit("momentumBounce"),e.setTransition(r.speed),setTimeout(function(){e.setTranslate(T),o.transitionEnd(function(){e&&!e.destroyed&&e.transitionEnd()})},0))})):e.velocity?(e.updateProgress(y),e.setTransition(E),e.setTranslate(y),e.transitionStart(!0,e.swipeDirection),e.animating||(e.animating=!0,o.transitionEnd(function(){e&&!e.destroyed&&e.transitionEnd()}))):e.updateProgress(y),e.updateActiveIndex(),e.updateSlidesClasses()}else if(r.freeModeSticky)return void e.slideToClosest();(!r.freeModeMomentum||d>=r.longSwipesMs)&&(e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses())}else{for(var C=0,M=e.slidesSizesGrid[0],A=0;A<s.length;A+=A<r.slidesPerGroupSkip?1:r.slidesPerGroup){var P=A<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==s[A+P]?c>=s[A]&&c<s[A+P]&&(M=s[(C=A)+P]-s[A]):c>=s[A]&&(C=A,M=s[s.length-1]-s[s.length-2])}var L=(c-s[C])/M,D=C<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(d>r.longSwipesMs){if(!r.longSwipes)return void e.slideTo(e.activeIndex);"next"===e.swipeDirection&&(L>=r.longSwipesRatio?e.slideTo(C+D):e.slideTo(C)),"prev"===e.swipeDirection&&(L>1-r.longSwipesRatio?e.slideTo(C+D):e.slideTo(C))}else{if(!r.shortSwipes)return void e.slideTo(e.activeIndex);!e.navigation||h.target!==e.navigation.nextEl&&h.target!==e.navigation.prevEl?("next"===e.swipeDirection&&e.slideTo(C+D),"prev"===e.swipeDirection&&e.slideTo(C)):h.target===e.navigation.nextEl?e.slideTo(C+D):e.slideTo(C)}}}.bind(this),e.cssMode&&(this.onScroll=function(){var t=this.wrapperEl,e=this.rtlTranslate;this.previousTranslate=this.translate,this.isHorizontal()?this.translate=e?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:this.translate=-t.scrollTop,-0===this.translate&&(this.translate=0),this.updateActiveIndex(),this.updateSlidesClasses();var i=this.maxTranslate()-this.minTranslate();(0==i?0:(this.translate-this.minTranslate())/i)!==this.progress&&this.updateProgress(e?-this.translate:this.translate),this.emit("setTranslate",this.translate,!1)}.bind(this)),this.onClick=function(t){this.allowClick||(this.params.preventClicks&&t.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(t.stopPropagation(),t.stopImmediatePropagation()))}.bind(this);var s=!!e.nested;if(!o.touch&&o.pointerEvents)r.addEventListener(i.start,this.onTouchStart,!1),t.addEventListener(i.move,this.onTouchMove,s),t.addEventListener(i.end,this.onTouchEnd,!1);else{if(o.touch){var l=!("touchstart"!==i.start||!o.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1};r.addEventListener(i.start,this.onTouchStart,l),r.addEventListener(i.move,this.onTouchMove,o.passiveListener?{passive:!1,capture:s}:s),r.addEventListener(i.end,this.onTouchEnd,l),i.cancel&&r.addEventListener(i.cancel,this.onTouchEnd,l),A||(t.addEventListener("touchstart",L),A=!0)}(e.simulateTouch&&!a.ios&&!a.android||e.simulateTouch&&!o.touch&&a.ios)&&(r.addEventListener("mousedown",this.onTouchStart,!1),t.addEventListener("mousemove",this.onTouchMove,s),t.addEventListener("mouseup",this.onTouchEnd,!1))}(e.preventClicks||e.preventClicksPropagation)&&r.addEventListener("click",this.onClick,!0),e.cssMode&&n.addEventListener("scroll",this.onScroll),e.updateOnWindowResize?this.on(a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",M,!0):this.on("observerUpdate",M,!0)},detachEvents:function(){var t=T(),e=this.params,i=this.touchEvents,r=this.el,n=this.wrapperEl,a=this.device,o=this.support,s=!!e.nested;if(!o.touch&&o.pointerEvents)r.removeEventListener(i.start,this.onTouchStart,!1),t.removeEventListener(i.move,this.onTouchMove,s),t.removeEventListener(i.end,this.onTouchEnd,!1);else{if(o.touch){var l=!("onTouchStart"!==i.start||!o.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1};r.removeEventListener(i.start,this.onTouchStart,l),r.removeEventListener(i.move,this.onTouchMove,s),r.removeEventListener(i.end,this.onTouchEnd,l),i.cancel&&r.removeEventListener(i.cancel,this.onTouchEnd,l)}(e.simulateTouch&&!a.ios&&!a.android||e.simulateTouch&&!o.touch&&a.ios)&&(r.removeEventListener("mousedown",this.onTouchStart,!1),t.removeEventListener("mousemove",this.onTouchMove,s),t.removeEventListener("mouseup",this.onTouchEnd,!1))}(e.preventClicks||e.preventClicksPropagation)&&r.removeEventListener("click",this.onClick,!0),e.cssMode&&n.removeEventListener("scroll",this.onScroll),this.off(a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",M)}},breakpoints:{setBreakpoint:function(){var t=this.activeIndex,e=this.initialized,i=this.loopedSlides,r=void 0===i?0:i,n=this.params,a=this.$el,o=n.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var s=this.getBreakpoint(o);if(s&&this.currentBreakpoint!==s){var l=s in o?o[s]:void 0;l&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(function(t){var e=l[t];void 0!==e&&(l[t]="slidesPerView"!==t||"AUTO"!==e&&"auto"!==e?"slidesPerView"===t?parseFloat(e):parseInt(e,10):"auto")});var h=l||this.originalParams,c=1<n.slidesPerColumn,u=1<h.slidesPerColumn;c&&!u?(a.removeClass(n.containerModifierClass+"multirow "+n.containerModifierClass+"multirow-column"),this.emitContainerClasses()):!c&&u&&(a.addClass(n.containerModifierClass+"multirow"),"column"===h.slidesPerColumnFill&&a.addClass(n.containerModifierClass+"multirow-column"),this.emitContainerClasses());var d=h.direction&&h.direction!==n.direction,p=n.loop&&(h.slidesPerView!==n.slidesPerView||d);d&&e&&this.changeDirection(),ot(this.params,h),ot(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=s,p&&e&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(t-r+this.loopedSlides,0,!1)),this.emit("breakpoint",h)}}},getBreakpoint:function(t){var i=at();if(t){var e=!1,r=Object.keys(t).map(function(t){if("string"!=typeof t||0!==t.indexOf("@"))return{value:t,point:t};var e=parseFloat(t.substr(1));return{value:i.innerHeight*e,point:t}});r.sort(function(t,e){return parseInt(t.value,10)-parseInt(e.value,10)});for(var n=0;n<r.length;n+=1){var a=r[n],o=a.point;a.value<=i.innerWidth&&(e=o)}return e||"max"}}},checkOverflow:{checkOverflow:function(){var t=this.params,e=this.isLocked,i=0<this.slides.length&&t.slidesOffsetBefore+t.spaceBetween*(this.slides.length-1)+this.slides[0].offsetWidth*this.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&i?this.isLocked=i<=this.size:this.isLocked=1===this.snapGrid.length,this.allowSlideNext=!this.isLocked,this.allowSlidePrev=!this.isLocked,e!==this.isLocked&&this.emit(this.isLocked?"lock":"unlock"),e&&e!==this.isLocked&&(this.isEnd=!1,this.navigation&&this.navigation.update())}},classes:{addClasses:function(){var e=this.classNames,i=this.params,t=this.rtl,r=this.$el,n=this.device,a=[];a.push("initialized"),a.push(i.direction),i.freeMode&&a.push("free-mode"),i.autoHeight&&a.push("autoheight"),t&&a.push("rtl"),1<i.slidesPerColumn&&(a.push("multirow"),"column"===i.slidesPerColumnFill&&a.push("multirow-column")),n.android&&a.push("android"),n.ios&&a.push("ios"),i.cssMode&&a.push("css-mode"),a.forEach(function(t){e.push(i.containerModifierClass+t)}),r.addClass(e.join(" ")),this.emitContainerClasses()},removeClasses:function(){var t=this.$el,e=this.classNames;t.removeClass(e.join(" ")),this.emitContainerClasses()}},images:{loadImage:function(t,e,i,r,n,a){var o,s=at();function l(){a&&a()}P(t).parent("picture")[0]||t.complete&&n?l():e?((o=new s.Image).onload=l,o.onerror=l,r&&(o.sizes=r),i&&(o.srcset=i),e&&(o.src=e)):l()},preloadImages:function(){var t=this;function e(){null!=t&&t&&!t.destroyed&&(void 0!==t.imagesLoaded&&(t.imagesLoaded+=1),t.imagesLoaded===t.imagesToLoad.length&&(t.params.updateOnImagesReady&&t.update(),t.emit("imagesReady")))}t.imagesToLoad=t.$el.find("img");for(var i=0;i<t.imagesToLoad.length;i+=1){var r=t.imagesToLoad[i];t.loadImage(r,r.currentSrc||r.getAttribute("src"),r.srcset||r.getAttribute("srcset"),r.sizes||r.getAttribute("sizes"),!0,e)}}}},N={},I=((D=z.prototype).emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter(function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)});e.emit("_containerClasses",t.join(" "))}},D.emitSlidesClasses=function(){var i=this;i.params._emitClasses&&i.el&&i.slides.each(function(t){var e=t.className.split(" ").filter(function(t){return 0===t.indexOf("swiper-slide")||0===t.indexOf(i.params.slideClass)});i.emit("_slideClass",t,e.join(" "))})},D.slidesPerViewDynamic=function(){var t=this.params,e=this.slides,i=this.slidesGrid,r=this.size,n=this.activeIndex,a=1;if(t.centeredSlides){for(var o,s=e[n].swiperSlideSize,l=n+1;l<e.length;l+=1)e[l]&&!o&&(a+=1,(s+=e[l].swiperSlideSize)>r&&(o=!0));for(var h=n-1;0<=h;h-=1)e[h]&&!o&&(a+=1,(s+=e[h].swiperSlideSize)>r&&(o=!0))}else for(var c=n+1;c<e.length;c+=1)i[c]-i[n]<r&&(a+=1);return a},D.update=function(){var i=this;if(i&&!i.destroyed){var t=i.snapGrid,e=i.params;e.breakpoints&&i.setBreakpoint(),i.updateSize(),i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.params.freeMode?(r(),i.params.autoHeight&&i.updateAutoHeight()):(("auto"===i.params.slidesPerView||1<i.params.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0))||r(),e.watchOverflow&&t!==i.snapGrid&&i.checkOverflow(),i.emit("update")}function r(){var t=i.rtlTranslate?-1*i.translate:i.translate,e=Math.min(Math.max(t,i.maxTranslate()),i.minTranslate());i.setTranslate(e),i.updateActiveIndex(),i.updateSlidesClasses()}},D.changeDirection=function(e,t){void 0===t&&(t=!0);var i=this.params.direction;return(e=e||("horizontal"===i?"vertical":"horizontal"))===i||"horizontal"!==e&&"vertical"!==e||(this.$el.removeClass(""+this.params.containerModifierClass+i).addClass(""+this.params.containerModifierClass+e),this.emitContainerClasses(),this.params.direction=e,this.slides.each(function(t){"vertical"===e?t.style.width="":t.style.height=""}),this.emit("changeDirection"),t&&this.update()),this},D.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"))},D.destroy=function(t,e){void 0===t&&(t=!0),void 0===e&&(e=!0);var i,r=this,n=r.params,a=r.$el,o=r.$wrapperEl,s=r.slides;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),n.loop&&r.loopDestroy(),e&&(r.removeClasses(),a.removeAttr("style"),o.removeAttr("style"),s&&s.length&&s.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),r.emit("destroy"),Object.keys(r.eventsListeners).forEach(function(t){r.off(t)}),!1!==t&&(r.$el[0].swiper=null,i=r,Object.keys(i).forEach(function(t){try{i[t]=null}catch(t){}try{delete i[t]}catch(t){}})),r.destroyed=!0),null},z.extendDefaults=function(t){ot(N,t)},z.installModule=function(t){z.prototype.modules||(z.prototype.modules={});var e=t.name||Object.keys(z.prototype.modules).length+"_"+k();z.prototype.modules[e]=t},z.use=function(t){return Array.isArray(t)?t.forEach(function(t){return z.installModule(t)}):z.installModule(t),z},null,t(z,[{key:"extendedDefaults",get:function(){return N}},{key:"defaults",get:function(){return O}}]),z);function z(){for(var t,n,e=arguments.length,i=new Array(e),r=0;r<e;r++)i[r]=arguments[r];n=ot({},n=(n=1===i.length&&i[0].constructor&&i[0].constructor===Object?i[0]:(t=i[0],i[1]))||{}),t&&!n.el&&(n.el=t);var a=this;a.support=H(),a.device=function(t){return void 0===t&&(t={}),v||(e=(void 0===t?{}:t).userAgent,i=H(),r=at(),n=r.navigator.platform,a=e||r.navigator.userAgent,o={ios:!1,android:!1},s=r.screen.width,l=r.screen.height,h=a.match(/(Android);?[\s\/]+([\d.]+)?/),c=a.match(/(iPad).*OS\s([\d_]+)/),u=a.match(/(iPod)(.*OS\s([\d_]+))?/),d=!c&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p="Win32"===n,f="MacIntel"===n,!c&&f&&i.touch&&0<=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768"].indexOf(s+"x"+l)&&((c=a.match(/(Version)\/([\d.]+)/))||(c=[0,1,"13_0_0"]),f=!1),h&&!p&&(o.os="android",o.android=!0),(c||d||u)&&(o.os="ios",o.ios=!0),v=o),v;var e,i,r,n,a,o,s,l,h,c,u,d,p,f}({userAgent:n.userAgent}),a.browser=function(){return y||(e=at(),y={isEdge:!!e.navigator.userAgent.match(/Edge/g),isSafari:(t=e.navigator.userAgent.toLowerCase(),0<=t.indexOf("safari")&&t.indexOf("chrome")<0&&t.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}),y;var t,e}(),a.eventsListeners={},a.eventsAnyListeners=[],Object.keys(B).forEach(function(e){Object.keys(B[e]).forEach(function(t){z.prototype[t]||(z.prototype[t]=B[e][t])})}),void 0===a.modules&&(a.modules={}),Object.keys(a.modules).forEach(function(t){var e=a.modules[t];if(e.params){var i=Object.keys(e.params)[0],r=e.params[i];if("object"!=typeof r||null===r)return;if(!(i in n&&"enabled"in r))return;!0===n[i]&&(n[i]={enabled:!0}),"object"!=typeof n[i]||"enabled"in n[i]||(n[i].enabled=!0),n[i]||(n[i]={enabled:!1})}});var o=ot({},O);a.useParams(o),a.params=ot({},o,N,n),a.originalParams=ot({},a.params),a.passedParams=ot({},n),a.params&&a.params.on&&Object.keys(a.params.on).forEach(function(t){a.on(t,a.params.on[t])});var s=(a.$=P)(a.params.el);if(t=s[0]){if(1<s.length){var l=[];return s.each(function(t){var e=ot({},n,{el:t});l.push(new z(e))}),l}var h,c,u;return t.swiper=a,t&&t.shadowRoot&&t.shadowRoot.querySelector?(h=P(t.shadowRoot.querySelector("."+a.params.wrapperClass))).children=function(t){return s.children(t)}:h=s.children("."+a.params.wrapperClass),ot(a,{$el:s,el:t,$wrapperEl:h,wrapperEl:h[0],classNames:[],slides:P(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===a.params.direction},isVertical:function(){return"vertical"===a.params.direction},rtl:"rtl"===t.dir.toLowerCase()||"rtl"===s.css("direction"),rtlTranslate:"horizontal"===a.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===s.css("direction")),wrongRTL:"-webkit-box"===h.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEvents:(c=["touchstart","touchmove","touchend","touchcancel"],u=["mousedown","mousemove","mouseup"],a.support.pointerEvents&&(u=["pointerdown","pointermove","pointerup"]),a.touchEventsTouch={start:c[0],move:c[1],end:c[2],cancel:c[3]},a.touchEventsDesktop={start:u[0],move:u[1],end:u[2]},a.support.touch||!a.params.simulateTouch?a.touchEventsTouch:a.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:k(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.useModules(),a.emit("_swiper"),a.params.init&&a.init(),a}}I.use([_,C]);var U={update:function(t){var e=this,i=e.params,r=i.slidesPerView,n=i.slidesPerGroup,a=i.centeredSlides,o=e.params.virtual,s=o.addSlidesBefore,l=o.addSlidesAfter,h=e.virtual,c=h.from,u=h.to,d=h.slides,p=h.slidesGrid,f=h.renderSlide,m=h.offset;e.updateActiveIndex();var g,E,v,y=e.activeIndex||0;g=e.rtlTranslate?"right":e.isHorizontal()?"left":"top",v=a?(E=Math.floor(r/2)+n+l,Math.floor(r/2)+n+s):(E=r+(n-1)+l,n+s);var T=Math.max((y||0)-v,0),x=Math.min((y||0)+E,d.length-1),b=(e.slidesGrid[T]||0)-(e.slidesGrid[0]||0);function R(){e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.lazy&&e.params.lazy.enabled&&e.lazy.load()}if(ot(e.virtual,{from:T,to:x,offset:b,slidesGrid:e.slidesGrid}),c===T&&u===x&&!t)return e.slidesGrid!==p&&b!==m&&e.slides.css(g,b+"px"),void e.updateProgress();if(e.params.virtual.renderExternal)return e.params.virtual.renderExternal.call(e,{offset:b,from:T,to:x,slides:function(){for(var t=[],e=T;e<=x;e+=1)t.push(d[e]);return t}()}),void(e.params.virtual.renderExternalUpdate&&R());var w=[],H=[];if(t)e.$wrapperEl.find("."+e.params.slideClass).remove();else for(var _=c;_<=u;_+=1)(_<T||x<_)&&e.$wrapperEl.find("."+e.params.slideClass+'[data-swiper-slide-index="'+_+'"]').remove();for(var S=0;S<d.length;S+=1)T<=S&&S<=x&&(void 0===u||t?H.push(S):(u<S&&H.push(S),S<c&&w.push(S)));H.forEach(function(t){e.$wrapperEl.append(f(d[t],t))}),w.sort(function(t,e){return e-t}).forEach(function(t){e.$wrapperEl.prepend(f(d[t],t))}),e.$wrapperEl.children(".swiper-slide").css(g,b+"px"),R()},renderSlide:function(t,e){var i=this.params.virtual;if(i.cache&&this.virtual.cache[e])return this.virtual.cache[e];var r=i.renderSlide?P(i.renderSlide.call(this,t,e)):P('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+e+'">'+t+"</div>");return r.attr("data-swiper-slide-index")||r.attr("data-swiper-slide-index",e),i.cache&&(this.virtual.cache[e]=r),r},appendSlide:function(t){if("object"==typeof t&&"length"in t)for(var e=0;e<t.length;e+=1)t[e]&&this.virtual.slides.push(t[e]);else this.virtual.slides.push(t);this.virtual.update(!0)},prependSlide:function(t){var e=this.activeIndex,i=e+1,r=1;if(Array.isArray(t)){for(var n=0;n<t.length;n+=1)t[n]&&this.virtual.slides.unshift(t[n]);i=e+t.length,r=t.length}else this.virtual.slides.unshift(t);if(this.params.virtual.cache){var a=this.virtual.cache,o={};Object.keys(a).forEach(function(t){var e=a[t],i=e.attr("data-swiper-slide-index");i&&e.attr("data-swiper-slide-index",parseInt(i,10)+1),o[parseInt(t,10)+r]=e}),this.virtual.cache=o}this.virtual.update(!0),this.slideTo(i,0)},removeSlide:function(t){if(null!=t){var e=this.activeIndex;if(Array.isArray(t))for(var i=t.length-1;0<=i;i-=1)this.virtual.slides.splice(t[i],1),this.params.virtual.cache&&delete this.virtual.cache[t[i]],t[i]<e&&(e-=1),e=Math.max(e,0);else this.virtual.slides.splice(t,1),this.params.virtual.cache&&delete this.virtual.cache[t],t<e&&(e-=1),e=Math.max(e,0);this.virtual.update(!0),this.slideTo(e,0)}},removeAllSlides:function(){this.virtual.slides=[],this.params.virtual.cache&&(this.virtual.cache={}),this.virtual.update(!0),this.slideTo(0,0)}},V={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){w(this,{virtual:e(e({},U),{},{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(t){if(t.params.virtual.enabled){t.classNames.push(t.params.containerModifierClass+"virtual");var e={watchSlidesProgress:!0};ot(t.params,e),ot(t.originalParams,e),t.params.initialSlide||t.virtual.update()}},setTranslate:function(t){t.params.virtual.enabled&&t.virtual.update()}}},G={handle:function(t){var e=at(),i=T(),r=this.rtlTranslate,n=t;n.originalEvent&&(n=n.originalEvent);var a=n.keyCode||n.charCode,o=this.params.keyboard.pageUpDown,s=o&&33===a,l=o&&34===a,h=37===a,c=39===a,u=38===a,d=40===a;if(!this.allowSlideNext&&(this.isHorizontal()&&c||this.isVertical()&&d||l))return!1;if(!this.allowSlidePrev&&(this.isHorizontal()&&h||this.isVertical()&&u||s))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(this.params.keyboard.onlyInViewport&&(s||l||h||c||u||d)){var p=!1;if(0<this.$el.parents("."+this.params.slideClass).length&&0===this.$el.parents("."+this.params.slideActiveClass).length)return;var f=e.innerWidth,m=e.innerHeight,g=this.$el.offset();r&&(g.left-=this.$el[0].scrollLeft);for(var E=[[g.left,g.top],[g.left+this.width,g.top],[g.left,g.top+this.height],[g.left+this.width,g.top+this.height]],v=0;v<E.length;v+=1){var y=E[v];0<=y[0]&&y[0]<=f&&0<=y[1]&&y[1]<=m&&(p=!0)}if(!p)return}this.isHorizontal()?((s||l||h||c)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),((l||c)&&!r||(s||h)&&r)&&this.slideNext(),((s||h)&&!r||(l||c)&&r)&&this.slidePrev()):((s||l||u||d)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),(l||d)&&this.slideNext(),(s||u)&&this.slidePrev()),this.emit("keyPress",a)}},enable:function(){var t=T();this.keyboard.enabled||(P(t).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){var t=T();this.keyboard.enabled&&(P(t).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},W={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){w(this,{keyboard:e({enabled:!1},G)})},on:{init:function(t){t.params.keyboard.enabled&&t.keyboard.enable()},destroy:function(t){t.keyboard.enabled&&t.keyboard.disable()}}},j={lastScrollTime:k(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return-1<at().navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":function(){var t=T(),e="onwheel"in t;if(!e){var i=t.createElement("div");i.setAttribute("onwheel","return;"),e="function"==typeof i.onwheel}return!e&&t.implementation&&t.implementation.hasFeature&&!0!==t.implementation.hasFeature("","")&&(e=t.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"},normalize:function(t){var e=0,i=0,r=0,n=0;return"detail"in t&&(i=t.detail),"wheelDelta"in t&&(i=-t.wheelDelta/120),"wheelDeltaY"in t&&(i=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(e=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(e=i,i=0),r=10*e,n=10*i,"deltaY"in t&&(n=t.deltaY),"deltaX"in t&&(r=t.deltaX),t.shiftKey&&!r&&(r=n,n=0),(r||n)&&t.deltaMode&&(1===t.deltaMode?(r*=40,n*=40):(r*=800,n*=800)),r&&!e&&(e=r<1?-1:1),n&&!i&&(i=n<1?-1:1),{spinX:e,spinY:i,pixelX:r,pixelY:n}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(t){var e=t,i=this,r=i.params.mousewheel;i.params.cssMode&&e.preventDefault();var n=i.$el;if("container"!==i.params.mousewheel.eventsTarget&&(n=P(i.params.mousewheel.eventsTarget)),!i.mouseEntered&&!n[0].contains(e.target)&&!r.releaseOnEdges)return!0;e.originalEvent&&(e=e.originalEvent);var a=0,o=i.rtlTranslate?-1:1,s=j.normalize(e);if(r.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(s.pixelX)>Math.abs(s.pixelY)))return!0;a=-s.pixelX*o}else{if(!(Math.abs(s.pixelY)>Math.abs(s.pixelX)))return!0;a=-s.pixelY}else a=Math.abs(s.pixelX)>Math.abs(s.pixelY)?-s.pixelX*o:-s.pixelY;if(0===a)return!0;if(r.invert&&(a=-a),i.params.freeMode){var l={time:k(),delta:Math.abs(a),direction:Math.sign(a)},h=i.mousewheel.lastEventBeforeSnap,c=h&&l.time<h.time+500&&l.delta<=h.delta&&l.direction===h.direction;if(!c){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();var u=i.getTranslate()+a*r.sensitivity,d=i.isBeginning,p=i.isEnd;if(u>=i.minTranslate()&&(u=i.minTranslate()),u<=i.maxTranslate()&&(u=i.maxTranslate()),i.setTransition(0),i.setTranslate(u),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!d&&i.isBeginning||!p&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;var f=i.mousewheel.recentWheelEvents;15<=f.length&&f.shift();var m=f.length?f[f.length-1]:void 0,g=f[0];if(f.push(l),m&&(l.delta>m.delta||l.direction!==m.direction))f.splice(0);else if(15<=f.length&&l.time-g.time<500&&1<=g.delta-l.delta&&l.delta<=6){var E=0<a?.8:.2;i.mousewheel.lastEventBeforeSnap=l,f.splice(0),i.mousewheel.timeout=F(function(){i.slideToClosest(i.params.speed,!0,void 0,E)},0)}i.mousewheel.timeout||(i.mousewheel.timeout=F(function(){i.mousewheel.lastEventBeforeSnap=l,f.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))}if(c||i.emit("scroll",e),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),u===i.minTranslate()||u===i.maxTranslate())return!0}}else{var v={time:k(),delta:Math.abs(a),direction:Math.sign(a),raw:t},y=i.mousewheel.recentWheelEvents;2<=y.length&&y.shift();var T=y.length?y[y.length-1]:void 0;if(y.push(v),T?(v.direction!==T.direction||v.delta>T.delta||v.time>T.time+150)&&i.mousewheel.animateSlider(v):i.mousewheel.animateSlider(v),i.mousewheel.releaseScroll(v))return!0}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1},animateSlider:function(t){var e=at();return!(this.params.mousewheel.thresholdDelta&&t.delta<this.params.mousewheel.thresholdDelta||this.params.mousewheel.thresholdTime&&k()-this.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime||!(6<=t.delta&&k()-this.mousewheel.lastScrollTime<60)&&(t.direction<0?this.isEnd&&!this.params.loop||this.animating||(this.slideNext(),this.emit("scroll",t.raw)):this.isBeginning&&!this.params.loop||this.animating||(this.slidePrev(),this.emit("scroll",t.raw)),this.mousewheel.lastScrollTime=(new e.Date).getTime(),1))},releaseScroll:function(t){var e=this.params.mousewheel;if(t.direction<0){if(this.isEnd&&!this.params.loop&&e.releaseOnEdges)return!0}else if(this.isBeginning&&!this.params.loop&&e.releaseOnEdges)return!0;return!1},enable:function(){var t=j.event();if(this.params.cssMode)return this.wrapperEl.removeEventListener(t,this.mousewheel.handle),!0;if(!t)return!1;if(this.mousewheel.enabled)return!1;var e=this.$el;return"container"!==this.params.mousewheel.eventsTarget&&(e=P(this.params.mousewheel.eventsTarget)),e.on("mouseenter",this.mousewheel.handleMouseEnter),e.on("mouseleave",this.mousewheel.handleMouseLeave),e.on(t,this.mousewheel.handle),this.mousewheel.enabled=!0},disable:function(){var t=j.event();if(this.params.cssMode)return this.wrapperEl.addEventListener(t,this.mousewheel.handle),!0;if(!t)return!1;if(!this.mousewheel.enabled)return!1;var e=this.$el;return"container"!==this.params.mousewheel.eventsTarget&&(e=P(this.params.mousewheel.eventsTarget)),e.off(t,this.mousewheel.handle),!(this.mousewheel.enabled=!1)}},X={update:function(){var t=this.params.navigation;if(!this.params.loop){var e=this.navigation,i=e.$nextEl,r=e.$prevEl;r&&0<r.length&&(this.isBeginning?r.addClass(t.disabledClass):r.removeClass(t.disabledClass),r[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](t.lockClass)),i&&0<i.length&&(this.isEnd?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(t){t.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(t){t.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var t,e,i=this.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(t=P(i.nextEl),this.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<t.length&&1===this.$el.find(i.nextEl).length&&(t=this.$el.find(i.nextEl))),i.prevEl&&(e=P(i.prevEl),this.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<e.length&&1===this.$el.find(i.prevEl).length&&(e=this.$el.find(i.prevEl))),t&&0<t.length&&t.on("click",this.navigation.onNextClick),e&&0<e.length&&e.on("click",this.navigation.onPrevClick),ot(this.navigation,{$nextEl:t,nextEl:t&&t[0],$prevEl:e,prevEl:e&&e[0]}))},destroy:function(){var t=this.navigation,e=t.$nextEl,i=t.$prevEl;e&&e.length&&(e.off("click",this.navigation.onNextClick),e.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click",this.navigation.onPrevClick),i.removeClass(this.params.navigation.disabledClass))}},$={update:function(){var t=this.rtl,r=this.params.pagination;if(r.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var n,e=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,a=this.params.loop?Math.ceil((e-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((n=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>e-1-2*this.loopedSlides&&(n-=e-2*this.loopedSlides),a-1<n&&(n-=a),n<0&&"bullets"!==this.params.paginationType&&(n=a+n)):n=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===r.type&&this.pagination.bullets&&0<this.pagination.bullets.length){var o,s,l,h=this.pagination.bullets;if(r.dynamicBullets&&(this.pagination.bulletSize=h.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),i.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(r.dynamicMainBullets+4)+"px"),1<r.dynamicMainBullets&&void 0!==this.previousIndex&&(this.pagination.dynamicBulletIndex+=n-this.previousIndex,this.pagination.dynamicBulletIndex>r.dynamicMainBullets-1?this.pagination.dynamicBulletIndex=r.dynamicMainBullets-1:this.pagination.dynamicBulletIndex<0&&(this.pagination.dynamicBulletIndex=0)),o=n-this.pagination.dynamicBulletIndex,l=((s=o+(Math.min(h.length,r.dynamicMainBullets)-1))+o)/2),h.removeClass(r.bulletActiveClass+" "+r.bulletActiveClass+"-next "+r.bulletActiveClass+"-next-next "+r.bulletActiveClass+"-prev "+r.bulletActiveClass+"-prev-prev "+r.bulletActiveClass+"-main"),1<i.length)h.each(function(t){var e=P(t),i=e.index();i===n&&e.addClass(r.bulletActiveClass),r.dynamicBullets&&(o<=i&&i<=s&&e.addClass(r.bulletActiveClass+"-main"),i===o&&e.prev().addClass(r.bulletActiveClass+"-prev").prev().addClass(r.bulletActiveClass+"-prev-prev"),i===s&&e.next().addClass(r.bulletActiveClass+"-next").next().addClass(r.bulletActiveClass+"-next-next"))});else{var c=h.eq(n),u=c.index();if(c.addClass(r.bulletActiveClass),r.dynamicBullets){for(var d=h.eq(o),p=h.eq(s),f=o;f<=s;f+=1)h.eq(f).addClass(r.bulletActiveClass+"-main");if(this.params.loop)if(u>=h.length-r.dynamicMainBullets){for(var m=r.dynamicMainBullets;0<=m;m-=1)h.eq(h.length-m).addClass(r.bulletActiveClass+"-main");h.eq(h.length-r.dynamicMainBullets-1).addClass(r.bulletActiveClass+"-prev")}else d.prev().addClass(r.bulletActiveClass+"-prev").prev().addClass(r.bulletActiveClass+"-prev-prev"),p.next().addClass(r.bulletActiveClass+"-next").next().addClass(r.bulletActiveClass+"-next-next");else d.prev().addClass(r.bulletActiveClass+"-prev").prev().addClass(r.bulletActiveClass+"-prev-prev"),p.next().addClass(r.bulletActiveClass+"-next").next().addClass(r.bulletActiveClass+"-next-next")}}if(r.dynamicBullets){var g=Math.min(h.length,r.dynamicMainBullets+4),E=(this.pagination.bulletSize*g-this.pagination.bulletSize)/2-l*this.pagination.bulletSize,v=t?"right":"left";h.css(this.isHorizontal()?v:"top",E+"px")}}if("fraction"===r.type&&(i.find("."+r.currentClass).text(r.formatFractionCurrent(n+1)),i.find("."+r.totalClass).text(r.formatFractionTotal(a))),"progressbar"===r.type){var y;y=r.progressbarOpposite?this.isHorizontal()?"vertical":"horizontal":this.isHorizontal()?"horizontal":"vertical";var T=(n+1)/a,x=1,b=1;"horizontal"==y?x=T:b=T,i.find("."+r.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+x+") scaleY("+b+")").transition(this.params.speed)}"custom"===r.type&&r.renderCustom?(i.html(r.renderCustom(this,n+1,a)),this.emit("paginationRender",i[0])):this.emit("paginationUpdate",i[0]),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](r.lockClass)}},render:function(){var t=this.params.pagination;if(t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var e=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,r="";if("bullets"===t.type){for(var n=this.params.loop?Math.ceil((e-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,a=0;a<n;a+=1)t.renderBullet?r+=t.renderBullet.call(this,a,t.bulletClass):r+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";i.html(r),this.pagination.bullets=i.find("."+t.bulletClass)}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(this,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',i.html(r)),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(this,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',i.html(r)),"custom"!==t.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var i=this,t=i.params.pagination;if(t.el){var e=P(t.el);0!==e.length&&(i.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&(e=i.$el.find(t.el)),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),i.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click","."+t.bulletClass,function(t){t.preventDefault();var e=P(this).index()*i.params.slidesPerGroup;i.params.loop&&(e+=i.loopedSlides),i.slideTo(e)}),ot(i.pagination,{$el:e,el:e[0]}))}},destroy:function(){var t=this.params.pagination;if(t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var e=this.pagination.$el;e.removeClass(t.hiddenClass),e.removeClass(t.modifierClass+t.type),this.pagination.bullets&&this.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&e.off("click","."+t.bulletClass)}}},q={setTranslate:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var t=this.scrollbar,e=this.rtlTranslate,i=this.progress,r=t.dragSize,n=t.trackSize,a=t.$dragEl,o=t.$el,s=this.params.scrollbar,l=r,h=(n-r)*i;e?0<(h=-h)?(l=r-h,h=0):n<-h+r&&(l=n+h):h<0?(l=r+h,h=0):n<h+r&&(l=n-h),this.isHorizontal()?(a.transform("translate3d("+h+"px, 0, 0)"),a[0].style.width=l+"px"):(a.transform("translate3d(0px, "+h+"px, 0)"),a[0].style.height=l+"px"),s.hide&&(clearTimeout(this.scrollbar.timeout),o[0].style.opacity=1,this.scrollbar.timeout=setTimeout(function(){o[0].style.opacity=0,o.transition(400)},1e3))}},setTransition:function(t){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(t)},updateSize:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var t=this.scrollbar,e=t.$dragEl,i=t.$el;e[0].style.width="",e[0].style.height="";var r,n=this.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,a=this.size/this.virtualSize,o=a*(n/this.size);r="auto"===this.params.scrollbar.dragSize?n*a:parseInt(this.params.scrollbar.dragSize,10),this.isHorizontal()?e[0].style.width=r+"px":e[0].style.height=r+"px",i[0].style.display=1<=a?"none":"",this.params.scrollbar.hide&&(i[0].style.opacity=0),ot(t,{trackSize:n,divider:a,moveDivider:o,dragSize:r}),t.$el[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](this.params.scrollbar.lockClass)}},getPointerPosition:function(t){return this.isHorizontal()?"touchstart"===t.type||"touchmove"===t.type?t.targetTouches[0].clientX:t.clientX:"touchstart"===t.type||"touchmove"===t.type?t.targetTouches[0].clientY:t.clientY},setDragPosition:function(t){var e,i=this.scrollbar,r=this.rtlTranslate,n=i.$el,a=i.dragSize,o=i.trackSize,s=i.dragStartPos;e=(i.getPointerPosition(t)-n.offset()[this.isHorizontal()?"left":"top"]-(null!==s?s:a/2))/(o-a),e=Math.max(Math.min(e,1),0),r&&(e=1-e);var l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*e;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart:function(t){var e=this.params.scrollbar,i=this.scrollbar,r=this.$wrapperEl,n=i.$el,a=i.$dragEl;this.scrollbar.isTouched=!0,this.scrollbar.dragStartPos=t.target===a[0]||t.target===a?i.getPointerPosition(t)-t.target.getBoundingClientRect()[this.isHorizontal()?"left":"top"]:null,t.preventDefault(),t.stopPropagation(),r.transition(100),a.transition(100),i.setDragPosition(t),clearTimeout(this.scrollbar.dragTimeout),n.transition(0),e.hide&&n.css("opacity",1),this.params.cssMode&&this.$wrapperEl.css("scroll-snap-type","none"),this.emit("scrollbarDragStart",t)},onDragMove:function(t){var e=this.scrollbar,i=this.$wrapperEl,r=e.$el,n=e.$dragEl;this.scrollbar.isTouched&&(t.preventDefault?t.preventDefault():t.returnValue=!1,e.setDragPosition(t),i.transition(0),r.transition(0),n.transition(0),this.emit("scrollbarDragMove",t))},onDragEnd:function(t){var e=this.params.scrollbar,i=this.scrollbar,r=this.$wrapperEl,n=i.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,this.params.cssMode&&(this.$wrapperEl.css("scroll-snap-type",""),r.transition("")),e.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=F(function(){n.css("opacity",0),n.transition(400)},1e3)),this.emit("scrollbarDragEnd",t),e.snapOnRelease&&this.slideToClosest())},enableDraggable:function(){if(this.params.scrollbar.el){var t=T(),e=this.scrollbar,i=this.touchEventsTouch,r=this.touchEventsDesktop,n=this.params,a=this.support,o=e.$el[0],s=!(!a.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},l=!(!a.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};a.touch?(o.addEventListener(i.start,this.scrollbar.onDragStart,s),o.addEventListener(i.move,this.scrollbar.onDragMove,s),o.addEventListener(i.end,this.scrollbar.onDragEnd,l)):(o.addEventListener(r.start,this.scrollbar.onDragStart,s),t.addEventListener(r.move,this.scrollbar.onDragMove,s),t.addEventListener(r.end,this.scrollbar.onDragEnd,l))}},disableDraggable:function(){if(this.params.scrollbar.el){var t=T(),e=this.scrollbar,i=this.touchEventsTouch,r=this.touchEventsDesktop,n=this.params,a=this.support,o=e.$el[0],s=!(!a.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},l=!(!a.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};a.touch?(o.removeEventListener(i.start,this.scrollbar.onDragStart,s),o.removeEventListener(i.move,this.scrollbar.onDragMove,s),o.removeEventListener(i.end,this.scrollbar.onDragEnd,l)):(o.removeEventListener(r.start,this.scrollbar.onDragStart,s),t.removeEventListener(r.move,this.scrollbar.onDragMove,s),t.removeEventListener(r.end,this.scrollbar.onDragEnd,l))}},init:function(){if(this.params.scrollbar.el){var t=this.scrollbar,e=this.$el,i=this.params.scrollbar,r=P(i.el);this.params.uniqueNavElements&&"string"==typeof i.el&&1<r.length&&1===e.find(i.el).length&&(r=e.find(i.el));var n=r.find("."+this.params.scrollbar.dragClass);0===n.length&&(n=P('<div class="'+this.params.scrollbar.dragClass+'"></div>'),r.append(n)),ot(t,{$el:r,el:r[0],$dragEl:n,dragEl:n[0]}),i.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},Y={setTransform:function(t,e){var i=this.rtl,r=P(t),n=i?-1:1,a=r.attr("data-swiper-parallax")||"0",o=r.attr("data-swiper-parallax-x"),s=r.attr("data-swiper-parallax-y"),l=r.attr("data-swiper-parallax-scale"),h=r.attr("data-swiper-parallax-opacity");if(o||s?(o=o||"0",s=s||"0"):this.isHorizontal()?(o=a,s="0"):(s=a,o="0"),o=0<=o.indexOf("%")?parseInt(o,10)*e*n+"%":o*e*n+"px",s=0<=s.indexOf("%")?parseInt(s,10)*e+"%":s*e+"px",null!=h){var c=h-(h-1)*(1-Math.abs(e));r[0].style.opacity=c}if(null==l)r.transform("translate3d("+o+", "+s+", 0px)");else{var u=l-(l-1)*(1-Math.abs(e));r.transform("translate3d("+o+", "+s+", 0px) scale("+u+")")}},setTranslate:function(){var r=this,t=r.$el,e=r.slides,n=r.progress,a=r.snapGrid;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(t){r.parallax.setTransform(t,n)}),e.each(function(t,e){var i=t.progress;1<r.params.slidesPerGroup&&"auto"!==r.params.slidesPerView&&(i+=Math.ceil(e/2)-n*(a.length-1)),i=Math.min(Math.max(i,-1),1),P(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(t){r.parallax.setTransform(t,i)})})},setTransition:function(r){void 0===r&&(r=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(t){var e=P(t),i=parseInt(e.attr("data-swiper-parallax-duration"),10)||r;0===r&&(i=0),e.transition(i)})}},K={getDistanceBetweenTouches:function(t){if(t.targetTouches.length<2)return 1;var e=t.targetTouches[0].pageX,i=t.targetTouches[0].pageY,r=t.targetTouches[1].pageX,n=t.targetTouches[1].pageY;return Math.sqrt(Math.pow(r-e,2)+Math.pow(n-i,2))},onGestureStart:function(t){var e=this.support,i=this.params.zoom,r=this.zoom,n=r.gesture;if(r.fakeGestureTouched=!1,r.fakeGestureMoved=!1,!e.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;r.fakeGestureTouched=!0,n.scaleStart=K.getDistanceBetweenTouches(t)}n.$slideEl&&n.$slideEl.length||(n.$slideEl=P(t.target).closest("."+this.params.slideClass),0===n.$slideEl.length&&(n.$slideEl=this.slides.eq(this.activeIndex)),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+i.containerClass),n.maxRatio=n.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==n.$imageWrapEl.length)?(n.$imageEl&&n.$imageEl.transition(0),this.zoom.isScaling=!0):n.$imageEl=void 0},onGestureChange:function(t){var e=this.support,i=this.params.zoom,r=this.zoom,n=r.gesture;if(!e.gestures){if("touchmove"!==t.type||"touchmove"===t.type&&t.targetTouches.length<2)return;r.fakeGestureMoved=!0,n.scaleMove=K.getDistanceBetweenTouches(t)}n.$imageEl&&0!==n.$imageEl.length?(e.gestures?r.scale=t.scale*r.currentScale:r.scale=n.scaleMove/n.scaleStart*r.currentScale,r.scale>n.maxRatio&&(r.scale=n.maxRatio-1+Math.pow(r.scale-n.maxRatio+1,.5)),r.scale<i.minRatio&&(r.scale=i.minRatio+1-Math.pow(i.minRatio-r.scale+1,.5)),n.$imageEl.transform("translate3d(0,0,0) scale("+r.scale+")")):"gesturechange"===t.type&&r.onGestureStart(t)},onGestureEnd:function(t){var e=this.device,i=this.support,r=this.params.zoom,n=this.zoom,a=n.gesture;if(!i.gestures){if(!n.fakeGestureTouched||!n.fakeGestureMoved)return;if("touchend"!==t.type||"touchend"===t.type&&t.changedTouches.length<2&&!e.android)return;n.fakeGestureTouched=!1,n.fakeGestureMoved=!1}a.$imageEl&&0!==a.$imageEl.length&&(n.scale=Math.max(Math.min(n.scale,a.maxRatio),r.minRatio),a.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+n.scale+")"),n.currentScale=n.scale,n.isScaling=!1,1===n.scale&&(a.$slideEl=void 0))},onTouchStart:function(t){var e=this.device,i=this.zoom,r=i.gesture,n=i.image;r.$imageEl&&0!==r.$imageEl.length&&(n.isTouched||(e.android&&t.cancelable&&t.preventDefault(),n.isTouched=!0,n.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(t){var e=this.zoom,i=e.gesture,r=e.image,n=e.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,r.isTouched&&i.$slideEl)){r.isMoved||(r.width=i.$imageEl[0].offsetWidth,r.height=i.$imageEl[0].offsetHeight,r.startX=b(i.$imageWrapEl[0],"x")||0,r.startY=b(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(r.startX=-r.startX,r.startY=-r.startY));var a=r.width*e.scale,o=r.height*e.scale;if(!(a<i.slideWidth&&o<i.slideHeight)){if(r.minX=Math.min(i.slideWidth/2-a/2,0),r.maxX=-r.minX,r.minY=Math.min(i.slideHeight/2-o/2,0),r.maxY=-r.minY,r.touchesCurrent.x="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,r.touchesCurrent.y="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,!r.isMoved&&!e.isScaling){if(this.isHorizontal()&&(Math.floor(r.minX)===Math.floor(r.startX)&&r.touchesCurrent.x<r.touchesStart.x||Math.floor(r.maxX)===Math.floor(r.startX)&&r.touchesCurrent.x>r.touchesStart.x))return void(r.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(r.minY)===Math.floor(r.startY)&&r.touchesCurrent.y<r.touchesStart.y||Math.floor(r.maxY)===Math.floor(r.startY)&&r.touchesCurrent.y>r.touchesStart.y))return void(r.isTouched=!1)}t.cancelable&&t.preventDefault(),t.stopPropagation(),r.isMoved=!0,r.currentX=r.touchesCurrent.x-r.touchesStart.x+r.startX,r.currentY=r.touchesCurrent.y-r.touchesStart.y+r.startY,r.currentX<r.minX&&(r.currentX=r.minX+1-Math.pow(r.minX-r.currentX+1,.8)),r.currentX>r.maxX&&(r.currentX=r.maxX-1+Math.pow(r.currentX-r.maxX+1,.8)),r.currentY<r.minY&&(r.currentY=r.minY+1-Math.pow(r.minY-r.currentY+1,.8)),r.currentY>r.maxY&&(r.currentY=r.maxY-1+Math.pow(r.currentY-r.maxY+1,.8)),n.prevPositionX||(n.prevPositionX=r.touchesCurrent.x),n.prevPositionY||(n.prevPositionY=r.touchesCurrent.y),n.prevTime||(n.prevTime=Date.now()),n.x=(r.touchesCurrent.x-n.prevPositionX)/(Date.now()-n.prevTime)/2,n.y=(r.touchesCurrent.y-n.prevPositionY)/(Date.now()-n.prevTime)/2,Math.abs(r.touchesCurrent.x-n.prevPositionX)<2&&(n.x=0),Math.abs(r.touchesCurrent.y-n.prevPositionY)<2&&(n.y=0),n.prevPositionX=r.touchesCurrent.x,n.prevPositionY=r.touchesCurrent.y,n.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+r.currentX+"px, "+r.currentY+"px,0)")}}},onTouchEnd:function(){var t=this.zoom,e=t.gesture,i=t.image,r=t.velocity;if(e.$imageEl&&0!==e.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var n=300,a=300,o=r.x*n,s=i.currentX+o,l=r.y*a,h=i.currentY+l;0!==r.x&&(n=Math.abs((s-i.currentX)/r.x)),0!==r.y&&(a=Math.abs((h-i.currentY)/r.y));var c=Math.max(n,a);i.currentX=s,i.currentY=h;var u=i.width*t.scale,d=i.height*t.scale;i.minX=Math.min(e.slideWidth/2-u/2,0),i.maxX=-i.minX,i.minY=Math.min(e.slideHeight/2-d/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),e.$imageWrapEl.transition(c).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var t=this.zoom,e=t.gesture;e.$slideEl&&this.previousIndex!==this.activeIndex&&(e.$imageEl&&e.$imageEl.transform("translate3d(0,0,0) scale(1)"),e.$imageWrapEl&&e.$imageWrapEl.transform("translate3d(0,0,0)"),t.scale=1,t.currentScale=1,e.$slideEl=void 0,e.$imageEl=void 0,e.$imageWrapEl=void 0)},toggle:function(t){var e=this.zoom;e.scale&&1!==e.scale?e.out():e.in(t)},in:function(t){var e,i,r,n,a,o,s,l,h,c,u,d,p,f,m,g,E=this.zoom,v=this.params.zoom,y=E.gesture,T=E.image;y.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?y.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):y.$slideEl=this.slides.eq(this.activeIndex),y.$imageEl=y.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),y.$imageWrapEl=y.$imageEl.parent("."+v.containerClass)),y.$imageEl&&0!==y.$imageEl.length&&(y.$slideEl.addClass(""+v.zoomedSlideClass),i=void 0===T.touchesStart.x&&t?(e="touchend"===t.type?t.changedTouches[0].pageX:t.pageX,"touchend"===t.type?t.changedTouches[0].pageY:t.pageY):(e=T.touchesStart.x,T.touchesStart.y),E.scale=y.$imageWrapEl.attr("data-swiper-zoom")||v.maxRatio,E.currentScale=y.$imageWrapEl.attr("data-swiper-zoom")||v.maxRatio,t?(m=y.$slideEl[0].offsetWidth,g=y.$slideEl[0].offsetHeight,r=y.$slideEl.offset().left+m/2-e,n=y.$slideEl.offset().top+g/2-i,s=y.$imageEl[0].offsetWidth,l=y.$imageEl[0].offsetHeight,h=s*E.scale,c=l*E.scale,p=-(u=Math.min(m/2-h/2,0)),f=-(d=Math.min(g/2-c/2,0)),(a=r*E.scale)<u&&(a=u),p<a&&(a=p),(o=n*E.scale)<d&&(o=d),f<o&&(o=f)):o=a=0,y.$imageWrapEl.transition(300).transform("translate3d("+a+"px, "+o+"px,0)"),y.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+E.scale+")"))},out:function(){var t=this.zoom,e=this.params.zoom,i=t.gesture;i.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?i.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):i.$slideEl=this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),i.$imageWrapEl=i.$imageEl.parent("."+e.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+e.zoomedSlideClass),i.$slideEl=void 0)},toggleGestures:function(t){var e=this.zoom,i=e.slideSelector,r=e.passiveListener;this.$wrapperEl[t]("gesturestart",i,e.onGestureStart,r),this.$wrapperEl[t]("gesturechange",i,e.onGestureChange,r),this.$wrapperEl[t]("gestureend",i,e.onGestureEnd,r)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures("on"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures("off"))},enable:function(){var t=this.support,e=this.zoom;if(!e.enabled){e.enabled=!0;var i=!("touchstart"!==this.touchEvents.start||!t.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},r=!t.passiveListener||{passive:!1,capture:!0},n="."+this.params.slideClass;this.zoom.passiveListener=i,this.zoom.slideSelector=n,t.gestures?(this.$wrapperEl.on(this.touchEvents.start,this.zoom.enableGestures,i),this.$wrapperEl.on(this.touchEvents.end,this.zoom.disableGestures,i)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.on(this.touchEvents.start,n,e.onGestureStart,i),this.$wrapperEl.on(this.touchEvents.move,n,e.onGestureChange,r),this.$wrapperEl.on(this.touchEvents.end,n,e.onGestureEnd,i),this.touchEvents.cancel&&this.$wrapperEl.on(this.touchEvents.cancel,n,e.onGestureEnd,i)),this.$wrapperEl.on(this.touchEvents.move,"."+this.params.zoom.containerClass,e.onTouchMove,r)}},disable:function(){var t=this.zoom;if(t.enabled){var e=this.support;this.zoom.enabled=!1;var i=!("touchstart"!==this.touchEvents.start||!e.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},r=!e.passiveListener||{passive:!1,capture:!0},n="."+this.params.slideClass;e.gestures?(this.$wrapperEl.off(this.touchEvents.start,this.zoom.enableGestures,i),this.$wrapperEl.off(this.touchEvents.end,this.zoom.disableGestures,i)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.off(this.touchEvents.start,n,t.onGestureStart,i),this.$wrapperEl.off(this.touchEvents.move,n,t.onGestureChange,r),this.$wrapperEl.off(this.touchEvents.end,n,t.onGestureEnd,i),this.touchEvents.cancel&&this.$wrapperEl.off(this.touchEvents.cancel,n,t.onGestureEnd,i)),this.$wrapperEl.off(this.touchEvents.move,"."+this.params.zoom.containerClass,t.onTouchMove,r)}}},Q={loadInSlide:function(t,h){void 0===h&&(h=!0);var c=this,u=c.params.lazy;if(void 0!==t&&0!==c.slides.length){var d=c.virtual&&c.params.virtual.enabled?c.$wrapperEl.children("."+c.params.slideClass+'[data-swiper-slide-index="'+t+'"]'):c.slides.eq(t),e=d.find("."+u.elementClass+":not(."+u.loadedClass+"):not(."+u.loadingClass+")");!d.hasClass(u.elementClass)||d.hasClass(u.loadedClass)||d.hasClass(u.loadingClass)||e.push(d[0]),0!==e.length&&e.each(function(t){var r=P(t);r.addClass(u.loadingClass);var n=r.attr("data-background"),a=r.attr("data-src"),o=r.attr("data-srcset"),s=r.attr("data-sizes"),l=r.parent("picture");c.loadImage(r[0],a||n,o,s,!1,function(){if(null!=c&&c&&(!c||c.params)&&!c.destroyed){if(n?(r.css("background-image",'url("'+n+'")'),r.removeAttr("data-background")):(o&&(r.attr("srcset",o),r.removeAttr("data-srcset")),s&&(r.attr("sizes",s),r.removeAttr("data-sizes")),l.length&&l.children("source").each(function(t){var e=P(t);e.attr("data-srcset")&&(e.attr("srcset",e.attr("data-srcset")),e.removeAttr("data-srcset"))}),a&&(r.attr("src",a),r.removeAttr("data-src"))),r.addClass(u.loadedClass).removeClass(u.loadingClass),d.find("."+u.preloaderClass).remove(),c.params.loop&&h){var t=d.attr("data-swiper-slide-index");if(d.hasClass(c.params.slideDuplicateClass)){var e=c.$wrapperEl.children('[data-swiper-slide-index="'+t+'"]:not(.'+c.params.slideDuplicateClass+")");c.lazy.loadInSlide(e.index(),!1)}else{var i=c.$wrapperEl.children("."+c.params.slideDuplicateClass+'[data-swiper-slide-index="'+t+'"]');c.lazy.loadInSlide(i.index(),!1)}}c.emit("lazyImageReady",d[0],r[0]),c.params.autoHeight&&c.updateAutoHeight()}}),c.emit("lazyImageLoad",d[0],r[0])})}},load:function(){var i=this,e=i.$wrapperEl,r=i.params,n=i.slides,t=i.activeIndex,a=i.virtual&&r.virtual.enabled,o=r.lazy,s=r.slidesPerView;function l(t){if(a){if(e.children("."+r.slideClass+'[data-swiper-slide-index="'+t+'"]').length)return!0}else if(n[t])return!0;return!1}function h(t){return a?P(t).attr("data-swiper-slide-index"):P(t).index()}if("auto"===s&&(s=0),i.lazy.initialImageLoaded||(i.lazy.initialImageLoaded=!0),i.params.watchSlidesVisibility)e.children("."+r.slideVisibleClass).each(function(t){var e=a?P(t).attr("data-swiper-slide-index"):P(t).index();i.lazy.loadInSlide(e)});else if(1<s)for(var c=t;c<t+s;c+=1)l(c)&&i.lazy.loadInSlide(c);else i.lazy.loadInSlide(t);if(o.loadPrevNext)if(1<s||o.loadPrevNextAmount&&1<o.loadPrevNextAmount){for(var u=o.loadPrevNextAmount,d=s,p=Math.min(t+d+Math.max(u,d),n.length),f=Math.max(t-Math.max(d,u),0),m=t+s;m<p;m+=1)l(m)&&i.lazy.loadInSlide(m);for(var g=f;g<t;g+=1)l(g)&&i.lazy.loadInSlide(g)}else{var E=e.children("."+r.slideNextClass);0<E.length&&i.lazy.loadInSlide(h(E));var v=e.children("."+r.slidePrevClass);0<v.length&&i.lazy.loadInSlide(h(v))}}},Z={LinearSpline:function(t,e){var i,r,n,a,o;return this.x=t,this.y=e,this.lastIndex=t.length-1,this.interpolate=function(t){return t?(o=function(t,e){for(r=-1,i=t.length;1<i-r;)t[n=i+r>>1]<=e?r=n:i=n;return i}(this.x,t),a=o-1,(t-this.x[a])*(this.y[o]-this.y[a])/(this.x[o]-this.x[a])+this.y[a]):0},this},getInterpolateFunction:function(t){this.controller.spline||(this.controller.spline=this.params.loop?new Z.LinearSpline(this.slidesGrid,t.slidesGrid):new Z.LinearSpline(this.snapGrid,t.snapGrid))},setTranslate:function(t,e){var i,r,n=this,a=n.controller.control,o=n.constructor;function s(t){var e=n.rtlTranslate?-n.translate:n.translate;"slide"===n.params.controller.by&&(n.controller.getInterpolateFunction(t),r=-n.controller.spline.interpolate(-e)),r&&"container"!==n.params.controller.by||(i=(t.maxTranslate()-t.minTranslate())/(n.maxTranslate()-n.minTranslate()),r=(e-n.minTranslate())*i+t.minTranslate()),n.params.controller.inverse&&(r=t.maxTranslate()-r),t.updateProgress(r),t.setTranslate(r,n),t.updateActiveIndex(),t.updateSlidesClasses()}if(Array.isArray(a))for(var l=0;l<a.length;l+=1)a[l]!==e&&a[l]instanceof o&&s(a[l]);else a instanceof o&&e!==a&&s(a)},setTransition:function(e,t){var i,r=this,n=r.constructor,a=r.controller.control;function o(t){t.setTransition(e,r),0!==e&&(t.transitionStart(),t.params.autoHeight&&F(function(){t.updateAutoHeight()}),t.$wrapperEl.transitionEnd(function(){a&&(t.params.loop&&"slide"===r.params.controller.by&&t.loopFix(),t.transitionEnd())}))}if(Array.isArray(a))for(i=0;i<a.length;i+=1)a[i]!==t&&a[i]instanceof n&&o(a[i]);else a instanceof n&&t!==a&&o(a)}},J={makeElFocusable:function(t){return t.attr("tabIndex","0"),t},makeElNotFocusable:function(t){return t.attr("tabIndex","-1"),t},addElRole:function(t,e){return t.attr("role",e),t},addElLabel:function(t,e){return t.attr("aria-label",e),t},disableEl:function(t){return t.attr("aria-disabled",!0),t},enableEl:function(t){return t.attr("aria-disabled",!1),t},onEnterKey:function(t){var e=this.params.a11y;if(13===t.keyCode){var i=P(t.target);this.navigation&&this.navigation.$nextEl&&i.is(this.navigation.$nextEl)&&(this.isEnd&&!this.params.loop||this.slideNext(),this.isEnd?this.a11y.notify(e.lastSlideMessage):this.a11y.notify(e.nextSlideMessage)),this.navigation&&this.navigation.$prevEl&&i.is(this.navigation.$prevEl)&&(this.isBeginning&&!this.params.loop||this.slidePrev(),this.isBeginning?this.a11y.notify(e.firstSlideMessage):this.a11y.notify(e.prevSlideMessage)),this.pagination&&i.is("."+this.params.pagination.bulletClass)&&i[0].click()}},notify:function(t){var e=this.a11y.liveRegion;0!==e.length&&(e.html(""),e.html(t))},updateNavigation:function(){if(!this.params.loop&&this.navigation){var t=this.navigation,e=t.$nextEl,i=t.$prevEl;i&&0<i.length&&(this.isBeginning?(this.a11y.disableEl(i),this.a11y.makeElNotFocusable(i)):(this.a11y.enableEl(i),this.a11y.makeElFocusable(i))),e&&0<e.length&&(this.isEnd?(this.a11y.disableEl(e),this.a11y.makeElNotFocusable(e)):(this.a11y.enableEl(e),this.a11y.makeElFocusable(e)))}},updatePagination:function(){var i=this,r=i.params.a11y;i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.bullets.each(function(t){var e=P(t);i.a11y.makeElFocusable(e),i.a11y.addElRole(e,"button"),i.a11y.addElLabel(e,r.paginationBulletMessage.replace(/\{\{index\}\}/,e.index()+1))})},init:function(){this.$el.append(this.a11y.liveRegion);var t,e,i=this.params.a11y;this.navigation&&this.navigation.$nextEl&&(t=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(e=this.navigation.$prevEl),t&&(this.a11y.makeElFocusable(t),this.a11y.addElRole(t,"button"),this.a11y.addElLabel(t,i.nextSlideMessage),t.on("keydown",this.a11y.onEnterKey)),e&&(this.a11y.makeElFocusable(e),this.a11y.addElRole(e,"button"),this.a11y.addElLabel(e,i.prevSlideMessage),e.on("keydown",this.a11y.onEnterKey)),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.on("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)},destroy:function(){var t,e;this.a11y.liveRegion&&0<this.a11y.liveRegion.length&&this.a11y.liveRegion.remove(),this.navigation&&this.navigation.$nextEl&&(t=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(e=this.navigation.$prevEl),t&&t.off("keydown",this.a11y.onEnterKey),e&&e.off("keydown",this.a11y.onEnterKey),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.off("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)}},tt={init:function(){var t=at();if(this.params.history){if(!t.history||!t.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var e=this.history;e.initialized=!0,e.paths=tt.getPathValues(this.params.url),(e.paths.key||e.paths.value)&&(e.scrollToSlide(0,e.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||t.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){var t=at();this.params.history.replaceState||t.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=tt.getPathValues(this.params.url),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(t){var e=at(),i=(t?new URL(t):e.location).pathname.slice(1).split("/").filter(function(t){return""!==t}),r=i.length;return{key:i[r-2],value:i[r-1]}},setHistory:function(t,e){var i=at();if(this.history.initialized&&this.params.history.enabled){var r;r=this.params.url?new URL(this.params.url):i.location;var n=this.slides.eq(e),a=tt.slugify(n.attr("data-history"));r.pathname.includes(t)||(a=t+"/"+a);var o=i.history.state;o&&o.value===a||(this.params.history.replaceState?i.history.replaceState({value:a},null,a):i.history.pushState({value:a},null,a))}},slugify:function(t){return t.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(t,e,i){if(e)for(var r=0,n=this.slides.length;r<n;r+=1){var a=this.slides.eq(r);if(tt.slugify(a.attr("data-history"))===e&&!a.hasClass(this.params.slideDuplicateClass)){var o=a.index();this.slideTo(o,t,i)}}else this.slideTo(0,t,i)}},et={onHashCange:function(){var t=T();this.emit("hashChange");var e=t.location.hash.replace("#","");if(e!==this.slides.eq(this.activeIndex).attr("data-hash")){var i=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+e+'"]').index();if(void 0===i)return;this.slideTo(i)}},setHash:function(){var t=at(),e=T();if(this.hashNavigation.initialized&&this.params.hashNavigation.enabled)if(this.params.hashNavigation.replaceState&&t.history&&t.history.replaceState)t.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||""),this.emit("hashSet");else{var i=this.slides.eq(this.activeIndex),r=i.attr("data-hash")||i.attr("data-history");e.location.hash=r||"",this.emit("hashSet")}},init:function(){var t=T(),e=at();if(!(!this.params.hashNavigation.enabled||this.params.history&&this.params.history.enabled)){this.hashNavigation.initialized=!0;var i=t.location.hash.replace("#","");if(i)for(var r=0,n=this.slides.length;r<n;r+=1){var a=this.slides.eq(r);if((a.attr("data-hash")||a.attr("data-history"))===i&&!a.hasClass(this.params.slideDuplicateClass)){var o=a.index();this.slideTo(o,0,this.params.runCallbacksOnInit,!0)}}this.params.hashNavigation.watchState&&P(e).on("hashchange",this.hashNavigation.onHashCange)}},destroy:function(){var t=at();this.params.hashNavigation.watchState&&P(t).off("hashchange",this.hashNavigation.onHashCange)}},it={run:function(){var t=this,e=t.slides.eq(t.activeIndex),i=t.params.autoplay.delay;e.attr("data-swiper-autoplay")&&(i=e.attr("data-swiper-autoplay")||t.params.autoplay.delay),clearTimeout(t.autoplay.timeout),t.autoplay.timeout=F(function(){t.params.autoplay.reverseDirection?t.params.loop?(t.loopFix(),t.slidePrev(t.params.speed,!0,!0),t.emit("autoplay")):t.isBeginning?t.params.autoplay.stopOnLastSlide?t.autoplay.stop():(t.slideTo(t.slides.length-1,t.params.speed,!0,!0),t.emit("autoplay")):(t.slidePrev(t.params.speed,!0,!0),t.emit("autoplay")):t.params.loop?(t.loopFix(),t.slideNext(t.params.speed,!0,!0),t.emit("autoplay")):t.isEnd?t.params.autoplay.stopOnLastSlide?t.autoplay.stop():(t.slideTo(0,t.params.speed,!0,!0),t.emit("autoplay")):(t.slideNext(t.params.speed,!0,!0),t.emit("autoplay")),t.params.cssMode&&t.autoplay.running&&t.autoplay.run()},i)},start:function(){return void 0===this.autoplay.timeout&&!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0)},stop:function(){return!!this.autoplay.running&&void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0)},pause:function(t){this.autoplay.running&&(this.autoplay.paused||(this.autoplay.timeout&&clearTimeout(this.autoplay.timeout),this.autoplay.paused=!0,0!==t&&this.params.autoplay.waitForTransition?(this.$wrapperEl[0].addEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].addEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd)):(this.autoplay.paused=!1,this.autoplay.run())))},onVisibilityChange:function(){var t=T();"hidden"===t.visibilityState&&this.autoplay.running&&this.autoplay.pause(),"visible"===t.visibilityState&&this.autoplay.paused&&(this.autoplay.run(),this.autoplay.paused=!1)},onTransitionEnd:function(t){this&&!this.destroyed&&this.$wrapperEl&&t.target===this.$wrapperEl[0]&&(this.$wrapperEl[0].removeEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].removeEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd),this.autoplay.paused=!1,this.autoplay.running?this.autoplay.run():this.autoplay.stop())}},rt={setTranslate:function(){for(var t=this.slides,e=0;e<t.length;e+=1){var i=this.slides.eq(e),r=-i[0].swiperSlideOffset;this.params.virtualTranslate||(r-=this.translate);var n=0;this.isHorizontal()||(n=r,r=0);var a=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:a}).transform("translate3d("+r+"px, "+n+"px, 0px)")}},setTransition:function(t){var i=this,e=i.slides,r=i.$wrapperEl;if(e.transition(t),i.params.virtualTranslate&&0!==t){var n=!1;e.transitionEnd(function(){if(!n&&i&&!i.destroyed){n=!0,i.animating=!1;for(var t=["webkitTransitionEnd","transitionend"],e=0;e<t.length;e+=1)r.trigger(t[e])}})}}},nt={setTranslate:function(){var t,e=this.$el,i=this.$wrapperEl,r=this.slides,n=this.width,a=this.height,o=this.rtlTranslate,s=this.size,l=this.browser,h=this.params.cubeEffect,c=this.isHorizontal(),u=this.virtual&&this.params.virtual.enabled,d=0;h.shadow&&(c?(0===(t=i.find(".swiper-cube-shadow")).length&&(t=P('<div class="swiper-cube-shadow"></div>'),i.append(t)),t.css({height:n+"px"})):0===(t=e.find(".swiper-cube-shadow")).length&&(t=P('<div class="swiper-cube-shadow"></div>'),e.append(t)));for(var p=0;p<r.length;p+=1){var f=r.eq(p),m=p;u&&(m=parseInt(f.attr("data-swiper-slide-index"),10));var g=90*m,E=Math.floor(g/360);o&&(g=-g,E=Math.floor(-g/360));var v=Math.max(Math.min(f[0].progress,1),-1),y=0,T=0,x=0;m%4==0?(y=4*-E*s,x=0):(m-1)%4==0?(y=0,x=4*-E*s):(m-2)%4==0?(y=s+4*E*s,x=s):(m-3)%4==0&&(y=-s,x=3*s+4*s*E),o&&(y=-y),c||(T=y,y=0);var b="rotateX("+(c?0:-g)+"deg) rotateY("+(c?g:0)+"deg) translate3d("+y+"px, "+T+"px, "+x+"px)";if(v<=1&&-1<v&&(d=90*m+90*v,o&&(d=90*-m-90*v)),f.transform(b),h.slideShadows){var R=c?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),w=c?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===R.length&&(R=P('<div class="swiper-slide-shadow-'+(c?"left":"top")+'"></div>'),f.append(R)),0===w.length&&(w=P('<div class="swiper-slide-shadow-'+(c?"right":"bottom")+'"></div>'),f.append(w)),R.length&&(R[0].style.opacity=Math.max(-v,0)),w.length&&(w[0].style.opacity=Math.max(v,0))}}if(i.css({"-webkit-transform-origin":"50% 50% -"+s/2+"px","-moz-transform-origin":"50% 50% -"+s/2+"px","-ms-transform-origin":"50% 50% -"+s/2+"px","transform-origin":"50% 50% -"+s/2+"px"}),h.shadow)if(c)t.transform("translate3d(0px, "+(n/2+h.shadowOffset)+"px, "+-n/2+"px) rotateX(90deg) rotateZ(0deg) scale("+h.shadowScale+")");else{var H=Math.abs(d)-90*Math.floor(Math.abs(d)/90),_=1.5-(Math.sin(2*H*Math.PI/360)/2+Math.cos(2*H*Math.PI/360)/2),S=h.shadowScale,C=h.shadowScale/_,M=h.shadowOffset;t.transform("scale3d("+S+", 1, "+C+") translate3d(0px, "+(a/2+M)+"px, "+-a/2/C+"px) rotateX(-90deg)")}var A=l.isSafari||l.isWebView?-s/2:0;i.transform("translate3d(0px,0,"+A+"px) rotateX("+(this.isHorizontal()?0:d)+"deg) rotateY("+(this.isHorizontal()?-d:0)+"deg)")},setTransition:function(t){var e=this.$el;this.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),this.params.cubeEffect.shadow&&!this.isHorizontal()&&e.find(".swiper-cube-shadow").transition(t)}},st={setTranslate:function(){for(var t=this.slides,e=this.rtlTranslate,i=0;i<t.length;i+=1){var r=t.eq(i),n=r[0].progress;this.params.flipEffect.limitRotation&&(n=Math.max(Math.min(r[0].progress,1),-1));var a=-180*n,o=0,s=-r[0].swiperSlideOffset,l=0;if(this.isHorizontal()?e&&(a=-a):(l=s,o=-a,a=s=0),r[0].style.zIndex=-Math.abs(Math.round(n))+t.length,this.params.flipEffect.slideShadows){var h=this.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),c=this.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===h.length&&(h=P('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),r.append(h)),0===c.length&&(c=P('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),r.append(c)),h.length&&(h[0].style.opacity=Math.max(-n,0)),c.length&&(c[0].style.opacity=Math.max(n,0))}r.transform("translate3d("+s+"px, "+l+"px, 0px) rotateX("+o+"deg) rotateY("+a+"deg)")}},setTransition:function(t){var i=this,e=i.slides,r=i.activeIndex,n=i.$wrapperEl;if(e.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),i.params.virtualTranslate&&0!==t){var a=!1;e.eq(r).transitionEnd(function(){if(!a&&i&&!i.destroyed){a=!0,i.animating=!1;for(var t=["webkitTransitionEnd","transitionend"],e=0;e<t.length;e+=1)n.trigger(t[e])}})}}},lt={setTranslate:function(){for(var t=this.width,e=this.height,i=this.slides,r=this.slidesSizesGrid,n=this.params.coverflowEffect,a=this.isHorizontal(),o=this.translate,s=a?t/2-o:e/2-o,l=a?n.rotate:-n.rotate,h=n.depth,c=0,u=i.length;c<u;c+=1){var d=i.eq(c),p=r[c],f=(s-d[0].swiperSlideOffset-p/2)/p*n.modifier,m=a?l*f:0,g=a?0:l*f,E=-h*Math.abs(f),v=n.stretch;"string"==typeof v&&-1!==v.indexOf("%")&&(v=parseFloat(n.stretch)/100*p);var y=a?0:v*f,T=a?v*f:0,x=1-(1-n.scale)*Math.abs(f);Math.abs(T)<.001&&(T=0),Math.abs(y)<.001&&(y=0),Math.abs(E)<.001&&(E=0),Math.abs(m)<.001&&(m=0),Math.abs(g)<.001&&(g=0),Math.abs(x)<.001&&(x=0);var b="translate3d("+T+"px,"+y+"px,"+E+"px)  rotateX("+g+"deg) rotateY("+m+"deg) scale("+x+")";if(d.transform(b),d[0].style.zIndex=1-Math.abs(Math.round(f)),n.slideShadows){var R=a?d.find(".swiper-slide-shadow-left"):d.find(".swiper-slide-shadow-top"),w=a?d.find(".swiper-slide-shadow-right"):d.find(".swiper-slide-shadow-bottom");0===R.length&&(R=P('<div class="swiper-slide-shadow-'+(a?"left":"top")+'"></div>'),d.append(R)),0===w.length&&(w=P('<div class="swiper-slide-shadow-'+(a?"right":"bottom")+'"></div>'),d.append(w)),R.length&&(R[0].style.opacity=0<f?f:0),w.length&&(w[0].style.opacity=0<-f?-f:0)}}},setTransition:function(t){this.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t)}},ht={init:function(){var t=this.params.thumbs;if(this.thumbs.initialized)return!1;this.thumbs.initialized=!0;var e=this.constructor;return t.swiper instanceof e?(this.thumbs.swiper=t.swiper,ot(this.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),ot(this.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):R(t.swiper)&&(this.thumbs.swiper=new e(ot({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),this.thumbs.swiperCreated=!0),this.thumbs.swiper.$el.addClass(this.params.thumbs.thumbsContainerClass),this.thumbs.swiper.on("tap",this.thumbs.onThumbClick),!0},onThumbClick:function(){var t=this.thumbs.swiper;if(t){var e=t.clickedIndex,i=t.clickedSlide;if(!(i&&P(i).hasClass(this.params.thumbs.slideThumbActiveClass)||null==e)){var r;if(r=t.params.loop?parseInt(P(t.clickedSlide).attr("data-swiper-slide-index"),10):e,this.params.loop){var n=this.activeIndex;this.slides.eq(n).hasClass(this.params.slideDuplicateClass)&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,n=this.activeIndex);var a=this.slides.eq(n).prevAll('[data-swiper-slide-index="'+r+'"]').eq(0).index(),o=this.slides.eq(n).nextAll('[data-swiper-slide-index="'+r+'"]').eq(0).index();r=void 0===a?o:void 0===o?a:o-n<n-a?o:a}this.slideTo(r)}}},update:function(t){var e=this.thumbs.swiper;if(e){var i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():e.params.slidesPerView,r=this.params.thumbs.autoScrollOffset,n=r&&!e.params.loop;if(this.realIndex!==e.realIndex||n){var a,o,s=e.activeIndex;if(e.params.loop){e.slides.eq(s).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,s=e.activeIndex);var l=e.slides.eq(s).prevAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),h=e.slides.eq(s).nextAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index();a=void 0===l?h:void 0===h?l:h-s==s-l?s:h-s<s-l?h:l,o=this.activeIndex>this.previousIndex?"next":"prev"}else o=(a=this.realIndex)>this.previousIndex?"next":"prev";n&&(a+="next"===o?r:-1*r),e.visibleSlidesIndexes&&e.visibleSlidesIndexes.indexOf(a)<0&&(e.params.centeredSlides?a=s<a?a-Math.floor(i/2)+1:a+Math.floor(i/2)-1:s<a&&(a=a-i+1),e.slideTo(a,t?0:void 0))}var c=1,u=this.params.thumbs.slideThumbActiveClass;if(1<this.params.slidesPerView&&!this.params.centeredSlides&&(c=this.params.slidesPerView),this.params.thumbs.multipleActiveThumbs||(c=1),c=Math.floor(c),e.slides.removeClass(u),e.params.loop||e.params.virtual&&e.params.virtual.enabled)for(var d=0;d<c;d+=1)e.$wrapperEl.children('[data-swiper-slide-index="'+(this.realIndex+d)+'"]').addClass(u);else for(var p=0;p<c;p+=1)e.slides.eq(this.realIndex+p).addClass(u)}}},ct=[V,W,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}},create:function(){w(this,{mousewheel:{enabled:!1,lastScrollTime:k(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:j.enable,disable:j.disable,handle:j.handle,handleMouseEnter:j.handleMouseEnter,handleMouseLeave:j.handleMouseLeave,animateSlider:j.animateSlider,releaseScroll:j.releaseScroll}})},on:{init:function(t){!t.params.mousewheel.enabled&&t.params.cssMode&&t.mousewheel.disable(),t.params.mousewheel.enabled&&t.mousewheel.enable()},destroy:function(t){t.params.cssMode&&t.mousewheel.enable(),t.mousewheel.enabled&&t.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){w(this,{navigation:e({},X)})},on:{init:function(t){t.navigation.init(),t.navigation.update()},toEdge:function(t){t.navigation.update()},fromEdge:function(t){t.navigation.update()},destroy:function(t){t.navigation.destroy()},click:function(t,e){var i,r=t.navigation,n=r.$nextEl,a=r.$prevEl;!t.params.navigation.hideOnClick||P(e.target).is(a)||P(e.target).is(n)||(n?i=n.hasClass(t.params.navigation.hiddenClass):a&&(i=a.hasClass(t.params.navigation.hiddenClass)),!0===i?t.emit("navigationShow"):t.emit("navigationHide"),n&&n.toggleClass(t.params.navigation.hiddenClass),a&&a.toggleClass(t.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(t){return t},formatFractionTotal:function(t){return t},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){w(this,{pagination:e({dynamicBulletIndex:0},$)})},on:{init:function(t){t.pagination.init(),t.pagination.render(),t.pagination.update()},activeIndexChange:function(t){!t.params.loop&&void 0!==t.snapIndex||t.pagination.update()},snapIndexChange:function(t){t.params.loop||t.pagination.update()},slidesLengthChange:function(t){t.params.loop&&(t.pagination.render(),t.pagination.update())},snapGridLengthChange:function(t){t.params.loop||(t.pagination.render(),t.pagination.update())},destroy:function(t){t.pagination.destroy()},click:function(t,e){t.params.pagination.el&&t.params.pagination.hideOnClick&&0<t.pagination.$el.length&&!P(e.target).hasClass(t.params.pagination.bulletClass)&&(!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow"):t.emit("paginationHide"),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){w(this,{scrollbar:e({isTouched:!1,timeout:null,dragTimeout:null},q)})},on:{init:function(t){t.scrollbar.init(),t.scrollbar.updateSize(),t.scrollbar.setTranslate()},update:function(t){t.scrollbar.updateSize()},resize:function(t){t.scrollbar.updateSize()},observerUpdate:function(t){t.scrollbar.updateSize()},setTranslate:function(t){t.scrollbar.setTranslate()},setTransition:function(t,e){t.scrollbar.setTransition(e)},destroy:function(t){t.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){w(this,{parallax:e({},Y)})},on:{beforeInit:function(t){t.params.parallax.enabled&&(t.params.watchSlidesProgress=!0,t.originalParams.watchSlidesProgress=!0)},init:function(t){t.params.parallax.enabled&&t.parallax.setTranslate()},setTranslate:function(t){t.params.parallax.enabled&&t.parallax.setTranslate()},setTransition:function(t,e){t.params.parallax.enabled&&t.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var r=this;w(r,{zoom:e({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},K)});var n=1;Object.defineProperty(r.zoom,"scale",{get:function(){return n},set:function(t){if(n!==t){var e=r.zoom.gesture.$imageEl?r.zoom.gesture.$imageEl[0]:void 0,i=r.zoom.gesture.$slideEl?r.zoom.gesture.$slideEl[0]:void 0;r.emit("zoomChange",t,e,i)}n=t}})},on:{init:function(t){t.params.zoom.enabled&&t.zoom.enable()},destroy:function(t){t.zoom.disable()},touchStart:function(t,e){t.zoom.enabled&&t.zoom.onTouchStart(e)},touchEnd:function(t,e){t.zoom.enabled&&t.zoom.onTouchEnd(e)},doubleTap:function(t,e){t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd:function(t){t.zoom.enabled&&t.params.zoom.enabled&&t.zoom.onTransitionEnd()},slideChange:function(t){t.zoom.enabled&&t.params.zoom.enabled&&t.params.cssMode&&t.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){w(this,{lazy:e({initialImageLoaded:!1},Q)})},on:{beforeInit:function(t){t.params.lazy.enabled&&t.params.preloadImages&&(t.params.preloadImages=!1)},init:function(t){t.params.lazy.enabled&&!t.params.loop&&0===t.params.initialSlide&&t.lazy.load()},scroll:function(t){t.params.freeMode&&!t.params.freeModeSticky&&t.lazy.load()},resize:function(t){t.params.lazy.enabled&&t.lazy.load()},scrollbarDragMove:function(t){t.params.lazy.enabled&&t.lazy.load()},transitionStart:function(t){t.params.lazy.enabled&&(t.params.lazy.loadOnTransitionStart||!t.params.lazy.loadOnTransitionStart&&!t.lazy.initialImageLoaded)&&t.lazy.load()},transitionEnd:function(t){t.params.lazy.enabled&&!t.params.lazy.loadOnTransitionStart&&t.lazy.load()},slideChange:function(t){t.params.lazy.enabled&&t.params.cssMode&&t.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){w(this,{controller:e({control:this.params.controller.control},Z)})},on:{update:function(t){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)},resize:function(t){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)},observerUpdate:function(t){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)},setTranslate:function(t,e,i){t.controller.control&&t.controller.setTranslate(e,i)},setTransition:function(t,e,i){t.controller.control&&t.controller.setTransition(e,i)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){w(this,{a11y:e(e({},J),{},{liveRegion:P('<span class="'+this.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')})})},on:{init:function(t){t.params.a11y.enabled&&(t.a11y.init(),t.a11y.updateNavigation())},toEdge:function(t){t.params.a11y.enabled&&t.a11y.updateNavigation()},fromEdge:function(t){t.params.a11y.enabled&&t.a11y.updateNavigation()},paginationUpdate:function(t){t.params.a11y.enabled&&t.a11y.updatePagination()},destroy:function(t){t.params.a11y.enabled&&t.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){w(this,{history:e({},tt)})},on:{init:function(t){t.params.history.enabled&&t.history.init()},destroy:function(t){t.params.history.enabled&&t.history.destroy()},transitionEnd:function(t){t.history.initialized&&t.history.setHistory(t.params.history.key,t.activeIndex)},slideChange:function(t){t.history.initialized&&t.params.cssMode&&t.history.setHistory(t.params.history.key,t.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){w(this,{hashNavigation:e({initialized:!1},et)})},on:{init:function(t){t.params.hashNavigation.enabled&&t.hashNavigation.init()},destroy:function(t){t.params.hashNavigation.enabled&&t.hashNavigation.destroy()},transitionEnd:function(t){t.hashNavigation.initialized&&t.hashNavigation.setHash()},slideChange:function(t){t.hashNavigation.initialized&&t.params.cssMode&&t.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){w(this,{autoplay:e(e({},it),{},{running:!1,paused:!1})})},on:{init:function(t){t.params.autoplay.enabled&&(t.autoplay.start(),T().addEventListener("visibilitychange",t.autoplay.onVisibilityChange))},beforeTransitionStart:function(t,e,i){t.autoplay.running&&(i||!t.params.autoplay.disableOnInteraction?t.autoplay.pause(e):t.autoplay.stop())},sliderFirstMove:function(t){t.autoplay.running&&(t.params.autoplay.disableOnInteraction?t.autoplay.stop():t.autoplay.pause())},touchEnd:function(t){t.params.cssMode&&t.autoplay.paused&&!t.params.autoplay.disableOnInteraction&&t.autoplay.run()},destroy:function(t){t.autoplay.running&&t.autoplay.stop(),T().removeEventListener("visibilitychange",t.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){w(this,{fadeEffect:e({},rt)})},on:{beforeInit:function(t){if("fade"===t.params.effect){t.classNames.push(t.params.containerModifierClass+"fade");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};ot(t.params,e),ot(t.originalParams,e)}},setTranslate:function(t){"fade"===t.params.effect&&t.fadeEffect.setTranslate()},setTransition:function(t,e){"fade"===t.params.effect&&t.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){w(this,{cubeEffect:e({},nt)})},on:{beforeInit:function(t){if("cube"===t.params.effect){t.classNames.push(t.params.containerModifierClass+"cube"),t.classNames.push(t.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};ot(t.params,e),ot(t.originalParams,e)}},setTranslate:function(t){"cube"===t.params.effect&&t.cubeEffect.setTranslate()},setTransition:function(t,e){"cube"===t.params.effect&&t.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){w(this,{flipEffect:e({},st)})},on:{beforeInit:function(t){if("flip"===t.params.effect){t.classNames.push(t.params.containerModifierClass+"flip"),t.classNames.push(t.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};ot(t.params,e),ot(t.originalParams,e)}},setTranslate:function(t){"flip"===t.params.effect&&t.flipEffect.setTranslate()},setTransition:function(t,e){"flip"===t.params.effect&&t.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){w(this,{coverflowEffect:e({},lt)})},on:{beforeInit:function(t){"coverflow"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"coverflow"),t.classNames.push(t.params.containerModifierClass+"3d"),t.params.watchSlidesProgress=!0,t.originalParams.watchSlidesProgress=!0)},setTranslate:function(t){"coverflow"===t.params.effect&&t.coverflowEffect.setTranslate()},setTransition:function(t,e){"coverflow"===t.params.effect&&t.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){w(this,{thumbs:e({swiper:null,initialized:!1},ht)})},on:{beforeInit:function(t){var e=t.params.thumbs;e&&e.swiper&&(t.thumbs.init(),t.thumbs.update(!0))},slideChange:function(t){t.thumbs.swiper&&t.thumbs.update()},update:function(t){t.thumbs.swiper&&t.thumbs.update()},resize:function(t){t.thumbs.swiper&&t.thumbs.update()},observerUpdate:function(t){t.thumbs.swiper&&t.thumbs.update()},setTransition:function(t,e){var i=t.thumbs.swiper;i&&i.setTransition(e)},beforeDestroy:function(t){var e=t.thumbs.swiper;e&&t.thumbs.swiperCreated&&e&&e.destroy()}}}];return I.use(ct),I}),function(d){"use strict";var p=null,f=null;!function(){var n,a,o,s,t,e=["webkit","moz","o","ms"],i=d.document.createElement("div"),r=-1;for(r=0;r<e.length&&!d.requestAnimationFrame;r++)d.requestAnimationFrame=d[e[r]+"RequestAnimationFrame"];function l(){}void 0===i.nextElementSibling&&Object.defineProperty(d.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(t=d.Element.prototype).matches=t.matches||t.machesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(s=Object.prototype.hasOwnProperty,n=!{toString:null}.propertyIsEnumerable("toString"),o=(a=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],i="",r=-1;if("object"!=typeof t&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(i in t)s.call(t,i)&&e.push(i);if(n)for(r=0;r<o;r++)s.call(t,a[r])&&e.push(a[r]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");l.prototype=t||{};var i=new l;return l.prototype=null,void 0!==e&&Object.defineProperties(i,e),null===t&&(i.__proto__=null),i}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,i,r,n;if(null===this)throw new TypeError;if(0==(n=(r=Object(this)).length>>>0))return-1;if(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),n<=e)return-1;for(i=0<=e?e:Math.max(n-Math.abs(e),0);i<n;i++)if(i in r&&r[i]===t)return i;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,i,r,n;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),r=function(){},n=function(){return i.apply(this instanceof r?this:t,e.concat(Array.prototype.slice.call(arguments)))},(i=this).prototype&&(r.prototype=this.prototype),n.prototype=new r,n}),d.Element.prototype.dispatchEvent||(d.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}})}(),(p=function(t,e,i){var r=null,n=!1,a=null,o=null,s=null,l=[],h="",c=[],u=-1;if(s=i||d.document,(n=arguments[3])&&(n="boolean"==typeof n),"string"==typeof t)c=s.querySelectorAll(t);else if(t&&"object"==typeof t&&f.isElement(t,s))c=[t];else{if(!t||"object"!=typeof t||!t.length)throw new Error(p.messages.errorFactoryInvalidContainer());c=t}if(c.length<1)throw new Error(p.messages.errorFactoryContainerNotFound());for(u=0;(r=c[u])&&(!(0<u)||n);u++)r.id?h=r.id:(h="MixItUp"+f.randomHex(),r.id=h),p.instances[h]instanceof p.Mixer?(a=p.instances[h],(!e||e&&e.debug&&!1!==e.debug.showWarnings)&&console.warn(p.messages.warningFactoryPreexistingInstance())):((a=new p.Mixer).attach(r,s,h,e),p.instances[h]=a),o=new p.Facade(a),e&&e.debug&&e.debug.enable?l.push(a):l.push(o);return n?new p.Collection(l):l[0]}).use=function(t){p.Base.prototype.callActions.call(p,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===p.extensions[t.NAME]&&(t(p),p.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(p.libraries.$=t),p.Base.prototype.callActions.call(p,"afterUse",arguments)},p.instances={},p.extensions={},p.libraries={},f={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){if(this.hasClass(t,e)){var i=new RegExp("(\\s|^)"+e+"(\\s|$)");t.className=t.className.replace(i," ").trim()}},extend:function(e,t,i,r){var n=[],a="",o=-1;i=i||!1,r=r||!1;try{if(Array.isArray(t))for(o=0;o<t.length;o++)n.push(o);else t&&(n=Object.keys(t));for(o=0;o<n.length;o++)a=n[o],!i||"object"!=typeof t[a]||this.isElement(t[a])?e[a]=t[a]:(Array.isArray(t[a])?e[a]||(e[a]=[]):e[a]||(e[a]={}),this.extend(e[a],t[a],i,r))}catch(t){if(!r)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var i=null,r="",n="",a="",o="",s="",l=-1,h=-1;if(t instanceof TypeError&&(i=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(s in r=i[1],e){for(h=0;h<r.length&&r.charAt(h)===s.charAt(h);)h++;l<h&&(l=h,o=s)}throw 1<l&&(a=p.messages.errorConfigInvalidPropertySuggestion({probableMatch:o})),n=p.messages.errorConfigInvalidProperty({erroneous:r,suggestion:a}),new TypeError(n)}throw t},template:function(r){for(var t=/\${([\w]*)}/g,n={},e=null;e=t.exec(r);)n[e[1]]=new RegExp("\\${"+e[1]+"}","g");return function(t){var e="",i=r;for(e in t=t||{},n)i=i.replace(n[e],void 0!==t[e]?t[e]:"");return i}},on:function(t,e,i,r){t&&(t.addEventListener?t.addEventListener(e,i,r):t.attachEvent&&(t["e"+e+i]=i,t[e+i]=function(){t["e"+e+i](d.event)},t.attachEvent("on"+e,t[e+i])))},off:function(t,e,i){t&&(t.removeEventListener?t.removeEventListener(e,i,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+i]),t[e+i]=null))},getCustomEvent:function(t,e,i){var r=null;return i=i||d.document,"function"==typeof d.CustomEvent?r=new d.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof i.createEvent?(r=i.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((r=i.createEventObject()).type=t,r.returnValue=!1,r.cancelBubble=!1,r.detail=e),r},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var i=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++i;return i},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||d.document,!!(d.HTMLElement&&t instanceof d.HTMLElement)||!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName},createElement:function(t,e){var i=null,r=null;for(i=(e=e||d.document).createDocumentFragment(),(r=e.createElement("div")).innerHTML=t.trim();r.firstChild;)i.appendChild(r.firstChild);return i},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var i=t.length;if(i!==e.length)return!1;for(;i--;)if(t[i]!==e[i])return!1;return!0},deepEquals:function(t,e){var i;if("object"==typeof t&&t&&"object"==typeof e&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(i in t)if(!e.hasOwnProperty(i)||!this.deepEquals(t[i],e[i]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e=t.slice(),i=e.length,r=i,n=-1,a=[];r--;)n=~~(Math.random()*i),a=e[r],e[r]=e[n],e[n]=a;return e},arrayFromList:function(e){var i,r;try{return Array.prototype.slice.call(e)}catch(t){for(i=[],r=0;r<e.length;r++)i.push(e[r]);return i}},debounce:function(n,a,o){var s;return function(){var t,e=this,i=arguments,r=o&&!s;t=function(){s=null,o||n.apply(e,i)},clearTimeout(s),s=setTimeout(t,a),r&&n.apply(e,i)}},position:function(t){for(var e=0,i=0,r=t;t;)e-=t.scrollLeft,i-=t.scrollTop,t===r&&(e+=t.offsetLeft,i+=t.offsetTop,r=t.offsetParent),t=t.parentElement;return{x:e,y:i}},getHypotenuse:function(t,e){var i=t.x-e.x,r=t.y-e.y;return i=i<0?-1*i:i,r=r<0?-1*r:r,Math.sqrt(Math.pow(i,2)+Math.pow(r,2))},getIntersectionRatio:function(t,e){var i,r=t.width*t.height;return i=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left)),Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*i/r},closestParent:function(t,e,i,r){var n=t.parentNode;if(r=r||d.document,i&&t.matches(e))return t;for(;n&&n!=r.body;){if(n.matches&&n.matches(e))return n;if(!n.parentNode)return null;n=n.parentNode}return null},children:function(t,e,i){var r=[],n="";return i=i||d.doc,t&&(t.id||(n="Temp"+this.randomHexKey(),t.id=n),r=i.querySelectorAll("#"+t.id+" > "+e),n&&t.removeAttribute("id")),r},clean:function(t){var e=[],i=-1;for(i=0;i<t.length;i++)""!==t[i]&&e.push(t[i]);return e},defer:function(t){var e=null,i=null,r=null;return i=new this.Deferred,p.features.has.promises?i.promise=new Promise(function(t,e){i.resolve=t,i.reject=e}):(r=d.jQuery||t.$)&&"function"==typeof r.Deferred?(e=r.Deferred(),i.promise=e.promise(),i.resolve=e.resolve,i.reject=e.reject):d.console&&console.warn(p.messages.warningNoPromiseImplementation()),i},all:function(t,e){var i=null;return p.features.has.promises?Promise.all(t):(i=d.jQuery||e.$)&&"function"==typeof i.when?i.when.apply(i,t).done(function(){return arguments}):(d.console&&console.warn(p.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,i){var r=-1,n="";if(f.dashCase(e)in t.style)return"";for(r=0;n=i[r];r++)if(n+e in t.style)return n.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"==typeof t.body?t:d.document,{scrollTop:d.pageYOffset,scrollLeft:d.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){var e=null;return!!t.offsetParent||"fixed"===(e=d.getComputedStyle(t)).position&&"hidden"!==e.visibility&&"0"!==e.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){var i=t.split("."),r=e.split("."),n=-1,a=-1,o=-1;for(o=0;o<i.length;o++){if(n=parseInt(i[o].replace(/[^\d.]/g,"")),(a=parseInt(r[o].replace(/[^\d.]/g,"")||0))<n)return!1;if(n<a)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=f.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,i){var r="";return(r+=t.block).length&&(r+=t.delineatorElement),r+=t["element"+this.pascalCase(e)],i?(r.length&&(r+=t.delineatorModifier),r+=i):r},getProperty:function(t,e){var i,r=e.split("."),n="",a=0;if(!e)return t;for(i=function(t){return t?t[n]:null};a<r.length;)n=r[a],t=i(t),a++;return void 0!==t?t:null}},p.h=f,p.Base=function(){},p.Base.prototype={constructor:p.Base,callActions:function(t,e){var i=this.constructor.actions[t],r="";if(i&&!f.isEmptyObject(i))for(r in i)i[r].apply(this,e)},callFilters:function(t,e,i){var r=this.constructor.filters[t],n=e,a="";if(!r||f.isEmptyObject(r))return n;for(a in i=i||[],r)(i=f.arrayFromList(i)).unshift(n),n=r[a].apply(this,i);return n}},p.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){f.extend(this.prototype,t)},this.registerAction=function(t,e,i){(this.actions[t]=this.actions[t]||{})[e]=i},this.registerFilter=function(t,e,i){(this.filters[t]=this.filters[t]||{})[e]=i}},p.Features=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new p.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},p.BaseStatic.call(p.Features),p.Features.prototype=Object.create(p.Base.prototype),f.extend(p.Features.prototype,{constructor:p.Features,init:function(){this.callActions("beforeInit",arguments),this.canary=document.createElement("div"),this.setPrefixes(),this.runTests(),this.callActions("beforeInit",arguments)},runTests:function(){this.callActions("beforeRunTests",arguments),this.has.promises="function"==typeof d.Promise,this.has.transitions="unsupported"!==this.transitionPrefix,this.callActions("afterRunTests",arguments),f.freeze(this.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=f.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=f.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=f.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+f.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+f.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),p.Has=function(){this.transitions=!1,this.promises=!1,f.seal(this)},p.features=new p.Features,p.features.init(),p.ConfigAnimation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigAnimation),p.ConfigAnimation.prototype=Object.create(p.Base.prototype),p.ConfigAnimation.prototype.constructor=p.ConfigAnimation,p.ConfigBehavior=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigBehavior),p.ConfigBehavior.prototype=Object.create(p.Base.prototype),p.ConfigBehavior.prototype.constructor=p.ConfigBehavior,p.ConfigCallbacks=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigCallbacks),p.ConfigCallbacks.prototype=Object.create(p.Base.prototype),p.ConfigCallbacks.prototype.constructor=p.ConfigCallbacks,p.ConfigControls=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigControls),p.ConfigControls.prototype=Object.create(p.Base.prototype),p.ConfigControls.prototype.constructor=p.ConfigControls,p.ConfigClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigClassNames),p.ConfigClassNames.prototype=Object.create(p.Base.prototype),p.ConfigClassNames.prototype.constructor=p.ConfigClassNames,p.ConfigData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigData),p.ConfigData.prototype=Object.create(p.Base.prototype),p.ConfigData.prototype.constructor=p.ConfigData,p.ConfigDebug=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigDebug),p.ConfigDebug.prototype=Object.create(p.Base.prototype),p.ConfigDebug.prototype.constructor=p.ConfigDebug,p.ConfigLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigLayout),p.ConfigLayout.prototype=Object.create(p.Base.prototype),p.ConfigLayout.prototype.constructor=p.ConfigLayout,p.ConfigLoad=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigLoad),p.ConfigLoad.prototype=Object.create(p.Base.prototype),p.ConfigLoad.prototype.constructor=p.ConfigLoad,p.ConfigSelectors=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigSelectors),p.ConfigSelectors.prototype=Object.create(p.Base.prototype),p.ConfigSelectors.prototype.constructor=p.ConfigSelectors,p.ConfigRender=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigRender),p.ConfigRender.prototype=Object.create(p.Base.prototype),p.ConfigRender.prototype.constructor=p.ConfigRender,p.ConfigTemplates=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigTemplates),p.ConfigTemplates.prototype=Object.create(p.Base.prototype),p.ConfigTemplates.prototype.constructor=p.ConfigTemplates,p.Config=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.animation=new p.ConfigAnimation,this.behavior=new p.ConfigBehavior,this.callbacks=new p.ConfigCallbacks,this.controls=new p.ConfigControls,this.classNames=new p.ConfigClassNames,this.data=new p.ConfigData,this.debug=new p.ConfigDebug,this.layout=new p.ConfigLayout,this.load=new p.ConfigLoad,this.selectors=new p.ConfigSelectors,this.render=new p.ConfigRender,this.templates=new p.ConfigTemplates,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Config),p.Config.prototype=Object.create(p.Base.prototype),p.Config.prototype.constructor=p.Config,p.MixerDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.MixerDom),p.MixerDom.prototype=Object.create(p.Base.prototype),p.MixerDom.prototype.constructor=p.MixerDom,p.UiClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.UiClassNames),p.UiClassNames.prototype=Object.create(p.Base.prototype),p.UiClassNames.prototype.constructor=p.UiClassNames,p.CommandDataset=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandDataset),p.CommandDataset.prototype=Object.create(p.Base.prototype),p.CommandDataset.prototype.constructor=p.CommandDataset,p.CommandMultimix=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandMultimix),p.CommandMultimix.prototype=Object.create(p.Base.prototype),p.CommandMultimix.prototype.constructor=p.CommandMultimix,p.CommandFilter=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandFilter),p.CommandFilter.prototype=Object.create(p.Base.prototype),p.CommandFilter.prototype.constructor=p.CommandFilter,p.CommandSort=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandSort),p.CommandSort.prototype=Object.create(p.Base.prototype),p.CommandSort.prototype.constructor=p.CommandSort,p.CommandInsert=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandInsert),p.CommandInsert.prototype=Object.create(p.Base.prototype),p.CommandInsert.prototype.constructor=p.CommandInsert,p.CommandRemove=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandRemove),p.CommandRemove.prototype=Object.create(p.Base.prototype),p.CommandRemove.prototype.constructor=p.CommandRemove,p.CommandChangeLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandChangeLayout),p.CommandChangeLayout.prototype=Object.create(p.Base.prototype),p.CommandChangeLayout.prototype.constructor=p.CommandChangeLayout,p.ControlDefinition=function(t,e,i,r){p.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=i||!1,this.parent=r||"",this.callActions("afterConstruct"),f.freeze(this),f.seal(this)},p.BaseStatic.call(p.ControlDefinition),p.ControlDefinition.prototype=Object.create(p.Base.prototype),p.ControlDefinition.prototype.constructor=p.ControlDefinition,p.controlDefinitions=[],p.controlDefinitions.push(new p.ControlDefinition("multimix","[data-filter][data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("filter","[data-filter]")),p.controlDefinitions.push(new p.ControlDefinition("sort","[data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("toggle","[data-toggle]")),p.Control=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new p.UiClassNames,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Control),p.Control.prototype=Object.create(p.Base.prototype),f.extend(p.Control.prototype,{constructor:p.Control,init:function(t,e,i){var r=this;if(this.callActions("beforeInit",arguments),r.el=t,r.type=e,r.selector=i,r.selector)r.status="live";else switch(r.canDisable="boolean"==typeof r.el.disable,r.type){case"filter":r.filter=r.el.getAttribute("data-filter");break;case"toggle":r.filter=r.el.getAttribute("data-toggle");break;case"sort":r.sort=r.el.getAttribute("data-sort");break;case"multimix":r.filter=r.el.getAttribute("data-filter"),r.sort=r.el.getAttribute("data-sort")}r.bindClick(),p.controls.push(r),this.callActions("afterInit",arguments)},isBound:function(t){var e;return this.callActions("beforeIsBound",arguments),e=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",e,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=-1;this.callActions("beforeRemoveBinding",arguments),-1<(e=this.bound.indexOf(t))&&this.bound.splice(e,1),this.bound.length<1&&(this.unbindClick(),e=p.controls.indexOf(this),p.controls.splice(e,1),"active"===this.status&&this.renderStatus(this.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},f.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),f.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e=this,i=null,r=null,n=!1,a={},o=null,s=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,r=e.bound[0],i=e.selector?f.closestParent(t.target,r.config.selectors.control+e.selector,!0,r.dom.document):e.el){switch(e.type){case"filter":a.filter=e.filter||i.getAttribute("data-filter");break;case"sort":a.sort=e.sort||i.getAttribute("data-sort");break;case"multimix":a.filter=e.filter||i.getAttribute("data-filter"),a.sort=e.sort||i.getAttribute("data-sort");break;case"toggle":a.filter=e.filter||i.getAttribute("data-toggle"),n="live"===e.status?f.hasClass(i,e.classNames.active):"active"===e.status}for(l=0;l<e.bound.length;l++)o=new p.CommandMultimix,f.extend(o,a),s.push(o);for(s=e.callFilters("commandsHandleClick",s,arguments),e.pending=e.bound.length,l=0;r=e.bound[l];l++)(a=s[l])&&(r.lastClicked||(r.lastClicked=i),p.events.fire("mixClick",r.dom.container,{state:r.state,instance:r,originalEvent:t,control:r.lastClicked},r.dom.document),"function"==typeof r.config.callbacks.onMixClick&&!1===r.config.callbacks.onMixClick.call(r.lastClicked,r.state,t,r)||("toggle"===e.type?n?r.toggleOff(a.filter):r.toggleOn(a.filter):r.multimix(a)));this.callActions("afterHandleClick",arguments)}else e.callActions("afterHandleClick",arguments)},update:function(t,e){var i=this,r=new p.CommandMultimix;i.callActions("beforeUpdate",arguments),i.pending--,i.pending=Math.max(0,i.pending),0<i.pending||("live"===i.status?i.updateLive(t,e):(r.sort=i.sort,r.filter=i.filter,i.callFilters("actionsUpdate",r,arguments),i.parseStatusChange(i.el,t,r,e)),i.callActions("afterUpdate",arguments))},updateLive:function(t,e){var i=null,r=null,n=null,a=-1;if(this.callActions("beforeUpdateLive",arguments),this.el){for(i=this.el.querySelectorAll(this.selector),a=0;n=i[a];a++){switch(r=new p.CommandMultimix,this.type){case"filter":r.filter=n.getAttribute("data-filter");break;case"sort":r.sort=n.getAttribute("data-sort");break;case"multimix":r.filter=n.getAttribute("data-filter"),r.sort=n.getAttribute("data-sort");break;case"toggle":r.filter=n.getAttribute("data-toggle")}r=this.callFilters("actionsUpdateLive",r,arguments),this.parseStatusChange(n,t,r,e)}this.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,i,r){var n=this,a="",o=-1;switch(n.callActions("beforeParseStatusChange",arguments),n.type){case"filter":e.filter===i.filter?n.renderStatus(t,"active"):n.renderStatus(t,"inactive");break;case"multimix":e.sort===i.sort&&e.filter===i.filter?n.renderStatus(t,"active"):n.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(a=e.sort.replace(/:asc/g,"")),e.sort===i.sort||a===i.sort?n.renderStatus(t,"active"):n.renderStatus(t,"inactive");break;case"toggle":for(r.length<1&&n.renderStatus(t,"inactive"),e.filter===i.filter&&n.renderStatus(t,"active"),o=0;o<r.length;o++){if(r[o]===i.filter){n.renderStatus(t,"active");break}n.renderStatus(t,"inactive")}}n.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var i=this;switch(i.callActions("beforeRenderStatus",arguments),e){case"active":f.addClass(t,i.classNames.active),f.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"inactive":f.removeClass(t,i.classNames.active),f.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"disabled":i.canDisable&&(i.el.disabled=!0),f.addClass(t,i.classNames.disabled),f.removeClass(t,i.classNames.active)}"live"!==i.status&&(i.status=e),i.callActions("afterRenderStatus",arguments)}}),p.controls=[],p.StyleData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new p.TransformData,this.translateX=new p.TransformData,this.translateY=new p.TransformData,this.translateZ=new p.TransformData,this.rotateX=new p.TransformData,this.rotateY=new p.TransformData,this.rotateZ=new p.TransformData,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.StyleData),p.StyleData.prototype=Object.create(p.Base.prototype),p.StyleData.prototype.constructor=p.StyleData,p.TransformData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TransformData),p.TransformData.prototype=Object.create(p.Base.prototype),p.TransformData.prototype.constructor=p.TransformData,p.TransformDefaults=function(){p.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TransformDefaults),p.TransformDefaults.prototype=Object.create(p.StyleData.prototype),p.TransformDefaults.prototype.constructor=p.TransformDefaults,p.transformDefaults=new p.TransformDefaults,p.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},p.Events=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Events),p.Events.prototype=Object.create(p.Base.prototype),p.Events.prototype.constructor=p.Events,p.Events.prototype.fire=function(t,e,i,r){var n,a=new p.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');a.state=new p.State,f.extend(a.state,i.state),i.futureState&&(a.futureState=new p.State,f.extend(a.futureState,i.futureState)),a.instance=i.instance,i.originalEvent&&(a.originalEvent=i.originalEvent),n=f.getCustomEvent(t,a,r),this.callFilters("eventFire",n,arguments),e.dispatchEvent(n)},p.events=new p.Events,p.QueueItem=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.QueueItem),p.QueueItem.prototype=Object.create(p.Base.prototype),p.QueueItem.prototype.constructor=p.QueueItem,p.Mixer=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.config=new p.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new p.MixerDom,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Mixer),p.Mixer.prototype=Object.create(p.Base.prototype),f.extend(p.Mixer.prototype,{constructor:p.Mixer,attach:function(t,e,i,r){var n=this,a=null,o=-1;for(n.callActions("beforeAttach",arguments),n.id=i,r&&f.extend(n.config,r,!0,!0),n.sanitizeConfig(),n.cacheDom(t,e),n.config.layout.containerClassName&&f.addClass(n.dom.container,n.config.layout.containerClassName),p.features.has.transitions||(n.config.animation.enable=!1),void 0===d.console&&(n.config.debug.showWarnings=!1),n.config.data.uidKey&&(n.config.controls.enable=!1),n.indexTargets(),n.state=n.getInitialState(),o=0;a=n.lastOperation.toHide[o];o++)a.hide();n.config.controls.enable&&(n.initControls(),n.buildToggleArray(null,n.state),n.updateControls({filter:n.state.activeFilter,sort:n.state.activeSort})),n.parseEffects(),n.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new p.State,i=new p.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(p.messages.errorConfigDataUidKeyNotSet());i.startDataset=i.newDataset=e.activeDataset=t.config.load.dataset.slice(),i.startContainerClassName=i.newContainerClassName=e.activeContainerClassName,i.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(i.newSort=e.activeSort,t.sortOperation(i),t.printSort(!1,i),t.targets=i.newOrder):i.startOrder=i.newOrder=t.targets,i.startFilter=i.newFilter=e.activeFilter,i.startSort=i.newSort=e.activeSort,i.startContainerClassName=i.newContainerClassName=e.activeContainerClassName,"all"===i.newFilter.selector?i.newFilter.selector=t.config.selectors.target:"none"===i.newFilter.selector&&(i.newFilter.selector="");return i=t.callFilters("operationGetInitialState",i,[e]),(t.lastOperation=i).newFilter&&t.filterOperation(i),t.buildState(i)},cacheDom:function(t,e){this.callActions("beforeCacheDom",arguments),this.dom.document=e,this.dom.body=this.dom.document.querySelector("body"),this.dom.container=t,this.dom.parent=t,this.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e=this,i=null,r=null,n=-1;if(e.callActions("beforeIndexTargets",arguments),e.dom.targets=e.config.layout.allowNestedTargets?e.dom.container.querySelectorAll(e.config.selectors.target):f.children(e.dom.container,e.config.selectors.target,e.dom.document),e.dom.targets=f.arrayFromList(e.dom.targets),e.targets=[],(t=e.config.load.dataset)&&t.length!==e.dom.targets.length)throw new Error(p.messages.errorDatasetPrerenderedMismatch());if(e.dom.targets.length){for(n=0;r=e.dom.targets[n];n++)(i=new p.Target).init(r,e,t?t[n]:void 0),i.isInDom=!0,e.targets.push(i);e.dom.parent=e.dom.targets[0].parentElement===e.dom.container?e.dom.container:e.dom.targets[0].parentElement}e.origOrder=e.targets,e.callActions("afterIndexTargets",arguments)},initControls:function(){var t=this,e="",i=null,r=null,n=null,a=null,o=null,s=-1,l=-1;switch(t.callActions("beforeInitControls",arguments),t.config.controls.scope){case"local":n=t.dom.container;break;case"global":n=t.dom.document;break;default:throw new Error(p.messages.errorConfigInvalidControlsScope())}for(s=0;e=p.controlDefinitions[s];s++)if(t.config.controls.live||e.live){if(e.parent){if(!(a=t.dom[e.parent])||a.length<0)continue;"number"!=typeof a.length&&(a=[a])}else a=[n];for(l=0;r=a[l];l++)o=t.getControl(r,e.type,e.selector),t.controls.push(o)}else for(i=n.querySelectorAll(t.config.selectors.control+e.selector),l=0;r=i[l];l++)(o=t.getControl(r,e.type,""))&&t.controls.push(o);t.callActions("afterInitControls",arguments)},getControl:function(t,e,i){var r=this,n=null,a=-1;if(r.callActions("beforeGetControl",arguments),!i)for(a=0;n=p.controls[a];a++){if(n.el===t&&n.isBound(r))return r.callFilters("controlGetControl",null,arguments);if(n.el===t&&n.type===e&&n.selector===i)return n.addBinding(r),r.callFilters("controlGetControl",n,arguments)}return(n=new p.Control).init(t,e,i),n.classNames.base=f.getClassname(r.config.classNames,e),n.classNames.active=f.getClassname(r.config.classNames,e,r.config.classNames.modifierActive),n.classNames.disabled=f.getClassname(r.config.classNames,e,r.config.classNames.modifierDisabled),n.addBinding(r),r.callFilters("controlGetControl",n,arguments)},getToggleSelector:function(){var t="or"===this.config.controls.toggleLogic?", ":"",e="";return this.callActions("beforeGetToggleSelector",arguments),this.toggleArray=f.clean(this.toggleArray),""===(e=this.toggleArray.join(t))&&(e=this.config.controls.toggleDefault),this.callFilters("selectorGetToggleSelector",e,arguments)},buildToggleArray:function(t,e){var i="";if(this.callActions("beforeBuildToggleArray",arguments),t&&t.filter)i=t.filter.selector.replace(/\s/g,"");else{if(!e)return;i=e.activeFilter.selector.replace(/\s/g,"")}i!==this.config.selectors.target&&"all"!==i||(i=""),"or"===this.config.controls.toggleLogic?this.toggleArray=i.split(","):this.toggleArray=this.splitCompoundSelector(i),this.toggleArray=f.clean(this.toggleArray),this.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),i=[],r="",n=-1;for(""===e[0]&&e.shift(),n=0;n<e.length;n++)n%2==0&&(r=""),r+=e[n],n%2!=0&&i.push(r);return i},updateControls:function(t){var e=null,i=new p.CommandMultimix,r=-1;for(this.callActions("beforeUpdateControls",arguments),t.filter?i.filter=t.filter.selector:i.filter=this.state.activeFilter.selector,t.sort?i.sort=this.buildSortString(t.sort):i.sort=this.buildSortString(this.state.activeSort),i.filter===this.config.selectors.target&&(i.filter="all"),""===i.filter&&(i.filter="none"),f.freeze(i),r=0;e=this.controls[r];r++)e.update(i,this.toggleArray);this.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var i,r=this,n=-1,a=null,o=null,s=null,l=-1;if(r.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),i=r.getNextSibling(t.index,t.sibling,t.position),a=r.dom.document.createDocumentFragment(),n=i?f.index(i,r.config.selectors.target):r.targets.length,t.collection){for(l=0;s=t.collection[l];l++){if(-1<r.dom.targets.indexOf(s))throw new Error(p.messages.errorInsertPreexistingElement());s.style.display="none",a.appendChild(s),a.appendChild(r.dom.document.createTextNode(" ")),f.isElement(s,r.dom.document)&&s.matches(r.config.selectors.target)&&((o=new p.Target).init(s,r),o.isInDom=!0,r.targets.splice(n,0,o),n++)}r.dom.parent.insertBefore(a,i)}e.startOrder=r.origOrder=r.targets,r.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,i){var r=this,n=null;return t=Math.max(t,0),e&&"before"===i?n=e:e&&"after"===i?n=e.nextElementSibling||null:0<r.targets.length&&void 0!==t?n=t<r.targets.length||!r.targets.length?r.targets[t].dom.el:r.targets[r.targets.length-1].dom.el.nextElementSibling:0===r.targets.length&&0<r.dom.parent.children.length&&(r.config.layout.siblingAfter?n=r.config.layout.siblingAfter:r.config.layout.siblingBefore?n=r.config.layout.siblingBefore.nextElementSibling:r.dom.parent.children[0]),r.callFilters("elementGetNextSibling",n,arguments)},filterOperation:function(t){var e,i=!1,r=-1,n=null,a=-1;for(this.callActions("beforeFilterOperation",arguments),e=t.newFilter.action,a=0;n=t.newOrder[a];a++)i=t.newFilter.collection?-1<t.newFilter.collection.indexOf(n.dom.el):""!==t.newFilter.selector&&n.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(i,n,e,t);if(t.toRemove.length)for(a=0;n=t.show[a];a++)-1<t.toRemove.indexOf(n)&&(t.show.splice(a,1),-1<(r=t.toShow.indexOf(n))&&t.toShow.splice(r,1),t.toHide.push(n),t.hide.push(n),a--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,i,r){var n,a=Array.prototype.slice.call(arguments,1);n=this.callFilters("testResultEvaluateHideShow",t,a),this.callActions("beforeEvaluateHideShow",arguments),!0===n&&"show"===i||!1===n&&"hide"===i?(r.show.push(e),e.isShown||r.toShow.push(e)):(r.hide.push(e),e.isShown&&r.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(i){var r=this,t=[],e=null,n=null,a=-1;if(r.callActions("beforeSortOperation",arguments),i.startOrder=r.targets,i.newSort.collection){for(t=[],a=0;n=i.newSort.collection[a];a++){if(r.dom.targets.indexOf(n)<0)throw new Error(p.messages.errorSortNonExistentElement());(e=new p.Target).init(n,r),e.isInDom=!0,t.push(e)}i.newOrder=t}else"random"===i.newSort.order?i.newOrder=f.arrayShuffle(i.startOrder):""===i.newSort.attribute?(i.newOrder=r.origOrder.slice(),"desc"===i.newSort.order&&i.newOrder.reverse()):(i.newOrder=i.startOrder.slice(),i.newOrder.sort(function(t,e){return r.compare(t,e,i.newSort)}));f.isEqualArray(i.newOrder,i.startOrder)&&(i.willSort=!1),r.callActions("afterSortOperation",arguments)},compare:function(t,e,i){var r=i.order,n=this.getAttributeValue(t,i.attribute),a=this.getAttributeValue(e,i.attribute);return isNaN(1*n)||isNaN(1*a)?(n=n.toLowerCase(),a=a.toLowerCase()):(n*=1,a*=1),n<a?"asc"===r?-1:1:a<n?"asc"===r?1:-1:n===a&&i.next?this.compare(t,e,i.next):0},getAttributeValue:function(t,e){var i;return null===(i=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(p.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",i||0,arguments)},printSort:function(t,e){var i,r=t?e.newOrder:e.startOrder,n=t?e.startOrder:e.newOrder,a=r.length?r[r.length-1].dom.el.nextElementSibling:null,o=d.document.createDocumentFragment(),s=null,l=null,h=-1;for(this.callActions("beforePrintSort",arguments),h=0;s=r[h];h++)"absolute"!==(l=s.dom.el).style.position&&(f.removeWhitespace(l.previousSibling),l.parentElement.removeChild(l));for((i=a?a.previousSibling:this.dom.parent.lastChild)&&"#text"===i.nodeName&&f.removeWhitespace(i),h=0;s=n[h];h++)l=s.dom.el,f.isElement(o.lastChild)&&o.appendChild(d.document.createTextNode(" ")),o.appendChild(l);this.dom.parent.firstChild&&this.dom.parent.firstChild!==a&&o.insertBefore(d.document.createTextNode(" "),o.childNodes[0]),a?(o.appendChild(d.document.createTextNode(" ")),this.dom.parent.insertBefore(o,a)):this.dom.parent.appendChild(o),this.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){var i=t.split(" "),r=e,n=[],a=-1;for(a=0;a<i.length;a++){switch(n=i[a].split(":"),r.sortString=i[a],r.attribute=f.dashCase(n[0]),r.order=n[1]||"asc",r.attribute){case"default":r.attribute="";break;case"random":r.attribute="",r.order="random"}if(!r.attribute||"random"===r.order)break;a<i.length-1&&(r.next=new p.CommandSort,f.freeze(r),r=r.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",i=t.config.animation.effectsIn||t.config.animation.effects,r=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new p.StyleData,t.effectsOut=new p.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",i,t.effectsIn,t.transformIn),t.parseEffect("fade",r,t.effectsOut,t.transformOut,!0),p.transformDefaults)p.transformDefaults[e]instanceof p.TransformData&&(t.parseEffect(e,i,t.effectsIn,t.transformIn),t.parseEffect(e,r,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",i,t.effectsIn,t.transformIn),t.parseEffect("stagger",r,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,i,r,n){var a,o="",s="",l=["%","px","em","rem","vh","vw","deg"],h="",c=-1;if(this.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(p.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(this.staggerDuration=0);else{switch(-1<(a=e.indexOf(t+"("))&&(o=e.substring(a),s=/\(([^)]+)\)/.exec(o)[1]),t){case"fade":i.opacity=s?parseFloat(s):0;break;case"stagger":this.staggerDuration=s?parseFloat(s):100;break;default:if(n&&this.config.animation.reverseOut&&"scale"!==t?i[t].value=-1*(s?parseFloat(s):p.transformDefaults[t].value):i[t].value=s?parseFloat(s):p.transformDefaults[t].value,s){for(c=0;h=l[c];c++)if(-1<s.indexOf(h)){i[t].unit=h;break}}else i[t].unit=p.transformDefaults[t].unit;r.push(t+"("+i[t].value+i[t].unit+")")}this.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=new p.State,i=null,r=-1;for(this.callActions("beforeBuildState",arguments),r=0;i=this.targets[r];r++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&e.targets.push(i.dom.el);for(r=0;i=t.matching[r];r++)e.matching.push(i.dom.el);for(r=0;i=t.show[r];r++)e.show.push(i.dom.el);for(r=0;i=t.hide[r];r++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&e.hide.push(i.dom.el);return e.id=this.id,e.container=this.dom.container,e.activeFilter=t.newFilter,e.activeSort=t.newSort,e.activeDataset=t.newDataset,e.activeContainerClassName=t.newContainerClassName,e.hasFailed=t.hasFailed,e.totalTargets=this.targets.length,e.totalShow=t.show.length,e.totalHide=t.hide.length,e.totalMatching=t.matching.length,e.triggerElement=t.triggerElement,this.callFilters("stateBuildState",e,arguments)},goMix:function(t,e){var i,r=this;return r.callActions("beforeGoMix",arguments),r.config.animation.duration&&r.config.animation.effects&&f.isVisible(r.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),p.events.fire("mixStart",r.dom.container,{state:e.startState,futureState:e.newState,instance:r},r.dom.document),"function"==typeof r.config.callbacks.onMixStart&&r.config.callbacks.onMixStart.call(r.dom.container,e.startState,e.newState,r),f.removeClass(r.dom.container,f.getClassname(r.config.classNames,"container",r.config.classNames.modifierFailed)),i=r.userDeferred?r.userDeferred:r.userDeferred=f.defer(p.libraries),r.isBusy=!0,t&&p.features.has.transitions?(d.pageYOffset!==e.docState.scrollTop&&d.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),r.config.animation.applyPerspective&&(r.dom.parent.style[p.features.perspectiveProp]=r.config.animation.perspectiveDistance,r.dom.parent.style[p.features.perspectiveOriginProp]=r.config.animation.perspectiveOrigin),r.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(r.dom.parent.style.height=e.startHeight+"px"),r.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(r.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(r.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(r.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(r.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){r.moveTargets(e)})):r.config.debug.fauxAsync?setTimeout(function(){r.cleanUp(e)},r.config.animation.duration):r.cleanUp(e),r.callFilters("promiseGoMix",i.promise,arguments)},getStartMixData:function(t){var e=d.getComputedStyle(this.dom.parent),i=this.dom.parent.getBoundingClientRect(),r=null,n={},a=-1,o=e[p.features.boxSizingProp];for(this.incPadding="border-box"===o,this.callActions("beforeGetStartMixData",arguments),a=0;r=t.show[a];a++)n=r.getPosData(),t.showPosData[a]={startPosData:n};for(a=0;r=t.toHide[a];a++)n=r.getPosData(),t.toHidePosData[a]={startPosData:n};t.startX=i.left,t.startY=i.top,t.startHeight=this.incPadding?i.height:i.height-parseFloat(e.paddingTop)-parseFloat(e.paddingBottom)-parseFloat(e.borderTop)-parseFloat(e.borderBottom),t.startWidth=this.incPadding?i.width:i.width-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)-parseFloat(e.borderLeft)-parseFloat(e.borderRight),this.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,i=null,r=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),r=0;i=t.toShow[r];r++)i.show();t.willChangeLayout&&(f.removeClass(e.dom.container,t.startContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,i=-1;for(this.callActions("beforeGetInterMixData",arguments),i=0;e=t.show[i];i++)t.showPosData[i].interPosData=e.getPosData();for(i=0;e=t.toHide[i];i++)t.toHidePosData[i].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,i=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),i=0;e=t.toHide[i];i++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,i=this,r=null,n=null,a=-1;for(i.callActions("beforeGetFinalMixData",arguments),a=0;n=t.show[a];a++)t.showPosData[a].finalPosData=n.getPosData();for(a=0;n=t.toHide[a];a++)t.toHidePosData[a].finalPosData=n.getPosData();for((i.config.animation.clampHeight||i.config.animation.clampWidth)&&(i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=""),i.incPadding||(r=d.getComputedStyle(i.dom.parent)),e=i.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=i.incPadding?e.height:e.height-parseFloat(r.paddingTop)-parseFloat(r.paddingBottom)-parseFloat(r.borderTop)-parseFloat(r.borderBottom),t.newWidth=i.incPadding?e.width:e.width-parseFloat(r.paddingLeft)-parseFloat(r.paddingRight)-parseFloat(r.borderLeft)-parseFloat(r.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&i.printSort(!0,t),a=0;n=t.toShow[a];a++)n.hide();for(a=0;n=t.toHide[a];a++)n.show();t.willChangeLayout&&(f.removeClass(i.dom.container,t.newContainerClassName),f.addClass(i.dom.container,i.config.layout.containerClassName)),i.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,i=null,r=null,n=Object.getOwnPropertyNames(e.effectsIn),a="",o=null,s=-1,l=-1,h=-1,c=-1;for(e.callActions("beforeGetTweenData",arguments),h=0;i=t.show[h];h++)for((r=t.showPosData[h]).posIn=new p.StyleData,r.posOut=new p.StyleData,r.tweenData=new p.StyleData,i.isShown?(r.posIn.x=r.startPosData.x-r.interPosData.x,r.posIn.y=r.startPosData.y-r.interPosData.y):r.posIn.x=r.posIn.y=0,r.posOut.x=r.finalPosData.x-r.interPosData.x,r.posOut.y=r.finalPosData.y-r.interPosData.y,r.posIn.opacity=i.isShown?1:e.effectsIn.opacity,r.posOut.opacity=1,r.tweenData.opacity=r.posOut.opacity-r.posIn.opacity,i.isShown||e.config.animation.nudge||(r.posIn.x=r.posOut.x,r.posIn.y=r.posOut.y),r.tweenData.x=r.posOut.x-r.posIn.x,r.tweenData.y=r.posOut.y-r.posIn.y,e.config.animation.animateResizeTargets&&(r.posIn.width=r.startPosData.width,r.posIn.height=r.startPosData.height,s=(r.startPosData.width||r.finalPosData.width)-r.interPosData.width,r.posIn.marginRight=r.startPosData.marginRight-s,l=(r.startPosData.height||r.finalPosData.height)-r.interPosData.height,r.posIn.marginBottom=r.startPosData.marginBottom-l,r.posOut.width=r.finalPosData.width,r.posOut.height=r.finalPosData.height,s=(r.finalPosData.width||r.startPosData.width)-r.interPosData.width,r.posOut.marginRight=r.finalPosData.marginRight-s,l=(r.finalPosData.height||r.startPosData.height)-r.interPosData.height,r.posOut.marginBottom=r.finalPosData.marginBottom-l,r.tweenData.width=r.posOut.width-r.posIn.width,r.tweenData.height=r.posOut.height-r.posIn.height,r.tweenData.marginRight=r.posOut.marginRight-r.posIn.marginRight,r.tweenData.marginBottom=r.posOut.marginBottom-r.posIn.marginBottom),c=0;a=n[c];c++)(o=e.effectsIn[a])instanceof p.TransformData&&o.value&&(r.posIn[a].value=o.value,r.posOut[a].value=0,r.tweenData[a].value=r.posOut[a].value-r.posIn[a].value,r.posIn[a].unit=r.posOut[a].unit=r.tweenData[a].unit=o.unit);for(h=0;i=t.toHide[h];h++)for((r=t.toHidePosData[h]).posIn=new p.StyleData,r.posOut=new p.StyleData,r.tweenData=new p.StyleData,r.posIn.x=i.isShown?r.startPosData.x-r.interPosData.x:0,r.posIn.y=i.isShown?r.startPosData.y-r.interPosData.y:0,r.posOut.x=e.config.animation.nudge?0:r.posIn.x,r.posOut.y=e.config.animation.nudge?0:r.posIn.y,r.tweenData.x=r.posOut.x-r.posIn.x,r.tweenData.y=r.posOut.y-r.posIn.y,e.config.animation.animateResizeTargets&&(r.posIn.width=r.startPosData.width,r.posIn.height=r.startPosData.height,s=r.startPosData.width-r.interPosData.width,r.posIn.marginRight=r.startPosData.marginRight-s,l=r.startPosData.height-r.interPosData.height,r.posIn.marginBottom=r.startPosData.marginBottom-l),r.posIn.opacity=1,r.posOut.opacity=e.effectsOut.opacity,r.tweenData.opacity=r.posOut.opacity-r.posIn.opacity,c=0;a=n[c];c++)(o=e.effectsOut[a])instanceof p.TransformData&&o.value&&(r.posIn[a].value=0,r.posOut[a].value=o.value,r.tweenData[a].value=r.posOut[a].value-r.posIn[a].value,r.posIn[a].unit=r.posOut[a].unit=r.tweenData[a].unit=o.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,i=null,r=null,n=null,a="",o=!1,s=-1,l=-1,h=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;i=t.show[l];l++)r=new p.IMoveData,n=t.showPosData[l],a=i.isShown?"none":"show",(o=e.willTransition(a,t.hasEffect,n.posIn,n.posOut))&&s++,i.show(),r.posIn=n.posIn,r.posOut=n.posOut,r.statusChange=a,r.staggerIndex=s,r.operation=t,r.callback=o?h:null,i.move(r);for(l=0;i=t.toHide[l];l++)n=t.toHidePosData[l],r=new p.IMoveData,a="hide",o=e.willTransition(a,n.posIn,n.posOut),r.posIn=n.posIn,r.posOut=n.posOut,r.statusChange=a,r.staggerIndex=l,r.operation=t,r.callback=o?h:null,i.move(r);e.config.animation.animateResizeContainer&&(e.dom.parent.style[p.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(f.removeClass(e.dom.container,e.config.layout.ContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],e="",i=null,r=!1,n=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(n=0;e=t[n];n++)if(0!==("undefined"!==(i=this.effectsIn[e]).value?i.value:i)){r=!0;break}return this.callFilters("resultHasEffect",r,arguments)},willTransition:function(t,e,i,r){var n;return n=!(!f.isVisible(this.dom.container)||!("none"!==t&&e||i.x!==r.x||i.y!==r.y)&&(!this.config.animation.animateResizeTargets||i.width===r.width&&i.height===r.height&&i.marginRight===r.marginRight&&i.marginTop===r.marginTop)),this.callFilters("resultWillTransition",n,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e=this,i=null,r=null,n=null,a=null,o=-1;for(e.callActions("beforeCleanUp",arguments),e.targetsMoved=e.targetsImmovable=e.targetsBound=e.targetsDone=0,o=0;i=t.show[o];o++)i.cleanUp(),i.show();for(o=0;i=t.toHide[o];o++)i.cleanUp(),i.hide();if(t.willSort&&e.printSort(!1,t),e.dom.parent.style[p.features.transitionProp]=e.dom.parent.style.height=e.dom.parent.style.width=e.dom.parent.style.overflow=e.dom.parent.style[p.features.perspectiveProp]=e.dom.parent.style[p.features.perspectiveOriginProp]="",t.willChangeLayout&&(f.removeClass(e.dom.container,t.startContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),t.toRemove.length){for(o=0;i=e.targets[o];o++)-1<t.toRemove.indexOf(i)&&((r=i.dom.el.previousSibling)&&"#text"===r.nodeName&&(n=i.dom.el.nextSibling)&&"#text"===n.nodeName&&f.removeWhitespace(r),t.willSort||e.dom.parent.removeChild(i.dom.el),e.targets.splice(o,1),i.isInDom=!1,o--);e.origOrder=e.targets}t.willSort&&(e.targets=t.newOrder),e.state=t.newState,e.lastOperation=t,e.dom.targets=e.state.targets,p.events.fire("mixEnd",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixEnd&&e.config.callbacks.onMixEnd.call(e.dom.container,e.state,e),t.hasFailed&&(p.events.fire("mixFail",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixFail&&e.config.callbacks.onMixFail.call(e.dom.container,e.state,e),f.addClass(e.dom.container,f.getClassname(e.config.classNames,"container",e.config.classNames.modifierFailed))),"function"==typeof e.userCallback&&e.userCallback.call(e.dom.container,e.state,e),"function"==typeof e.userDeferred.resolve&&e.userDeferred.resolve(e.state),e.userCallback=null,e.userDeferred=null,e.lastClicked=null,e.isToggling=!1,e.isBusy=!1,e.queue.length&&(e.callActions("beforeReadQueueCleanUp",arguments),a=e.queue.shift(),e.userDeferred=a.deferred,e.isToggling=a.isToggling,e.lastClicked=a.triggerElement,a.instruction.command instanceof p.CommandMultimix?e.multimix.apply(e,a.args):e.dataset.apply(e,a.args)),e.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e=new p.UserInstruction,i=null,r=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandMultimix,r=0;r<t.length;r++)null!==(i=t[r])&&("object"==typeof i?f.extend(e.command,i):"boolean"==typeof i?e.animate=i:"function"==typeof i&&(e.callback=i));return!e.command.insert||e.command.insert instanceof p.CommandInsert||(e.command.insert=this.parseInsertArgs([e.command.insert]).command),!e.command.remove||e.command.remove instanceof p.CommandRemove||(e.command.remove=this.parseRemoveArgs([e.command.remove]).command),!e.command.filter||e.command.filter instanceof p.CommandFilter||(e.command.filter=this.parseFilterArgs([e.command.filter]).command),!e.command.sort||e.command.sort instanceof p.CommandSort||(e.command.sort=this.parseSortArgs([e.command.sort]).command),!e.command.changeLayout||e.command.changeLayout instanceof p.CommandChangeLayout||(e.command.changeLayout=this.parseChangeLayoutArgs([e.command.changeLayout]).command),e=this.callFilters("instructionParseMultimixArgs",e,arguments),f.freeze(e),e},parseFilterArgs:function(t){var e=new p.UserInstruction,i=null,r=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandFilter,r=0;r<t.length;r++)"string"==typeof(i=t[r])?e.command.selector=i:null===i?e.command.collection=[]:"object"==typeof i&&f.isElement(i,this.dom.document)?e.command.collection=[i]:"object"==typeof i&&void 0!==i.length?e.command.collection=f.arrayFromList(i):"object"==typeof i?f.extend(e.command,i):"boolean"==typeof i?e.animate=i:"function"==typeof i&&(e.callback=i);if(e.command.selector&&e.command.collection)throw new Error(p.messages.errorFilterInvalidArguments());return e=this.callFilters("instructionParseFilterArgs",e,arguments),f.freeze(e),e},parseSortArgs:function(t){var e=new p.UserInstruction,i=null,r="",n=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandSort,n=0;n<t.length;n++)if(null!==(i=t[n]))switch(typeof i){case"string":r=i;break;case"object":i.length&&(e.command.collection=f.arrayFromList(i));break;case"boolean":e.animate=i;break;case"function":e.callback=i}return r&&(e.command=this.parseSortString(r,e.command)),e=this.callFilters("instructionParseSortArgs",e,arguments),f.freeze(e),e},parseInsertArgs:function(t){var e=new p.UserInstruction,i=null,r=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandInsert,r=0;r<t.length;r++)null!==(i=t[r])&&("number"==typeof i?e.command.index=i:"string"==typeof i&&-1<["before","after"].indexOf(i)?e.command.position=i:"string"==typeof i?e.command.collection=f.arrayFromList(f.createElement(i).childNodes):"object"==typeof i&&f.isElement(i,this.dom.document)?e.command.collection.length?e.command.sibling=i:e.command.collection=[i]:"object"==typeof i&&i.length?e.command.collection.length?e.command.sibling=i[0]:e.command.collection=i:"object"==typeof i&&i.childNodes&&i.childNodes.length?e.command.collection.length?e.command.sibling=i.childNodes[0]:e.command.collection=f.arrayFromList(i.childNodes):"object"==typeof i?f.extend(e.command,i):"boolean"==typeof i?e.animate=i:"function"==typeof i&&(e.callback=i));if(e.command.index&&e.command.sibling)throw new Error(p.messages.errorInsertInvalidArguments());return!e.command.collection.length&&this.config.debug.showWarnings&&console.warn(p.messages.warningInsertNoElements()),e=this.callFilters("instructionParseInsertArgs",e,arguments),f.freeze(e),e},parseRemoveArgs:function(t){var e=new p.UserInstruction,i=null,r=null,n=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandRemove,n=0;n<t.length;n++)if(null!==(r=t[n]))switch(typeof r){case"number":this.targets[r]&&(e.command.targets[0]=this.targets[r]);break;case"string":e.command.collection=f.arrayFromList(this.dom.parent.querySelectorAll(r));break;case"object":r&&r.length?e.command.collection=r:f.isElement(r,this.dom.document)?e.command.collection=[r]:f.extend(e.command,r);break;case"boolean":e.animate=r;break;case"function":e.callback=r}if(e.command.collection.length)for(n=0;i=this.targets[n];n++)-1<e.command.collection.indexOf(i.dom.el)&&e.command.targets.push(i);return!e.command.targets.length&&this.config.debug.showWarnings&&console.warn(p.messages.warningRemoveNoElements()),f.freeze(e),e},parseDatasetArgs:function(t){var e=new p.UserInstruction,i=null,r=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandDataset,r=0;r<t.length;r++)if(null!==(i=t[r]))switch(typeof i){case"object":Array.isArray(i)||"number"==typeof i.length?e.command.dataset=i:f.extend(e.command,i);break;case"boolean":e.animate=i;break;case"function":e.callback=i}return f.freeze(e),e},parseChangeLayoutArgs:function(t){var e=new p.UserInstruction,i=null,r=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandChangeLayout,r=0;r<t.length;r++)if(null!==(i=t[r]))switch(typeof i){case"string":e.command.containerClassName=i;break;case"object":f.extend(e.command,i);break;case"boolean":e.animate=i;break;case"function":e.callback=i}return f.freeze(e),e},queueMix:function(t){var e=this,i=null,r="";return e.callActions("beforeQueueMix",arguments),i=f.defer(p.libraries),e.config.animation.queue&&e.queue.length<e.config.animation.queueLimit?(t.deferred=i,e.queue.push(t),e.config.controls.enable&&(e.isToggling?(e.buildToggleArray(t.instruction.command),r=e.getToggleSelector(),e.updateControls({filter:{selector:r}})):e.updateControls(t.instruction.command))):(e.config.debug.showWarnings&&console.warn(p.messages.warningMultimixInstanceQueueFull()),i.resolve(e.state),p.events.fire("mixBusy",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixBusy&&e.config.callbacks.onMixBusy.call(e.dom.container,e.state,e)),e.callFilters("promiseQueueMix",i.promise,arguments)},getDataOperation:function(t){var e=this,i=new p.Operation,r=[];if(i=e.callFilters("operationUnmappedGetDataOperation",i,arguments),e.dom.targets.length&&!(r=e.state.activeDataset||[]).length)throw new Error(p.messages.errorDatasetNotSet());return i.id=f.randomHex(),i.startState=e.state,i.startDataset=r,i.newDataset=t.slice(),e.diffDatasets(i),i.startOrder=e.targets,i.newOrder=i.show,e.config.animation.enable&&(e.getStartMixData(i),e.setInter(i),i.docState=f.getDocumentState(e.dom.document),e.getInterMixData(i),e.setFinal(i),e.getFinalMixData(i),e.parseEffects(),i.hasEffect=e.hasEffect(),e.getTweenData(i)),e.targets=i.show.slice(),i.newState=e.buildState(i),Array.prototype.push.apply(e.targets,i.toRemove),e.callFilters("operationMappedGetDataOperation",i,arguments)},diffDatasets:function(t){var e=this,i=[],r=[],n=[],a=null,o=null,s=null,l=null,h=null,c={},u="",d=-1;for(e.callActions("beforeDiffDatasets",arguments),d=0;a=t.newDataset[d];d++){if(void 0===(u=a[e.config.data.uidKey])||u.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(c[u])throw new Error(p.messages.errorDatasetDuplicateUid({uid:u}));c[u]=!0,(o=e.cache[u])instanceof p.Target?(e.config.data.dirtyCheck&&!f.deepEquals(a,o.data)&&(s=o.render(a),o.data=a,s!==o.dom.el&&(o.isInDom&&(o.unbindEvents(),e.dom.parent.replaceChild(s,o.dom.el)),o.isShown||(s.style.display="none"),o.dom.el=s,o.isInDom&&o.bindEvents())),s=o.dom.el):((o=new p.Target).init(null,e,a),o.hide()),o.isInDom?(h=o.dom.el.nextElementSibling,r.push(u),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,o.dom.el,n),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(o.dom.el),o.isInDom=!0,o.unbindEvents(),o.bindEvents(),o.hide(),t.toShow.push(o),n.push(o)),t.show.push(o)}for(l&&((h=h||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,h,n)),d=0;a=t.startDataset[d];d++)u=a[e.config.data.uidKey],o=e.cache[u],t.show.indexOf(o)<0?(t.hide.push(o),t.toHide.push(o),t.toRemove.push(o)):i.push(u);f.isEqualArray(i,r)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,i){var r=e?f.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);i.length;)this.targets.splice(r,0,i.shift()),r++},willSort:function(t,e){var i;return i=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next),this.callFilters("resultWillSort",i,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t,e=this.parseFilterArgs(arguments),i=e.command.selector;return this.isToggling=!0,this.toggleArray.indexOf(i)<0&&this.toggleArray.push(i),t=this.getToggleSelector(),this.multimix({filter:t},e.animate,e.callback)},toggleOff:function(){var t,e=this.parseFilterArgs(arguments),i=e.command.selector,r=this.toggleArray.indexOf(i);return this.isToggling=!0,-1<r&&this.toggleArray.splice(r,1),t=this.getToggleSelector(),this.multimix({filter:t},e.animate,e.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t=this.parseDatasetArgs(arguments),e=null,i=null,r=!1;return this.callActions("beforeDataset",arguments),this.isBusy?((i=new p.QueueItem).args=arguments,i.instruction=t,this.queueMix(i)):(t.callback&&(this.userCallback=t.callback),r=t.animate^this.config.animation.enable?t.animate:this.config.animation.enable,e=this.getDataOperation(t.command.dataset),this.goMix(r,e))},multimix:function(){var t=this,e=null,i=!1,r=null,n=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?((r=new p.QueueItem).args=arguments,r.instruction=n,r.triggerElement=t.lastClicked,r.isToggling=t.isToggling,t.queueMix(r)):(e=t.getOperation(n.command),t.config.controls.enable&&(n.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(e.command)),t.queue.length<1&&t.updateControls(e.command)),n.callback&&(t.userCallback=n.callback),i=n.animate^t.config.animation.enable?n.animate:t.config.animation.enable,t.callFilters("operationMultimix",e,arguments),t.goMix(i,e))},getOperation:function(t){var e=this,i=t.sort,r=t.filter,n=t.changeLayout,a=t.remove,o=t.insert,s=new p.Operation;return(s=e.callFilters("operationUnmappedGetOperation",s,arguments)).id=f.randomHex(),s.command=t,s.startState=e.state,s.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(p.messages.warningGetOperationInstanceBusy()),null):(o&&e.insertTargets(o,s),a&&(s.toRemove=a.targets),s.startSort=s.newSort=s.startState.activeSort,s.startOrder=s.newOrder=e.targets,i&&(s.startSort=s.startState.activeSort,s.newSort=i,s.willSort=e.willSort(i,s.startState.activeSort),s.willSort&&e.sortOperation(s)),s.startFilter=s.startState.activeFilter,s.newFilter=r||f.extend(new p.CommandFilter,s.startFilter),"all"===s.newFilter.selector?s.newFilter.selector=e.config.selectors.target:"none"===s.newFilter.selector&&(s.newFilter.selector=""),e.filterOperation(s),s.startContainerClassName=s.startState.activeContainerClassName,n?(s.newContainerClassName=n.containerClassName,s.newContainerClassName!==s.startContainerClassName&&(s.willChangeLayout=!0)):s.newContainerClassName=s.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(s),e.setInter(s),s.docState=f.getDocumentState(e.dom.document),e.getInterMixData(s),e.setFinal(s),e.getFinalMixData(s),e.parseEffects(),s.hasEffect=e.hasEffect(),e.getTweenData(s)),s.willSort&&(e.targets=s.newOrder),s.newState=e.buildState(s),e.callFilters("operationMappedGetOperation",s,arguments))},tween:function(t,e){var i=null,r=null,n=-1,a=-1;for(e=Math.min(e,1),e=Math.max(e,0),a=0;i=t.show[a];a++)r=t.showPosData[a],i.applyTween(r,e);for(a=0;i=t.hide[a];a++)i.isShown&&i.hide(),-1<(n=t.toHide.indexOf(i))&&(r=t.toHidePosData[n],i.isShown||i.show(),i.applyTween(r,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e;return e=t?f.getProperty(this.config,t):this.config,this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),f.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t;return t=new p.State,f.extend(t,this.state),f.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=null,e=null,i="";for(i in this.cache)(e=(t=this.cache[i]).render(t.data))!==t.dom.el&&(t.isInDom&&(t.unbindEvents(),this.dom.parent.replaceChild(e,t.dom.el)),t.isShown||(e.style.display="none"),t.dom.el=e,t.isInDom&&t.bindEvents());this.state=this.buildState(this.lastOperation)},destroy:function(t){var e=null,i=null,r=0;for(this.callActions("beforeDestroy",arguments),r=0;e=this.controls[r];r++)e.removeBinding(this);for(r=0;i=this.targets[r];r++)t&&i.show(),i.unbindEvents();this.dom.container.id.match(/^MixItUp/)&&this.dom.container.removeAttribute("id"),delete p.instances[this.id],this.callActions("afterDestroy",arguments)}}),p.IMoveData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.IMoveData),p.IMoveData.prototype=Object.create(p.Base.prototype),p.IMoveData.prototype.constructor=p.IMoveData,p.TargetDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TargetDom),p.TargetDom.prototype=Object.create(p.Base.prototype),p.TargetDom.prototype.constructor=p.TargetDom,p.Target=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new p.TargetDom,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Target),p.Target.prototype=Object.create(p.Base.prototype),f.extend(p.Target.prototype,{constructor:p.Target,init:function(t,e,i){var r=this,n="";if(r.callActions("beforeInit",arguments),r.mixer=e,t=t||r.render(i),r.cacheDom(t),r.bindEvents(),"none"!==r.dom.el.style.display&&(r.isShown=!0),i&&e.config.data.uidKey){if(void 0===(n=i[e.config.data.uidKey])||n.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));r.id=n,r.data=i,e.cache[n]=r}r.callActions("afterInit",arguments)},render:function(t){var e,i=null,r=null,n=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(i=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(p.messages.errorDatasetRendererNotSet());return(e=i(t))&&"object"==typeof e&&f.isElement(e)?r=e:"string"==typeof e&&((n=document.createElement("div")).innerHTML=e,r=n.firstElementChild),this.callFilters("elRender",r,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){var e=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),e=isNaN(1*e)?e.toLowerCase():1*e,this.sortString=e,this.callActions("afterGetSortString",arguments)},show:function(){this.callActions("beforeShow",arguments),this.isShown||(this.dom.el.style.display="",this.isShown=!0),this.callActions("afterShow",arguments)},hide:function(){this.callActions("beforeHide",arguments),this.isShown&&(this.dom.el.style.display="none",this.isShown=!1),this.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var i="",r=null,n=t.posIn,a=[],o=new p.StyleData,s=-1;for(this.callActions("beforeApplyTween",arguments),o.x=n.x,o.y=n.y,0===e?this.hide():this.isShown||this.show(),s=0;i=p.features.TWEENABLE[s];s++)if(r=t.tweenData[i],"x"===i){if(!r)continue;o.x=n.x+r*e}else if("y"===i){if(!r)continue;o.y=n.y+r*e}else if(r instanceof p.TransformData){if(!r.value)continue;o[i].value=n[i].value+r.value*e,o[i].unit=r.unit,a.push(i+"("+o[i].value+r.unit+")")}else{if(!r)continue;o[i]=n[i]+r*e,this.dom.el.style[i]=o[i]}(o.x||o.y)&&a.unshift("translate("+o.x+"px, "+o.y+"px)"),a.length&&(this.dom.el.style[p.features.transformProp]=a.join(" ")),this.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,i=t.posIn,r=1!==e.mixer.effectsIn.opacity,n=[];e.callActions("beforeApplyStylesIn",arguments),n.push("translate("+i.x+"px, "+i.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=i.width+"px",e.dom.el.style.height=i.height+"px"),e.dom.el.style.marginRight=i.marginRight+"px",e.dom.el.style.marginBottom=i.marginBottom+"px"),r&&(e.dom.el.style.opacity=i.opacity),"show"===t.statusChange&&(n=n.concat(e.mixer.transformIn)),e.dom.el.style[p.features.transformProp]=n.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,i=[],r=[],n=e.mixer.config.animation.animateResizeTargets,a=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),i.push(e.writeTransitionRule(p.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&i.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),n&&(i.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),i.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),i.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),!t.callback)return e.mixer.targetsImmovable++,void(e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation));switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(i),n&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||r.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":a&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),r=r.concat(e.mixer.transformOut);break;case"show":a&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&r.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[p.features.transformProp]=r.join(" "),e.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(t,e,i){var r,n=this.getDelay(e);return r=t+" "+(0<i?i:this.mixer.config.animation.duration)+"ms "+n+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing),this.callFilters("ruleWriteTransitionRule",r,arguments)},getDelay:function(t){var e;return"function"==typeof this.mixer.config.animation.staggerSequence&&(t=this.mixer.config.animation.staggerSequence.call(this,t,this.state)),e=this.mixer.staggerDuration?t*this.mixer.staggerDuration:0,this.callFilters("delayGetDelay",e,arguments)},applyTransition:function(t){var e=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[p.features.transitionProp]=e,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,i=t.propertyName,r=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<i.indexOf("transform")||-1<i.indexOf("opacity")||r&&-1<i.indexOf("height")||r&&-1<i.indexOf("width")||r&&-1<i.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){this.callActions("beforeUnbindEvents",arguments),f.off(this.dom.el,"webkitTransitionEnd",this.handler),f.off(this.dom.el,"transitionend",this.handler),this.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===p.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},f.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e={},i=null,r=new p.StyleData;return this.callActions("beforeGetPosData",arguments),r.x=this.dom.el.offsetLeft,r.y=this.dom.el.offsetTop,(this.mixer.config.animation.animateResizeTargets||t)&&(i=this.dom.el.getBoundingClientRect(),r.top=i.top,r.right=i.right,r.bottom=i.bottom,r.left=i.left,r.width=i.width,r.height=i.height),this.mixer.config.animation.animateResizeTargets&&(e=d.getComputedStyle(this.dom.el),r.marginBottom=parseFloat(e.marginBottom),r.marginRight=parseFloat(e.marginRight)),this.callFilters("posDataGetPosData",r,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[p.features.transformProp]="",t.dom.el.style[p.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),p.Collection=function(t){var e=null,i=-1;for(this.callActions("beforeConstruct"),i=0;e=t[i];i++)this[i]=e;this.length=t.length,this.callActions("afterConstruct"),f.freeze(this)},p.BaseStatic.call(p.Collection),p.Collection.prototype=Object.create(p.Base.prototype),f.extend(p.Collection.prototype,{constructor:p.Collection,mixitup:function(t){var e=null,i=Array.prototype.slice.call(arguments),r=[],n=-1;for(this.callActions("beforeMixitup"),i.shift(),n=0;e=this[n];n++)r.push(e[t].apply(e,i));return this.callFilters("promiseMixitup",f.all(r,p.libraries),arguments)}}),p.Operation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Operation),p.Operation.prototype=Object.create(p.Base.prototype),p.Operation.prototype.constructor=p.Operation,p.State=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.State),p.State.prototype=Object.create(p.Base.prototype),p.State.prototype.constructor=p.State,p.UserInstruction=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.UserInstruction),p.UserInstruction.prototype=Object.create(p.Base.prototype),p.UserInstruction.prototype.constructor=p.UserInstruction,p.Messages=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),f.seal(this)},p.BaseStatic.call(p.Messages),p.Messages.prototype=Object.create(p.Base.prototype),p.Messages.prototype.constructor=p.Messages,p.Messages.prototype.compileTemplates=function(){var t="",e="";for(t in this)"string"==typeof(e=this[t])&&(this[f.camelCase(t)]=f.template(e))},p.messages=new p.Messages,p.Facade=function(t){p.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),f.freeze(this),f.seal(this)},p.BaseStatic.call(p.Facade),p.Facade.prototype=Object.create(p.Base.prototype),p.Facade.prototype.constructor=p.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=p:"function"==typeof define&&define.amd?define(function(){return p}):void 0!==d.mixitup&&"function"==typeof d.mixitup||(d.mixitup=p),p.BaseStatic.call(p.constructor),p.NAME="mixitup",p.CORE_VERSION="3.3.1"}(window);var THREE={REVISION:"70"};"object"==typeof module&&(module.exports=THREE),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:0<t?1:0}),THREE.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2},THREE.CullFaceNone=0,THREE.CullFaceBack=1,THREE.CullFaceFront=2,THREE.CullFaceFrontBack=3,THREE.FrontFaceDirectionCW=0,THREE.FrontFaceDirectionCCW=1,THREE.BasicShadowMap=0,THREE.PCFShadowMap=1,THREE.PCFSoftShadowMap=2,THREE.FrontSide=0,THREE.BackSide=1,THREE.DoubleSide=2,THREE.NoShading=0,THREE.FlatShading=1,THREE.SmoothShading=2,THREE.NoColors=0,THREE.FaceColors=1,THREE.VertexColors=2,THREE.NoBlending=0,THREE.NormalBlending=1,THREE.AdditiveBlending=2,THREE.SubtractiveBlending=3,THREE.MultiplyBlending=4,THREE.CustomBlending=5,THREE.AddEquation=100,THREE.SubtractEquation=101,THREE.ReverseSubtractEquation=102,THREE.MinEquation=103,THREE.MaxEquation=104,THREE.ZeroFactor=200,THREE.OneFactor=201,THREE.SrcColorFactor=202,THREE.OneMinusSrcColorFactor=203,THREE.SrcAlphaFactor=204,THREE.OneMinusSrcAlphaFactor=205,THREE.DstAlphaFactor=206,THREE.OneMinusDstAlphaFactor=207,THREE.DstColorFactor=208,THREE.OneMinusDstColorFactor=209,THREE.SrcAlphaSaturateFactor=210,THREE.MultiplyOperation=0,THREE.MixOperation=1,THREE.AddOperation=2,THREE.UVMapping=300,THREE.CubeReflectionMapping=301,THREE.CubeRefractionMapping=302,THREE.EquirectangularReflectionMapping=303,THREE.EquirectangularRefractionMapping=304,THREE.SphericalReflectionMapping=305,THREE.RepeatWrapping=1e3,THREE.ClampToEdgeWrapping=1001,THREE.MirroredRepeatWrapping=1002,THREE.NearestFilter=1003,THREE.NearestMipMapNearestFilter=1004,THREE.NearestMipMapLinearFilter=1005,THREE.LinearFilter=1006,THREE.LinearMipMapNearestFilter=1007,THREE.LinearMipMapLinearFilter=1008,THREE.UnsignedByteType=1009,THREE.ByteType=1010,THREE.ShortType=1011,THREE.UnsignedShortType=1012,THREE.IntType=1013,THREE.UnsignedIntType=1014,THREE.FloatType=1015,THREE.UnsignedShort4444Type=1016,THREE.UnsignedShort5551Type=1017,THREE.UnsignedShort565Type=1018,THREE.AlphaFormat=1019,THREE.RGBFormat=1020,THREE.RGBAFormat=1021,THREE.LuminanceFormat=1022,THREE.LuminanceAlphaFormat=1023,THREE.RGBEFormat=THREE.RGBAFormat,THREE.RGB_S3TC_DXT1_Format=2001,THREE.RGBA_S3TC_DXT1_Format=2002,THREE.RGBA_S3TC_DXT3_Format=2003,THREE.RGBA_S3TC_DXT5_Format=2004,THREE.RGB_PVRTC_4BPPV1_Format=2100,THREE.RGB_PVRTC_2BPPV1_Format=2101,THREE.RGBA_PVRTC_4BPPV1_Format=2102,THREE.RGBA_PVRTC_2BPPV1_Format=2103,THREE.Projector=function(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(t,e){console.warn("THREE.Projector: .projectVector() is now vector.project()."),t.project(e)},this.unprojectVector=function(t,e){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),t.unproject(e)},this.pickingRay=function(t,e){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}},THREE.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElement("canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}},THREE.Color=function(t){return 3===arguments.length?this.setRGB(t,arguments[1],arguments[2]):this.set(t)},THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(t){return t instanceof THREE.Color?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,i){return this.r=t,this.g=e,this.b=i,this},setHSL:function(t,e,i){if(0===e)this.r=this.g=this.b=i;else{function r(t,e,i){return i<0&&(i+=1),1<i&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+6*(e-t)*(2/3-i):t}i=2*i-(e=i<=.5?i*(1+e):i+e-i*e),this.r=r(i,e,t+1/3),this.g=r(i,e,t),this.b=r(i,e,t-1/3)}return this},setStyle:function(t){return/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(t)?(t=/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(t),this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,this):/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(t)?(t=/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(t),this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,this):/^\#([0-9a-f]{6})$/i.test(t)?(t=/^\#([0-9a-f]{6})$/i.exec(t),this.setHex(parseInt(t[1],16)),this):/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(t)?(t=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(t),this.setHex(parseInt(t[1]+t[1]+t[2]+t[2]+t[3]+t[3],16)),this):/^(\w+)$/i.test(t)?(this.setHex(THREE.ColorKeywords[t]),this):void 0},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t){return this.r=t.r*t.r,this.g=t.g*t.g,this.b=t.b*t.b,this},copyLinearToGamma:function(t){return this.r=Math.sqrt(t.r),this.g=Math.sqrt(t.g),this.b=Math.sqrt(t.b),this},convertGammaToLinear:function(){var t=this.r,e=this.g,i=this.b;return this.r=t*t,this.g=e*e,this.b=i*i,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){t=t||{h:0,s:0,l:0};var e,i=this.r,r=this.g,n=this.b,a=Math.max(i,r,n),o=((l=Math.min(i,r,n))+a)/2;if(l===a)l=e=0;else{var s=a-l,l=o<=.5?s/(a+l):s/(2-a-l);switch(a){case i:e=(r-n)/s+(r<n?6:0);break;case r:e=(n-i)/s+2;break;case n:e=(i-r)/s+4}e/=6}return t.h=e,t.s=l,t.l=o,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(t,e,i){var r=this.getHSL();return r.h+=t,r.s+=e,r.l+=i,this.setHSL(r.h,r.s,r.l),this},add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t){return this.r=t[0],this.g=t[1],this.b=t[2],this},toArray:function(){return[this.r,this.g,this.b]},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}},THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},THREE.Quaternion=function(t,e,i,r){this._x=t||0,this._y=e||0,this._z=i||0,this._w=void 0!==r?r:1},THREE.Quaternion.prototype={constructor:THREE.Quaternion,_x:0,_y:0,_z:0,_w:0,get x(){return this._x},set x(t){this._x=t,this.onChangeCallback()},get y(){return this._y},set y(t){this._y=t,this.onChangeCallback()},get z(){return this._z},set z(t){this._z=t,this.onChangeCallback()},get w(){return this._w},set w(t){this._w=t,this.onChangeCallback()},set:function(t,e,i,r){return this._x=t,this._y=e,this._z=i,this._w=r,this.onChangeCallback(),this},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this.onChangeCallback(),this},setFromEuler:function(t,e){if(!1==t instanceof THREE.Euler)throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var i=Math.cos(t._x/2),r=Math.cos(t._y/2),n=Math.cos(t._z/2),a=Math.sin(t._x/2),o=Math.sin(t._y/2),s=Math.sin(t._z/2);return"XYZ"===t.order?(this._x=a*r*n+i*o*s,this._y=i*o*n-a*r*s,this._z=i*r*s+a*o*n,this._w=i*r*n-a*o*s):"YXZ"===t.order?(this._x=a*r*n+i*o*s,this._y=i*o*n-a*r*s,this._z=i*r*s-a*o*n,this._w=i*r*n+a*o*s):"ZXY"===t.order?(this._x=a*r*n-i*o*s,this._y=i*o*n+a*r*s,this._z=i*r*s+a*o*n,this._w=i*r*n-a*o*s):"ZYX"===t.order?(this._x=a*r*n-i*o*s,this._y=i*o*n+a*r*s,this._z=i*r*s-a*o*n,this._w=i*r*n+a*o*s):"YZX"===t.order?(this._x=a*r*n+i*o*s,this._y=i*o*n+a*r*s,this._z=i*r*s-a*o*n,this._w=i*r*n-a*o*s):"XZY"===t.order&&(this._x=a*r*n-i*o*s,this._y=i*o*n-a*r*s,this._z=i*r*s+a*o*n,this._w=i*r*n+a*o*s),!1!==e&&this.onChangeCallback(),this},setFromAxisAngle:function(t,e){var i=e/2,r=Math.sin(i);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(i),this.onChangeCallback(),this},setFromRotationMatrix:function(t){var e=(i=t.elements)[0];t=i[4];var i,r=i[8],n=i[1],a=i[5],o=i[9],s=i[2],l=i[6],h=e+a+(i=i[10]);return 0<h?(e=.5/Math.sqrt(h+1),this._w=.25/e,this._x=(l-o)*e,this._y=(r-s)*e,this._z=(n-t)*e):a<e&&i<e?(e=2*Math.sqrt(1+e-a-i),this._w=(l-o)/e,this._x=.25*e,this._y=(t+n)/e,this._z=(r+s)/e):i<a?(e=2*Math.sqrt(1+a-e-i),this._w=(r-s)/e,this._x=(t+n)/e,this._y=.25*e,this._z=(o+l)/e):(e=2*Math.sqrt(1+i-e-a),this._w=(n-t)/e,this._x=(r+s)/e,this._y=(o+l)/e,this._z=.25*e),this.onChangeCallback(),this},setFromUnitVectors:function(){var i,r;return function(t,e){return void 0===i&&(i=new THREE.Vector3),(r=t.dot(e)+1)<1e-6?(r=0,Math.abs(t.x)>Math.abs(t.z)?i.set(-t.y,t.x,0):i.set(0,-t.z,t.y)):i.crossVectors(t,e),this._x=i.x,this._y=i.y,this._z=i.z,this._w=r,this.normalize(),this}}(),inverse:function(){return this.conjugate().normalize(),this},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._z=this._y=this._x=0,this._w=1):(t=1/t,this._x*=t,this._y*=t,this._z*=t,this._w*=t),this.onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},multiplyQuaternions:function(t,e){var i=t._x,r=t._y,n=t._z,a=t._w,o=e._x,s=e._y,l=e._z,h=e._w;return this._x=i*h+a*o+r*l-n*s,this._y=r*h+a*s+n*o-i*l,this._z=n*h+a*l+i*s-r*o,this._w=a*h-i*o-r*s-n*l,this.onChangeCallback(),this},multiplyVector3:function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var i=this._x,r=this._y,n=this._z,a=this._w,o=a*t._w+i*t._x+r*t._y+n*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),1<=o)return this._w=a,this._x=i,this._y=r,this._z=n,this;var s=Math.acos(o),l=Math.sqrt(1-o*o);return Math.abs(l)<.001?(this._w=.5*(a+this._w),this._x=.5*(i+this._x),this._y=.5*(r+this._y),this._z=.5*(n+this._z)):(o=Math.sin((1-e)*s)/l,s=Math.sin(e*s)/l,this._w=a*o+this._w*s,this._x=i*o+this._x*s,this._y=r*o+this._y*s,this._z=n*o+this._z*s,this.onChangeCallback()),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){},clone:function(){return new THREE.Quaternion(this._x,this._y,this._z,this._w)}},THREE.Quaternion.slerp=function(t,e,i,r){return i.copy(t).slerp(e,r)},THREE.Vector2=function(t,e){this.x=t||0,this.y=e||0},THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(t,e){return this.x=t,this.y=e,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw Error("index is out of range: "+t)}},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+t)}},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScalar:function(t){return this.x+=t,this.y+=t,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return 0!==t?(t=1/t,this.x*=t,this.y*=t):this.y=this.x=0,this},min:function(t){return this.x>t.x&&(this.x=t.x),this.y>t.y&&(this.y=t.y),this},max:function(t){return this.x<t.x&&(this.x=t.x),this.y<t.y&&(this.y=t.y),this},clamp:function(t,e){return this.x<t.x?this.x=t.x:this.x>e.x&&(this.x=e.x),this.y<t.y?this.y=t.y:this.y>e.y&&(this.y=e.y),this},clampScalar:function(){var i,r;return function(t,e){return void 0===i&&(i=new THREE.Vector2,r=new THREE.Vector2),i.set(t,t),r.set(e,e),this.clamp(i,r)}}(),floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x;return e*e+(t=this.y-t.y)*t},setLength:function(t){var e=this.length();return 0!==e&&t!==e&&this.multiplyScalar(t/e),this},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromAttribute:function(t,e,i){return void 0===i&&(i=0),e=e*t.itemSize+i,this.x=t.array[e],this.y=t.array[e+1],this},clone:function(){return new THREE.Vector2(this.x,this.y)}},THREE.Vector3=function(t,e,i){this.x=t||0,this.y=e||0,this.z=i||0},THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(t,e,i){return this.x=t,this.y=e,this.z=i,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw Error("index is out of range: "+t)}},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+t)}},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:function(){var e;return function(t){return!1==t instanceof THREE.Euler&&console.error("THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order."),void 0===e&&(e=new THREE.Quaternion),this.applyQuaternion(e.setFromEuler(t)),this}}(),applyAxisAngle:function(){var i;return function(t,e){return void 0===i&&(i=new THREE.Quaternion),this.applyQuaternion(i.setFromAxisAngle(t,e)),this}}(),applyMatrix3:function(t){var e=this.x,i=this.y,r=this.z;return t=t.elements,this.x=t[0]*e+t[3]*i+t[6]*r,this.y=t[1]*e+t[4]*i+t[7]*r,this.z=t[2]*e+t[5]*i+t[8]*r,this},applyMatrix4:function(t){var e=this.x,i=this.y,r=this.z;return t=t.elements,this.x=t[0]*e+t[4]*i+t[8]*r+t[12],this.y=t[1]*e+t[5]*i+t[9]*r+t[13],this.z=t[2]*e+t[6]*i+t[10]*r+t[14],this},applyProjection:function(t){var e=this.x,i=this.y,r=this.z,n=1/((t=t.elements)[3]*e+t[7]*i+t[11]*r+t[15]);return this.x=(t[0]*e+t[4]*i+t[8]*r+t[12])*n,this.y=(t[1]*e+t[5]*i+t[9]*r+t[13])*n,this.z=(t[2]*e+t[6]*i+t[10]*r+t[14])*n,this},applyQuaternion:function(t){var e=this.x,i=this.y,r=this.z,n=t.x,a=t.y,o=t.z,s=(t=t.w)*e+a*r-o*i,l=t*i+o*e-n*r,h=t*r+n*i-a*e;e=-n*e-a*i-o*r;return this.x=s*t+e*-n+l*-o-h*-a,this.y=l*t+e*-a+h*-n-s*-o,this.z=h*t+e*-o+s*-a-l*-n,this},project:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.multiplyMatrices(t.projectionMatrix,e.getInverse(t.matrixWorld)),this.applyProjection(e)}}(),unproject:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.multiplyMatrices(t.matrixWorld,e.getInverse(t.projectionMatrix)),this.applyProjection(e)}}(),transformDirection:function(t){var e=this.x,i=this.y,r=this.z;return t=t.elements,this.x=t[0]*e+t[4]*i+t[8]*r,this.y=t[1]*e+t[5]*i+t[9]*r,this.z=t[2]*e+t[6]*i+t[10]*r,this.normalize(),this},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return 0!==t?(t=1/t,this.x*=t,this.y*=t,this.z*=t):this.z=this.y=this.x=0,this},min:function(t){return this.x>t.x&&(this.x=t.x),this.y>t.y&&(this.y=t.y),this.z>t.z&&(this.z=t.z),this},max:function(t){return this.x<t.x&&(this.x=t.x),this.y<t.y&&(this.y=t.y),this.z<t.z&&(this.z=t.z),this},clamp:function(t,e){return this.x<t.x?this.x=t.x:this.x>e.x&&(this.x=e.x),this.y<t.y?this.y=t.y:this.y>e.y&&(this.y=e.y),this.z<t.z?this.z=t.z:this.z>e.z&&(this.z=e.z),this},clampScalar:function(){var i,r;return function(t,e){return void 0===i&&(i=new THREE.Vector3,r=new THREE.Vector3),i.set(t,t,t),r.set(e,e,e),this.clamp(i,r)}}(),floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(t){var e=this.length();return 0!==e&&t!==e&&this.multiplyScalar(t/e),this},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},cross:function(t,e){if(void 0!==e)return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e);var i=this.x,r=this.y,n=this.z;return this.x=r*t.z-n*t.y,this.y=n*t.x-i*t.z,this.z=i*t.y-r*t.x,this},crossVectors:function(t,e){var i=t.x,r=t.y,n=t.z,a=e.x,o=e.y,s=e.z;return this.x=r*s-n*o,this.y=n*a-i*s,this.z=i*o-r*a,this},projectOnVector:function(){var e,i;return function(t){return void 0===e&&(e=new THREE.Vector3),e.copy(t).normalize(),i=this.dot(e),this.copy(e).multiplyScalar(i)}}(),projectOnPlane:function(){var e;return function(t){return void 0===e&&(e=new THREE.Vector3),e.copy(this).projectOnVector(t),this.sub(e)}}(),reflect:function(){var e;return function(t){return void 0===e&&(e=new THREE.Vector3),this.sub(e.copy(t).multiplyScalar(2*this.dot(t)))}}(),angleTo:function(t){return t=this.dot(t)/(this.length()*t.length()),Math.acos(THREE.Math.clamp(t,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,i=this.y-t.y;return e*e+i*i+(t=this.z-t.z)*t},setEulerFromRotationMatrix:function(t,e){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(t,e){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},setFromMatrixPosition:function(t){return this.x=t.elements[12],this.y=t.elements[13],this.z=t.elements[14],this},setFromMatrixScale:function(t){var e=this.set(t.elements[0],t.elements[1],t.elements[2]).length(),i=this.set(t.elements[4],t.elements[5],t.elements[6]).length();return t=this.set(t.elements[8],t.elements[9],t.elements[10]).length(),this.x=e,this.y=i,this.z=t,this},setFromMatrixColumn:function(t,e){var i=4*t,r=e.elements;return this.x=r[i],this.y=r[1+i],this.z=r[2+i],this},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromAttribute:function(t,e,i){return void 0===i&&(i=0),e=e*t.itemSize+i,this.x=t.array[e],this.y=t.array[e+1],this.z=t.array[e+2],this},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}},THREE.Vector4=function(t,e,i,r){this.x=t||0,this.y=e||0,this.z=i||0,this.w=void 0!==r?r:1},THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(t,e,i,r){return this.x=t,this.y=e,this.z=i,this.w=r,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw Error("index is out of range: "+t)}},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+t)}},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,i=this.y,r=this.z,n=this.w;return t=t.elements,this.x=t[0]*e+t[4]*i+t[8]*r+t[12]*n,this.y=t[1]*e+t[5]*i+t[9]*r+t[13]*n,this.z=t[2]*e+t[6]*i+t[10]*r+t[14]*n,this.w=t[3]*e+t[7]*i+t[11]*r+t[15]*n,this},divideScalar:function(t){return 0!==t?(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t):(this.z=this.y=this.x=0,this.w=1),this},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.z=this.y=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,i,r,n=(t=t.elements)[0];r=t[4];var a=t[8],o=t[1],s=t[5],l=t[9];i=t[2],e=t[6];var h=t[10];return Math.abs(r-o)<.01&&Math.abs(a-i)<.01&&Math.abs(l-e)<.01?Math.abs(r+o)<.1&&Math.abs(a+i)<.1&&Math.abs(l+e)<.1&&Math.abs(n+s+h-3)<.1?this.set(1,0,0,0):(t=Math.PI,h=(h+1)/2,r=(r+o)/4,a=(a+i)/4,l=(l+e)/4,(s=(s+1)/2)<(n=(n+1)/2)&&h<n?r=n<.01?(e=0,i=.707106781):(i=r/(e=Math.sqrt(n)),a/e):h<s?r=s<.01?(i=0,e=.707106781):(e=r/(i=Math.sqrt(s)),l/i):h<.01?(i=e=.707106781,r=0):(e=a/(r=Math.sqrt(h)),i=l/r),this.set(e,i,r,t)):(t=Math.sqrt((e-l)*(e-l)+(a-i)*(a-i)+(o-r)*(o-r)),Math.abs(t)<.001&&(t=1),this.x=(e-l)/t,this.y=(a-i)/t,this.z=(o-r)/t,this.w=Math.acos((n+s+h-1)/2)),this},min:function(t){return this.x>t.x&&(this.x=t.x),this.y>t.y&&(this.y=t.y),this.z>t.z&&(this.z=t.z),this.w>t.w&&(this.w=t.w),this},max:function(t){return this.x<t.x&&(this.x=t.x),this.y<t.y&&(this.y=t.y),this.z<t.z&&(this.z=t.z),this.w<t.w&&(this.w=t.w),this},clamp:function(t,e){return this.x<t.x?this.x=t.x:this.x>e.x&&(this.x=e.x),this.y<t.y?this.y=t.y:this.y>e.y&&(this.y=e.y),this.z<t.z?this.z=t.z:this.z>e.z&&(this.z=e.z),this.w<t.w?this.w=t.w:this.w>e.w&&(this.w=e.w),this},clampScalar:function(){var i,r;return function(t,e){return void 0===i&&(i=new THREE.Vector4,r=new THREE.Vector4),i.set(t,t,t,t),r.set(e,e,e,e),this.clamp(i,r)}}(),floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(t){var e=this.length();return 0!==e&&t!==e&&this.multiplyScalar(t/e),this},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromAttribute:function(t,e,i){return void 0===i&&(i=0),e=e*t.itemSize+i,this.x=t.array[e],this.y=t.array[e+1],this.z=t.array[e+2],this.w=t.array[e+3],this},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}},THREE.Euler=function(t,e,i,r){this._x=t||0,this._y=e||0,this._z=i||0,this._order=r||THREE.Euler.DefaultOrder},THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" "),THREE.Euler.DefaultOrder="XYZ",THREE.Euler.prototype={constructor:THREE.Euler,_x:0,_y:0,_z:0,_order:THREE.Euler.DefaultOrder,get x(){return this._x},set x(t){this._x=t,this.onChangeCallback()},get y(){return this._y},set y(t){this._y=t,this.onChangeCallback()},get z(){return this._z},set z(t){this._z=t,this.onChangeCallback()},get order(){return this._order},set order(t){this._order=t,this.onChangeCallback()},set:function(t,e,i,r){return this._x=t,this._y=e,this._z=i,this._order=r||this._order,this.onChangeCallback(),this},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this.onChangeCallback(),this},setFromRotationMatrix:function(t,e,i){var r=THREE.Math.clamp;t=(u=t.elements)[0];var n=u[4],a=u[8],o=u[1],s=u[5],l=u[9],h=u[2],c=u[6],u=u[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(r(a,-1,1)),Math.abs(a)<.99999?(this._x=Math.atan2(-l,u),this._z=Math.atan2(-n,t)):(this._x=Math.atan2(c,s),this._z=0)):"YXZ"===e?(this._x=Math.asin(-r(l,-1,1)),Math.abs(l)<.99999?(this._y=Math.atan2(a,u),this._z=Math.atan2(o,s)):(this._y=Math.atan2(-h,t),this._z=0)):"ZXY"===e?(this._x=Math.asin(r(c,-1,1)),Math.abs(c)<.99999?(this._y=Math.atan2(-h,u),this._z=Math.atan2(-n,s)):(this._y=0,this._z=Math.atan2(o,t))):"ZYX"===e?(this._y=Math.asin(-r(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(c,u),this._z=Math.atan2(o,t)):(this._x=0,this._z=Math.atan2(-n,s))):"YZX"===e?(this._z=Math.asin(r(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(-l,s),this._y=Math.atan2(-h,t)):(this._x=0,this._y=Math.atan2(a,u))):"XZY"===e?(this._z=Math.asin(-r(n,-1,1)),Math.abs(n)<.99999?(this._x=Math.atan2(c,s),this._y=Math.atan2(a,t)):(this._x=Math.atan2(-l,u),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==i&&this.onChangeCallback(),this},setFromQuaternion:function(){var r;return function(t,e,i){return void 0===r&&(r=new THREE.Matrix4),r.makeRotationFromQuaternion(t),this.setFromRotationMatrix(r,e,i),this}}(),setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:function(){var e=new THREE.Quaternion;return function(t){e.setFromEuler(this),this.setFromQuaternion(e,t)}}(),equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this.onChangeCallback(),this},toArray:function(){return[this._x,this._y,this._z,this._order]},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){},clone:function(){return new THREE.Euler(this._x,this._y,this._z,this._order)}},THREE.Line3=function(t,e){this.start=void 0!==t?t:new THREE.Vector3,this.end=void 0!==e?e:new THREE.Vector3},THREE.Line3.prototype={constructor:THREE.Line3,set:function(t,e){return this.start.copy(t),this.end.copy(e),this},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},center:function(t){return(t||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return(t||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){var i=e||new THREE.Vector3;return this.delta(i).multiplyScalar(t).add(this.start)},closestPointToPointParameter:function(){var r=new THREE.Vector3,n=new THREE.Vector3;return function(t,e){r.subVectors(t,this.start),n.subVectors(this.end,this.start);var i=n.dot(n);i=n.dot(r)/i;return e&&(i=THREE.Math.clamp(i,0,1)),i}}(),closestPointToPoint:function(t,e,i){return t=this.closestPointToPointParameter(t,e),i=i||new THREE.Vector3,this.delta(i).multiplyScalar(t).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)},clone:function(){return(new THREE.Line3).copy(this)}},THREE.Box2=function(t,e){this.min=void 0!==t?t:new THREE.Vector2(1/0,1/0),this.max=void 0!==e?e:new THREE.Vector2(-1/0,-1/0)},THREE.Box2.prototype={constructor:THREE.Box2,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var r=new THREE.Vector2;return function(t,e){var i=r.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}}(),copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(t){return(t||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(t){return(t||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return(e||new THREE.Vector2).set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return(e||new THREE.Vector2).copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var e=new THREE.Vector2;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}},THREE.Box3=function(t,e){this.min=void 0!==t?t:new THREE.Vector3(1/0,1/0,1/0),this.max=void 0!==e?e:new THREE.Vector3(-1/0,-1/0,-1/0)},THREE.Box3.prototype={constructor:THREE.Box3,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var r=new THREE.Vector3;return function(t,e){var i=r.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(t){var n=this;return t.updateMatrixWorld(!0),this.makeEmpty(),t.traverse(function(t){if(void 0!==(i=t.geometry))if(i instanceof THREE.Geometry)for(var e=i.vertices,i=0,r=e.length;i<r;i++)a.copy(e[i]),a.applyMatrix4(t.matrixWorld),n.expandByPoint(a);else if(i instanceof THREE.BufferGeometry&&void 0!==i.attributes.position)for(e=i.attributes.position.array,i=0,r=e.length;i<r;i+=3)a.set(e[i],e[i+1],e[i+2]),a.applyMatrix4(t.matrixWorld),n.expandByPoint(a)}),this}}(),copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(t){return(t||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(t){return(t||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return(e||new THREE.Vector3).set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},clampPoint:function(t,e){return(e||new THREE.Vector3).copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var e=new THREE.Vector3;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),getBoundingSphere:function(){var e=new THREE.Vector3;return function(t){return(t=t||new THREE.Sphere).center=this.center(),t.radius=.5*this.size(e).length(),t}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:function(){var e=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(t){return e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.makeEmpty(),this.setFromPoints(e),this}}(),translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}},THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]),0<arguments.length&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")},THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(t,e,i,r,n,a,o,s,l){var h=this.elements;return h[0]=t,h[3]=e,h[6]=i,h[1]=r,h[4]=n,h[7]=a,h[2]=o,h[5]=s,h[8]=l,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},copy:function(t){return t=t.elements,this.set(t[0],t[3],t[6],t[1],t[4],t[7],t[2],t[5],t[8]),this},multiplyVector3:function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},multiplyVector3Array:function(t){return console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(t)},applyToVector3Array:function(){var n=new THREE.Vector3;return function(t,e,i){void 0===e&&(e=0),void 0===i&&(i=t.length);for(var r=0;r<i;r+=3,e+=3)n.x=t[e],n.y=t[e+1],n.z=t[e+2],n.applyMatrix3(this),t[e]=n.x,t[e+1]=n.y,t[e+2]=n.z;return t}}(),multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t,e=(t=this.elements)[0],i=t[1],r=t[2],n=t[3],a=t[4],o=t[5],s=t[6],l=t[7];return e*a*(t=t[8])-e*o*l-i*n*t+i*o*s+r*n*l-r*a*s},getInverse:function(t,e){var i=t.elements,r=this.elements;if(r[0]=i[10]*i[5]-i[6]*i[9],r[1]=-i[10]*i[1]+i[2]*i[9],r[2]=i[6]*i[1]-i[2]*i[5],r[3]=-i[10]*i[4]+i[6]*i[8],r[4]=i[10]*i[0]-i[2]*i[8],r[5]=-i[6]*i[0]+i[2]*i[4],r[6]=i[9]*i[4]-i[5]*i[8],r[7]=-i[9]*i[0]+i[1]*i[8],r[8]=i[5]*i[0]-i[1]*i[4],0!=(i=i[0]*r[0]+i[1]*r[3]+i[2]*r[6]))return this.multiplyScalar(1/i),this;if(e)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");return console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0"),this.identity(),this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},flattenToArrayOffset:function(t,e){var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t},getNormalMatrix:function(t){return this.getInverse(t).transpose(),this},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},fromArray:function(t){return this.elements.set(t),this},toArray:function(){var t=this.elements;return[t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8]]},clone:function(){return(new THREE.Matrix3).fromArray(this.elements)}},THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),0<arguments.length&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")},THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(t,e,i,r,n,a,o,s,l,h,c,u,d,p,f,m){var g=this.elements;return g[0]=t,g[4]=e,g[8]=i,g[12]=r,g[1]=n,g[5]=a,g[9]=o,g[13]=s,g[2]=l,g[6]=h,g[10]=c,g[14]=u,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},copy:function(t){return this.elements.set(t.elements),this},extractPosition:function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},copyPosition:function(t){var e=this.elements;return t=t.elements,e[12]=t[12],e[13]=t[13],e[14]=t[14],this},extractBasis:function(t,e,i){var r=this.elements;return t.set(r[0],r[1],r[2]),e.set(r[4],r[5],r[6]),i.set(r[8],r[9],r[10]),this},makeBasis:function(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this},extractRotation:function(){var a=new THREE.Vector3;return function(t){var e=this.elements;t=t.elements;var i=1/a.set(t[0],t[1],t[2]).length(),r=1/a.set(t[4],t[5],t[6]).length(),n=1/a.set(t[8],t[9],t[10]).length();return e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,this}}(),makeRotationFromEuler:function(t){!1==t instanceof THREE.Euler&&console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,i=t.x,r=t.y,n=t.z,a=Math.cos(i),o=(i=Math.sin(i),Math.cos(r)),s=(r=Math.sin(r),Math.cos(n));n=Math.sin(n);if("XYZ"===t.order){t=a*s;var l=a*n,h=i*s,c=i*n;e[0]=o*s,e[4]=-o*n,e[8]=r,e[1]=l+h*r,e[5]=t-c*r,e[9]=-i*o,e[2]=c-t*r,e[6]=h+l*r,e[10]=a*o}else"YXZ"===t.order?(t=o*s,l=o*n,h=r*s,c=r*n,e[0]=t+c*i,e[4]=h*i-l,e[8]=a*r,e[1]=a*n,e[5]=a*s,e[9]=-i,e[2]=l*i-h,e[6]=c+t*i,e[10]=a*o):"ZXY"===t.order?(t=o*s,l=o*n,h=r*s,c=r*n,e[0]=t-c*i,e[4]=-a*n,e[8]=h+l*i,e[1]=l+h*i,e[5]=a*s,e[9]=c-t*i,e[2]=-a*r,e[6]=i,e[10]=a*o):"ZYX"===t.order?(t=a*s,l=a*n,h=i*s,c=i*n,e[0]=o*s,e[4]=h*r-l,e[8]=t*r+c,e[1]=o*n,e[5]=c*r+t,e[9]=l*r-h,e[2]=-r,e[6]=i*o,e[10]=a*o):"YZX"===t.order?(t=a*o,l=a*r,h=i*o,c=i*r,e[0]=o*s,e[4]=c-t*n,e[8]=h*n+l,e[1]=n,e[5]=a*s,e[9]=-i*s,e[2]=-r*s,e[6]=l*n+h,e[10]=t-c*n):"XZY"===t.order&&(t=a*o,l=a*r,h=i*o,c=i*r,e[0]=o*s,e[4]=-n,e[8]=r*s,e[1]=t*n+c,e[5]=a*s,e[9]=l*n-h,e[2]=h*n-l,e[6]=i*s,e[10]=c*n+t);return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},setRotationFromQuaternion:function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},makeRotationFromQuaternion:function(t){var e=this.elements,i=t.x,r=t.y,n=t.z,a=t.w,o=n+n;t=i*(h=i+i);var s=i*(c=r+r),l=(i=i*o,r*c),h=(r=r*o,n=n*o,a*h),c=a*c;a*=o;return e[0]=1-(l+n),e[4]=s-a,e[8]=i+c,e[1]=s+a,e[5]=1-(t+n),e[9]=r-h,e[2]=i-c,e[6]=r+h,e[10]=1-(t+l),e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},lookAt:function(){var n=new THREE.Vector3,a=new THREE.Vector3,o=new THREE.Vector3;return function(t,e,i){var r=this.elements;return o.subVectors(t,e).normalize(),0===o.length()&&(o.z=1),n.crossVectors(i,o).normalize(),0===n.length()&&(o.x+=1e-4,n.crossVectors(i,o).normalize()),a.crossVectors(o,n),r[0]=n.x,r[4]=a.x,r[8]=o.x,r[1]=n.y,r[5]=a.y,r[9]=o.y,r[2]=n.z,r[6]=a.z,r[10]=o.z,this}}(),multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},multiplyMatrices:function(t,e){var i=t.elements,r=e.elements,n=this.elements,a=i[0],o=i[4],s=i[8],l=i[12],h=i[1],c=i[5],u=i[9],d=i[13],p=i[2],f=i[6],m=i[10],g=i[14],E=i[3],v=i[7],y=i[11],T=(i=i[15],r[0]),x=r[4],b=r[8],R=r[12],w=r[1],H=r[5],_=r[9],S=r[13],C=r[2],M=r[6],A=r[10],P=r[14],L=r[3],D=r[7],F=r[11];r=r[15];return n[0]=a*T+o*w+s*C+l*L,n[4]=a*x+o*H+s*M+l*D,n[8]=a*b+o*_+s*A+l*F,n[12]=a*R+o*S+s*P+l*r,n[1]=h*T+c*w+u*C+d*L,n[5]=h*x+c*H+u*M+d*D,n[9]=h*b+c*_+u*A+d*F,n[13]=h*R+c*S+u*P+d*r,n[2]=p*T+f*w+m*C+g*L,n[6]=p*x+f*H+m*M+g*D,n[10]=p*b+f*_+m*A+g*F,n[14]=p*R+f*S+m*P+g*r,n[3]=E*T+v*w+y*C+i*L,n[7]=E*x+v*H+y*M+i*D,n[11]=E*b+v*_+y*A+i*F,n[15]=E*R+v*S+y*P+i*r,this},multiplyToArray:function(t,e,i){var r=this.elements;return this.multiplyMatrices(t,e),i[0]=r[0],i[1]=r[1],i[2]=r[2],i[3]=r[3],i[4]=r[4],i[5]=r[5],i[6]=r[6],i[7]=r[7],i[8]=r[8],i[9]=r[9],i[10]=r[10],i[11]=r[11],i[12]=r[12],i[13]=r[13],i[14]=r[14],i[15]=r[15],this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},multiplyVector3:function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead."),t.applyProjection(this)},multiplyVector4:function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector3Array:function(t){return console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(t)},applyToVector3Array:function(){var n=new THREE.Vector3;return function(t,e,i){void 0===e&&(e=0),void 0===i&&(i=t.length);for(var r=0;r<i;r+=3,e+=3)n.x=t[e],n.y=t[e+1],n.z=t[e+2],n.applyMatrix4(this),t[e]=n.x,t[e+1]=n.y,t[e+2]=n.z;return t}}(),rotateAxis:function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},crossVector:function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},determinant:function(){var t=this.elements,e=t[0],i=t[4],r=t[8],n=t[12],a=t[1],o=t[5],s=t[9],l=t[13],h=t[2],c=t[6],u=t[10],d=t[14];return t[3]*(+n*s*c-r*l*c-n*o*u+i*l*u+r*o*d-i*s*d)+t[7]*(+e*s*d-e*l*u+n*a*u-r*a*d+r*l*h-n*s*h)+t[11]*(+e*l*c-e*o*d-n*a*c+i*a*d+n*o*h-i*l*h)+t[15]*(-r*o*h-e*s*c+e*o*u+r*a*c-i*a*u+i*s*h)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},flattenToArrayOffset:function(t,e){var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t},getPosition:function(){var e=new THREE.Vector3;return function(){console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");var t=this.elements;return e.set(t[12],t[13],t[14])}}(),setPosition:function(t){var e=this.elements;return e[12]=t.x,e[13]=t.y,e[14]=t.z,this},getInverse:function(t,e){var i=this.elements,r=(v=t.elements)[0],n=v[4],a=v[8],o=v[12],s=v[1],l=v[5],h=v[9],c=v[13],u=v[2],d=v[6],p=v[10],f=v[14],m=v[3],g=v[7],E=v[11],v=v[15];if(i[0]=h*f*g-c*p*g+c*d*E-l*f*E-h*d*v+l*p*v,i[4]=o*p*g-a*f*g-o*d*E+n*f*E+a*d*v-n*p*v,i[8]=a*c*g-o*h*g+o*l*E-n*c*E-a*l*v+n*h*v,i[12]=o*h*d-a*c*d-o*l*p+n*c*p+a*l*f-n*h*f,i[1]=c*p*m-h*f*m-c*u*E+s*f*E+h*u*v-s*p*v,i[5]=a*f*m-o*p*m+o*u*E-r*f*E-a*u*v+r*p*v,i[9]=o*h*m-a*c*m-o*s*E+r*c*E+a*s*v-r*h*v,i[13]=a*c*u-o*h*u+o*s*p-r*c*p-a*s*f+r*h*f,i[2]=l*f*m-c*d*m+c*u*g-s*f*g-l*u*v+s*d*v,i[6]=o*d*m-n*f*m-o*u*g+r*f*g+n*u*v-r*d*v,i[10]=n*c*m-o*l*m+o*s*g-r*c*g-n*s*v+r*l*v,i[14]=o*l*u-n*c*u-o*s*d+r*c*d+n*s*f-r*l*f,i[3]=h*d*m-l*p*m-h*u*g+s*p*g+l*u*E-s*d*E,i[7]=n*p*m-a*d*m+a*u*g-r*p*g-n*u*E+r*d*E,i[11]=a*l*m-n*h*m-a*s*g+r*h*g+n*s*E-r*l*E,i[15]=n*h*u-a*l*u+a*s*d-r*h*d-n*s*p+r*l*p,0!=(i=r*i[0]+s*i[4]+u*i[8]+m*i[12]))return this.multiplyScalar(1/i),this;if(e)throw Error("Matrix4.getInverse(): can't invert matrix, determinant is 0");return console.warn("Matrix4.getInverse(): can't invert matrix, determinant is 0"),this.identity(),this},translate:function(t){console.warn("THREE.Matrix4: .translate() has been removed.")},rotateX:function(t){console.warn("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(t){console.warn("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(t){console.warn("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(t,e){console.warn("THREE.Matrix4: .rotateByAxis() has been removed.")},scale:function(t){var e=this.elements,i=t.x,r=t.y;return t=t.z,e[0]*=i,e[4]*=r,e[8]*=t,e[1]*=i,e[5]*=r,e[9]*=t,e[2]*=i,e[6]*=r,e[10]*=t,e[3]*=i,e[7]*=r,e[11]*=t,this},getMaxScaleOnAxis:function(){var t=this.elements;return Math.sqrt(Math.max(t[0]*t[0]+t[1]*t[1]+t[2]*t[2],Math.max(t[4]*t[4]+t[5]*t[5]+t[6]*t[6],t[8]*t[8]+t[9]*t[9]+t[10]*t[10])))},makeTranslation:function(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t);return t=Math.sin(t),this.set(1,0,0,0,0,e,-t,0,0,t,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t);return t=Math.sin(t),this.set(e,0,t,0,0,1,0,0,-t,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t);return t=Math.sin(t),this.set(e,-t,0,0,t,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var i=Math.cos(e),r=Math.sin(e),n=1-i,a=t.x,o=t.y,s=t.z,l=n*a,h=n*o;return this.set(l*a+i,l*o-r*s,l*s+r*o,0,l*o+r*s,h*o+i,h*s-r*a,0,l*s-r*o,h*s+r*a,n*s*s+i,0,0,0,0,1),this},makeScale:function(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this},compose:function(t,e,i){return this.makeRotationFromQuaternion(e),this.scale(i),this.setPosition(t),this},decompose:function(){var l=new THREE.Vector3,h=new THREE.Matrix4;return function(t,e,i){var r=this.elements,n=l.set(r[0],r[1],r[2]).length(),a=l.set(r[4],r[5],r[6]).length(),o=l.set(r[8],r[9],r[10]).length();this.determinant()<0&&(n=-n),t.x=r[12],t.y=r[13],t.z=r[14],h.elements.set(this.elements),t=1/n;r=1/a;var s=1/o;return h.elements[0]*=t,h.elements[1]*=t,h.elements[2]*=t,h.elements[4]*=r,h.elements[5]*=r,h.elements[6]*=r,h.elements[8]*=s,h.elements[9]*=s,h.elements[10]*=s,e.setFromRotationMatrix(h),i.x=n,i.y=a,i.z=o,this}}(),makeFrustum:function(t,e,i,r,n,a){var o=this.elements;return o[0]=2*n/(e-t),o[4]=0,o[8]=(e+t)/(e-t),o[12]=0,o[1]=0,o[5]=2*n/(r-i),o[9]=(r+i)/(r-i),o[13]=0,o[2]=0,o[6]=0,o[10]=-(a+n)/(a-n),o[14]=-2*a*n/(a-n),o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makePerspective:function(t,e,i,r){var n=-(t=i*Math.tan(THREE.Math.degToRad(.5*t)));return this.makeFrustum(n*e,t*e,n,t,i,r)},makeOrthographic:function(t,e,i,r,n,a){var o=this.elements,s=e-t,l=i-r,h=a-n;return o[0]=2/s,o[4]=0,o[8]=0,o[12]=-(e+t)/s,o[1]=0,o[5]=2/l,o[9]=0,o[13]=-(i+r)/l,o[2]=0,o[6]=0,o[10]=-2/h,o[14]=-(a+n)/h,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},fromArray:function(t){return this.elements.set(t),this},toArray:function(){var t=this.elements;return[t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15]]},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)}},THREE.Ray=function(t,e){this.origin=void 0!==t?t:new THREE.Vector3,this.direction=void 0!==e?e:new THREE.Vector3},THREE.Ray.prototype={constructor:THREE.Ray,set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return(e||new THREE.Vector3).copy(this.direction).multiplyScalar(t).add(this.origin)},recast:function(){var e=new THREE.Vector3;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(t,e){var i=e||new THREE.Vector3;i.subVectors(t,this.origin);var r=i.dot(this.direction);return r<0?i.copy(this.origin):i.copy(this.direction).multiplyScalar(r).add(this.origin)},distanceToPoint:function(){var i=new THREE.Vector3;return function(t){var e=i.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceTo(t):(i.copy(this.direction).multiplyScalar(e).add(this.origin),i.distanceTo(t))}}(),distanceSqToSegment:function(){var u=new THREE.Vector3,d=new THREE.Vector3,p=new THREE.Vector3;return function(t,e,i,r){u.copy(t).add(e).multiplyScalar(.5),d.copy(e).sub(t).normalize(),p.copy(this.origin).sub(u);var n,a=.5*t.distanceTo(e),o=-this.direction.dot(d),s=p.dot(this.direction),l=-p.dot(d),h=p.lengthSq(),c=Math.abs(1-o*o);return o=0<c?(e=o*s-l,n=a*c,0<=(t=o*l-s)?-n<=e?e<=n?(t*=a=1/c)*(t+o*(e*=a)+2*s)+e*(o*t+e+2*l)+h:(e=a,-(t=Math.max(0,-(o*e+s)))*t+e*(e+2*l)+h):(e=-a,-(t=Math.max(0,-(o*e+s)))*t+e*(e+2*l)+h):e<=-n?-(t=Math.max(0,-(-o*a+s)))*t+(e=0<t?-a:Math.min(Math.max(-a,-l),a))*(e+2*l)+h:e<=n?(t=0,(e=Math.min(Math.max(-a,-l),a))*(e+2*l)+h):-(t=Math.max(0,-(o*a+s)))*t+(e=0<t?a:Math.min(Math.max(-a,-l),a))*(e+2*l)+h):(e=0<o?-a:a,-(t=Math.max(0,-(o*e+s)))*t+e*(e+2*l)+h),i&&i.copy(this.direction).multiplyScalar(t).add(this.origin),r&&r.copy(d).multiplyScalar(e).add(u),o}}(),isIntersectionSphere:function(t){return this.distanceToPoint(t.center)<=t.radius},intersectSphere:function(){var a=new THREE.Vector3;return function(t,e){a.subVectors(t.center,this.origin);var i=a.dot(this.direction),r=a.dot(a)-i*i,n=t.radius*t.radius;return n<r?null:(r=i-(n=Math.sqrt(n-r)),i+=n,r<0&&i<0?null:r<0?this.at(i,e):this.at(r,e))}}(),isIntersectionPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},distanceToPlane:function(t){var e=t.normal.dot(this.direction);return 0==e?0==t.distanceToPoint(this.origin)?0:null:0<=(t=-(this.origin.dot(t.normal)+t.constant)/e)?t:null},intersectPlane:function(t,e){var i=this.distanceToPlane(t);return null===i?null:this.at(i,e)},isIntersectionBox:function(){var e=new THREE.Vector3;return function(t){return null!==this.intersectBox(t,e)}}(),intersectBox:function(t,e){var i,r,n,a,o;r=1/this.direction.x,a=1/this.direction.y,o=1/this.direction.z;var s=this.origin;return 0<=r?(i=(t.min.x-s.x)*r,r*=t.max.x-s.x):(i=(t.max.x-s.x)*r,r*=t.min.x-s.x),0<=a?(n=(t.min.y-s.y)*a,a*=t.max.y-s.y):(n=(t.max.y-s.y)*a,a*=t.min.y-s.y),a<i||r<n?null:((i<n||i!=i)&&(i=n),(a<r||r!=r)&&(r=a),0<=o?(n=(t.min.z-s.z)*o,o*=t.max.z-s.z):(n=(t.max.z-s.z)*o,o*=t.min.z-s.z),o<i||r<n?null:((i<n||i!=i)&&(i=n),(o<r||r!=r)&&(r=o),r<0?null:this.at(0<=i?i:r,e)))},intersectTriangle:function(){var a=new THREE.Vector3,o=new THREE.Vector3,s=new THREE.Vector3,l=new THREE.Vector3;return function(t,e,i,r,n){if(o.subVectors(e,t),s.subVectors(i,t),l.crossVectors(o,s),0<(e=this.direction.dot(l))){if(r)return null;r=1}else{if(!(e<0))return null;r=-1,e=-e}return a.subVectors(this.origin,t),(t=r*this.direction.dot(s.crossVectors(a,s)))<0?null:(i=r*this.direction.dot(o.cross(a)))<0||e<t+i?null:(t=-r*a.dot(l))<0?null:this.at(t/e,n)}}(),applyMatrix4:function(t){return this.direction.add(this.origin).applyMatrix4(t),this.origin.applyMatrix4(t),this.direction.sub(this.origin),this.direction.normalize(),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)},clone:function(){return(new THREE.Ray).copy(this)}},THREE.Sphere=function(t,e){this.center=void 0!==t?t:new THREE.Vector3,this.radius=void 0!==e?e:0},THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:function(){var o=new THREE.Box3;return function(t,e){var i=this.center;void 0!==e?i.copy(e):o.setFromPoints(t).center(i);for(var r=0,n=0,a=t.length;n<a;n++)r=Math.max(r,i.distanceToSquared(t[n]));return this.radius=Math.sqrt(r),this}}(),copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},clampPoint:function(t,e){var i=this.center.distanceToSquared(t),r=e||new THREE.Vector3;return r.copy(t),i>this.radius*this.radius&&(r.sub(this.center).normalize(),r.multiplyScalar(this.radius).add(this.center)),r},getBoundingBox:function(t){return(t=t||new THREE.Box3).set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius*=t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}},THREE.Frustum=function(t,e,i,r,n,a){this.planes=[void 0!==t?t:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==i?i:new THREE.Plane,void 0!==r?r:new THREE.Plane,void 0!==n?n:new THREE.Plane,void 0!==a?a:new THREE.Plane]},THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(t,e,i,r,n,a){var o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(i),o[3].copy(r),o[4].copy(n),o[5].copy(a),this},copy:function(t){for(var e=this.planes,i=0;i<6;i++)e[i].copy(t.planes[i]);return this},setFromMatrix:function(t){var e=this.planes;t=(g=t.elements)[0];var i=g[1],r=g[2],n=g[3],a=g[4],o=g[5],s=g[6],l=g[7],h=g[8],c=g[9],u=g[10],d=g[11],p=g[12],f=g[13],m=g[14],g=g[15];return e[0].setComponents(n-t,l-a,d-h,g-p).normalize(),e[1].setComponents(n+t,l+a,d+h,g+p).normalize(),e[2].setComponents(n+i,l+o,d+c,g+f).normalize(),e[3].setComponents(n-i,l-o,d-c,g-f).normalize(),e[4].setComponents(n-r,l-s,d-u,g-m).normalize(),e[5].setComponents(n+r,l+s,d+u,g+m).normalize(),this},intersectsObject:function(){var i=new THREE.Sphere;return function(t){var e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),i.copy(e.boundingSphere),i.applyMatrix4(t.matrixWorld),this.intersectsSphere(i)}}(),intersectsSphere:function(t){var e=this.planes,i=t.center;t=-t.radius;for(var r=0;r<6;r++)if(e[r].distanceToPoint(i)<t)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,o=new THREE.Vector3;return function(t){for(var e=this.planes,i=0;i<6;i++){var r=e[i];a.x=0<r.normal.x?t.min.x:t.max.x,o.x=0<r.normal.x?t.max.x:t.min.x,a.y=0<r.normal.y?t.min.y:t.max.y,o.y=0<r.normal.y?t.max.y:t.min.y,a.z=0<r.normal.z?t.min.z:t.max.z,o.z=0<r.normal.z?t.max.z:t.min.z;var n=r.distanceToPoint(a);r=r.distanceToPoint(o);if(n<0&&r<0)return!1}return!0}}(),containsPoint:function(t){for(var e=this.planes,i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}},THREE.Plane=function(t,e){this.normal=void 0!==t?t:new THREE.Vector3(1,0,0),this.constant=void 0!==e?e:0},THREE.Plane.prototype={constructor:THREE.Plane,set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,i,r){return this.normal.set(t,e,i),this.constant=r,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(){var r=new THREE.Vector3,n=new THREE.Vector3;return function(t,e,i){return e=r.subVectors(i,e).cross(n.subVectors(t,e)).normalize(),this.setFromNormalAndCoplanarPoint(e,t),this}}(),copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return this.orthoPoint(t,e).sub(t).negate()},orthoPoint:function(t,e){var i=this.distanceToPoint(t);return(e||new THREE.Vector3).copy(this.normal).multiplyScalar(i)},isIntersectionLine:function(t){var e=this.distanceToPoint(t.start);return t=this.distanceToPoint(t.end),e<0&&0<t||t<0&&0<e},intersectLine:function(){var a=new THREE.Vector3;return function(t,e){var i=e||new THREE.Vector3,r=t.delta(a),n=this.normal.dot(r);return 0!=n?(n=-(t.start.dot(this.normal)+this.constant)/n)<0||1<n?void 0:i.copy(r).multiplyScalar(n).add(t.start):0==this.distanceToPoint(t.start)?i.copy(t.start):void 0}}(),coplanarPoint:function(t){return(t||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var n=new THREE.Vector3,a=new THREE.Vector3,o=new THREE.Matrix3;return function(t,e){var i=e||o.getNormalMatrix(t),r=(i=n.copy(this.normal).applyMatrix3(i),this.coplanarPoint(a));return r.applyMatrix4(t),this.setFromNormalAndCoplanarPoint(i,r),this}}(),translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}},THREE.Math={generateUUID:function(){var e,i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),r=Array(36),n=0;return function(){for(var t=0;t<36;t++)8==t||13==t||18==t||23==t?r[t]="-":14==t?r[t]="4":(n<=2&&(n=33554432+16777216*Math.random()|0),e=15&n,n>>=4,r[t]=i[19==t?3&e|8:e]);return r.join("")}}(),clamp:function(t,e,i){return t<e?e:i<t?i:t},clampBottom:function(t,e){return t<e?e:t},mapLinear:function(t,e,i,r,n){return r+(t-e)*(n-r)/(i-e)},smoothstep:function(t,e,i){return t<=e?0:i<=t?1:(t=(t-e)/(i-e))*t*(3-2*t)},smootherstep:function(t,e,i){return t<=e?0:i<=t?1:(t=(t-e)/(i-e))*t*t*(t*(6*t-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(t,e){return Math.floor(this.randFloat(t,e))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(){var e=Math.PI/180;return function(t){return t*e}}(),radToDeg:function(){var e=180/Math.PI;return function(t){return t*e}}(),isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t}},THREE.Spline=function(t){function e(t,e,i,r,n,a,o){return(2*(e-i)+(t=.5*(i-t))+(r=.5*(r-e)))*o+(-3*(e-i)-2*t-r)*a+t*n+e}this.points=t;var i,r,n,a,o,s,l,h,c,u=[],d={x:0,y:0,z:0};this.initFromArray=function(t){this.points=[];for(var e=0;e<t.length;e++)this.points[e]={x:t[e][0],y:t[e][1],z:t[e][2]}},this.getPoint=function(t){return i=(this.points.length-1)*t,r=Math.floor(i),n=i-r,u[0]=0===r?r:r-1,u[1]=r,u[2]=r>this.points.length-2?this.points.length-1:r+1,u[3]=r>this.points.length-3?this.points.length-1:r+2,s=this.points[u[0]],l=this.points[u[1]],h=this.points[u[2]],c=this.points[u[3]],o=n*(a=n*n),d.x=e(s.x,l.x,h.x,c.x,n,a,o),d.y=e(s.y,l.y,h.y,c.y,n,a,o),d.z=e(s.z,l.z,h.z,c.z,n,a,o),d},this.getControlPointsArray=function(){var t,e,i=this.points.length,r=[];for(t=0;t<i;t++)e=this.points[t],r[t]=[e.x,e.y,e.z];return r},this.getLength=function(t){var e,i,r,n=e=e=0,a=new THREE.Vector3,o=new THREE.Vector3,s=[],l=0;for(s[0]=0,t=t||100,i=this.points.length*t,a.copy(this.points[0]),t=1;t<i;t++)e=t/i,r=this.getPoint(e),o.copy(r),l+=o.distanceTo(a),a.copy(r),e*=this.points.length-1,(e=Math.floor(e))!=n&&(s[e]=l,n=e);return s[s.length]=l,{chunks:s,total:l}},this.reparametrizeByArcLength=function(t){var e,i,r,n,a,o,s=[],l=new THREE.Vector3,h=this.getLength();for(s.push(l.copy(this.points[0]).clone()),e=1;e<this.points.length;e++){for(i=h.chunks[e]-h.chunks[e-1],o=Math.ceil(t*i/h.total),n=(e-1)/(this.points.length-1),a=e/(this.points.length-1),i=1;i<o-1;i++)r=n+1/o*i*(a-n),r=this.getPoint(r),s.push(l.copy(r).clone());s.push(l.copy(this.points[e]).clone())}this.points=s}},THREE.Triangle=function(t,e,i){this.a=void 0!==t?t:new THREE.Vector3,this.b=void 0!==e?e:new THREE.Vector3,this.c=void 0!==i?i:new THREE.Vector3},THREE.Triangle.normal=function(){var n=new THREE.Vector3;return function(t,e,i,r){return(r=r||new THREE.Vector3).subVectors(i,e),n.subVectors(t,e),r.cross(n),0<(t=r.lengthSq())?r.multiplyScalar(1/Math.sqrt(t)):r.set(0,0,0)}}(),THREE.Triangle.barycoordFromPoint=function(){var s=new THREE.Vector3,l=new THREE.Vector3,h=new THREE.Vector3;return function(t,e,i,r,n){s.subVectors(r,e),l.subVectors(i,e),h.subVectors(t,e),t=s.dot(s),e=s.dot(l),i=s.dot(h);var a=l.dot(l);r=l.dot(h);var o=t*a-e*e;return n=n||new THREE.Vector3,0==o?n.set(-2,-1,-1):(a=(a*i-e*r)*(o=1/o),t=(t*r-e*i)*o,n.set(1-a-t,t,a))}}(),THREE.Triangle.containsPoint=function(){var n=new THREE.Vector3;return function(t,e,i,r){return 0<=(t=THREE.Triangle.barycoordFromPoint(t,e,i,r,n)).x&&0<=t.y&&t.x+t.y<=1}}(),THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this},setFromPointsAndIndices:function(t,e,i,r){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[r]),this},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},area:function(){var t=new THREE.Vector3,e=new THREE.Vector3;return function(){return t.subVectors(this.c,this.b),e.subVectors(this.a,this.b),.5*t.cross(e).length()}}(),midpoint:function(t){return(t||new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(t){return THREE.Triangle.normal(this.a,this.b,this.c,t)},plane:function(t){return(t||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(t,e){return THREE.Triangle.barycoordFromPoint(t,this.a,this.b,this.c,e)},containsPoint:function(t){return THREE.Triangle.containsPoint(t,this.a,this.b,this.c)},equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)},clone:function(){return(new THREE.Triangle).copy(this)}},THREE.Clock=function(t){this.autoStart=void 0===t||t,this.elapsedTime=this.oldTime=this.startTime=0,this.running=!1},THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now(),this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running&&this.start(),this.running){var e=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now();t=.001*(e-this.oldTime);this.oldTime=e,this.elapsedTime+=t}return t}},THREE.EventDispatcher=function(){},THREE.EventDispatcher.prototype={constructor:THREE.EventDispatcher,apply:function(t){t.addEventListener=THREE.EventDispatcher.prototype.addEventListener,t.hasEventListener=THREE.EventDispatcher.prototype.hasEventListener,t.removeEventListener=THREE.EventDispatcher.prototype.removeEventListener,t.dispatchEvent=THREE.EventDispatcher.prototype.dispatchEvent},addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var i=this._listeners;return void 0!==i[t]&&-1!==i[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var i=this._listeners[t];if(void 0!==i){var r=i.indexOf(e);-1!==r&&i.splice(r,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var i=[],r=e.length,n=0;n<r;n++)i[n]=e[n];for(n=0;n<r;n++)i[n].call(this,t)}}}},function(n){n.Raycaster=function(t,e,i,r){this.ray=new n.Ray(t,e),this.near=i||0,this.far=r||1/0,this.params={Sprite:{},Mesh:{},PointCloud:{threshold:1},LOD:{},Line:{}}};function a(t,e){return t.distance-e.distance}var o=function(t,e,i,r){if(t.raycast(e,i),!0===r){r=0;for(var n=(t=t.children).length;r<n;r++)o(t[r],e,i,!0)}};n.Raycaster.prototype={constructor:n.Raycaster,precision:1e-4,linePrecision:1,set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e instanceof n.PerspectiveCamera?(this.ray.origin.copy(e.position),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(e.position).normalize()):e instanceof n.OrthographicCamera?(this.ray.origin.set(t.x,t.y,-1).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(t,e){var i=[];return o(t,this,i,e),i.sort(a),i},intersectObjects:function(t,e){var i=[];if(!1==t instanceof Array)return console.log("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(var r=0,n=t.length;r<n;r++)o(t[r],this,i,e);return i.sort(a),i}}}(THREE),THREE.Object3D=function(){Object.defineProperty(this,"id",{value:THREE.Object3DIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Object3D",this.parent=void 0,this.children=[],this.up=THREE.Object3D.DefaultUp.clone();var t=new THREE.Vector3,e=new THREE.Euler,i=new THREE.Quaternion,r=new THREE.Vector3(1,1,1);e.onChange(function(){i.setFromEuler(e,!1)}),i.onChange(function(){e.setFromQuaternion(i,void 0,!1)}),Object.defineProperties(this,{position:{enumerable:!0,value:t},rotation:{enumerable:!0,value:e},quaternion:{enumerable:!0,value:i},scale:{enumerable:!0,value:r}}),this.rotationAutoUpdate=!0,this.matrix=new THREE.Matrix4,this.matrixWorld=new THREE.Matrix4,this.matrixAutoUpdate=!0,this.matrixWorldNeedsUpdate=!1,this.visible=!0,this.receiveShadow=this.castShadow=!1,this.frustumCulled=!0,this.userData={}},THREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0),THREE.Object3D.prototype={constructor:THREE.Object3D,get eulerOrder(){return console.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order."),this.rotation.order},set eulerOrder(t){console.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order."),this.rotation.order=t},get useQuaternion(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set useQuaternion(t){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},applyMatrix:function(t){this.matrix.multiplyMatrices(t,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:function(){var i=new THREE.Quaternion;return function(t,e){return i.setFromAxisAngle(t,e),this.quaternion.multiply(i),this}}(),rotateX:function(){var e=new THREE.Vector3(1,0,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateY:function(){var e=new THREE.Vector3(0,1,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateZ:function(){var e=new THREE.Vector3(0,0,1);return function(t){return this.rotateOnAxis(e,t)}}(),translateOnAxis:function(){var i=new THREE.Vector3;return function(t,e){return i.copy(t).applyQuaternion(this.quaternion),this.position.add(i.multiplyScalar(e)),this}}(),translate:function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},translateX:function(){var e=new THREE.Vector3(1,0,0);return function(t){return this.translateOnAxis(e,t)}}(),translateY:function(){var e=new THREE.Vector3(0,1,0);return function(t){return this.translateOnAxis(e,t)}}(),translateZ:function(){var e=new THREE.Vector3(0,0,1);return function(t){return this.translateOnAxis(e,t)}}(),localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var e=new THREE.Matrix4;return function(t){return t.applyMatrix4(e.getInverse(this.matrixWorld))}}(),lookAt:function(){var e=new THREE.Matrix4;return function(t){e.lookAt(t,this.position,this.up),this.quaternion.setFromRotationMatrix(e)}}(),add:function(t){if(1<arguments.length){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?console.error("THREE.Object3D.add:",t,"can't be added as a child of itself."):t instanceof THREE.Object3D?(void 0!==t.parent&&t.parent.remove(t),t.parent=this,t.dispatchEvent({type:"added"}),this.children.push(t)):console.error("THREE.Object3D.add:",t,"is not an instance of THREE.Object3D."),this},remove:function(t){if(1<arguments.length)for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);-1!==(e=this.children.indexOf(t))&&(t.parent=void 0,t.dispatchEvent({type:"removed"}),this.children.splice(e,1))},getChildByName:function(t,e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t,e)},getObjectById:function(t,e){return this.getObjectByProperty("id",t,e)},getObjectByName:function(t,e){return this.getObjectByProperty("name",t,e)},getObjectByProperty:function(t,e,i){if(this[t]===e)return this;for(var r=0,n=this.children.length;r<n;r++){var a=this.children[r].getObjectByProperty(t,e,i);if(void 0!==a)return a}},getWorldPosition:function(t){return t=t||new THREE.Vector3,this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var e=new THREE.Vector3,i=new THREE.Vector3;return function(t){return t=t||new THREE.Quaternion,this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,t,i),t}}(),getWorldRotation:function(){var e=new THREE.Quaternion;return function(t){return t=t||new THREE.Euler,this.getWorldQuaternion(e),t.setFromQuaternion(e,this.rotation.order,!1)}}(),getWorldScale:function(){var e=new THREE.Vector3,i=new THREE.Quaternion;return function(t){return t=t||new THREE.Vector3,this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,i,t),t}}(),getWorldDirection:function(){var e=new THREE.Quaternion;return function(t){return t=t||new THREE.Vector3,this.getWorldQuaternion(e),t.set(0,0,1).applyQuaternion(e)}}(),raycast:function(){},traverse:function(t){t(this);for(var e=0,i=this.children.length;e<i;e++)this.children[e].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=0,i=this.children.length;e<i;e++)this.children[e].traverseVisible(t)}},traverseAncestors:function(t){this.parent&&(t(this.parent),this.parent.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==t||(void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t=!(this.matrixWorldNeedsUpdate=!1));for(var e=0,i=this.children.length;e<i;e++)this.children[e].updateMatrixWorld(t)},toJSON:function(){function r(t){if(void 0===i.geometries&&(i.geometries=[]),void 0===a[t.uuid]){var e=t.toJSON();delete e.metadata,a[t.uuid]=e,i.geometries.push(e)}return t.uuid}function n(t){if(void 0===i.materials&&(i.materials=[]),void 0===o[t.uuid]){var e=t.toJSON();delete e.metadata,o[t.uuid]=e,i.materials.push(e)}return t.uuid}var i={metadata:{version:4.3,type:"Object",generator:"ObjectExporter"}},a={},o={},s=function(t){var e={};if(e.uuid=t.uuid,e.type=t.type,""!==t.name&&(e.name=t.name),"{}"!==JSON.stringify(t.userData)&&(e.userData=t.userData),!0!==t.visible&&(e.visible=t.visible),t instanceof THREE.PerspectiveCamera?(e.fov=t.fov,e.aspect=t.aspect,e.near=t.near,e.far=t.far):t instanceof THREE.OrthographicCamera?(e.left=t.left,e.right=t.right,e.top=t.top,e.bottom=t.bottom,e.near=t.near,e.far=t.far):t instanceof THREE.AmbientLight?e.color=t.color.getHex():t instanceof THREE.DirectionalLight?(e.color=t.color.getHex(),e.intensity=t.intensity):t instanceof THREE.PointLight?(e.color=t.color.getHex(),e.intensity=t.intensity,e.distance=t.distance):t instanceof THREE.SpotLight?(e.color=t.color.getHex(),e.intensity=t.intensity,e.distance=t.distance,e.angle=t.angle,e.exponent=t.exponent):t instanceof THREE.HemisphereLight?(e.color=t.color.getHex(),e.groundColor=t.groundColor.getHex()):t instanceof THREE.Mesh?(e.geometry=r(t.geometry),e.material=n(t.material)):t instanceof THREE.Line?(e.geometry=r(t.geometry),e.material=n(t.material)):t instanceof THREE.Sprite&&(e.material=n(t.material)),e.matrix=t.matrix.toArray(),0<t.children.length){e.children=[];for(var i=0;i<t.children.length;i++)e.children.push(s(t.children[i]))}return e};return i.object=s(this),i},clone:function(t,e){if(void 0===t&&(t=new THREE.Object3D),void 0===e&&(e=!0),t.name=this.name,t.up.copy(this.up),t.position.copy(this.position),t.quaternion.copy(this.quaternion),t.scale.copy(this.scale),t.rotationAutoUpdate=this.rotationAutoUpdate,t.matrix.copy(this.matrix),t.matrixWorld.copy(this.matrixWorld),t.matrixAutoUpdate=this.matrixAutoUpdate,t.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate,t.visible=this.visible,t.castShadow=this.castShadow,t.receiveShadow=this.receiveShadow,t.frustumCulled=this.frustumCulled,t.userData=JSON.parse(JSON.stringify(this.userData)),!0===e)for(var i=0;i<this.children.length;i++)t.add(this.children[i].clone());return t}},THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype),THREE.Object3DIdCount=0,THREE.Face3=function(t,e,i,r,n,a){this.a=t,this.b=e,this.c=i,this.normal=r instanceof THREE.Vector3?r:new THREE.Vector3,this.vertexNormals=r instanceof Array?r:[],this.color=n instanceof THREE.Color?n:new THREE.Color,this.vertexColors=n instanceof Array?n:[],this.vertexTangents=[],this.materialIndex=void 0!==a?a:0},THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var t=new THREE.Face3(this.a,this.b,this.c);t.normal.copy(this.normal),t.color.copy(this.color),t.materialIndex=this.materialIndex;for(var e=0,i=this.vertexNormals.length;e<i;e++)t.vertexNormals[e]=this.vertexNormals[e].clone();for(e=0,i=this.vertexColors.length;e<i;e++)t.vertexColors[e]=this.vertexColors[e].clone();for(e=0,i=this.vertexTangents.length;e<i;e++)t.vertexTangents[e]=this.vertexTangents[e].clone();return t}},THREE.Face4=function(t,e,i,r,n,a,o){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new THREE.Face3(t,e,i,n,a,o)},THREE.BufferAttribute=function(t,e){this.array=t,this.itemSize=e,this.needsUpdate=!1},THREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get length(){return this.array.length},copyAt:function(t,e,i){t*=this.itemSize,i*=e.itemSize;for(var r=0,n=this.itemSize;r<n;r++)this.array[t+r]=e.array[i+r]},set:function(t){return this.array.set(t),this},setX:function(t,e){return this.array[t*this.itemSize]=e,this},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},setXY:function(t,e,i){return t*=this.itemSize,this.array[t]=e,this.array[t+1]=i,this},setXYZ:function(t,e,i,r){return t*=this.itemSize,this.array[t]=e,this.array[t+1]=i,this.array[t+2]=r,this},setXYZW:function(t,e,i,r,n){return t*=this.itemSize,this.array[t]=e,this.array[t+1]=i,this.array[t+2]=r,this.array[t+3]=n,this},clone:function(){return new THREE.BufferAttribute(new this.array.constructor(this.array),this.itemSize)}},THREE.Int8Attribute=function(t,e){return console.warn("THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.Uint8Attribute=function(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.Uint8ClampedAttribute=function(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.Int16Attribute=function(t,e){return console.warn("THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.Uint16Attribute=function(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.Int32Attribute=function(t,e){return console.warn("THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.Uint32Attribute=function(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.Float32Attribute=function(t,e){return console.warn("THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.Float64Attribute=function(t,e){return console.warn("THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead."),new THREE.BufferAttribute(t,e)},THREE.BufferGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="BufferGeometry",this.attributes={},this.attributesKeys=[],this.offsets=this.drawcalls=[],this.boundingSphere=this.boundingBox=null},THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,addAttribute:function(t,e,i){!1==e instanceof THREE.BufferAttribute?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.attributes[t]={array:e,itemSize:i}):(this.attributes[t]=e,this.attributesKeys=Object.keys(this.attributes))},getAttribute:function(t){return this.attributes[t]},addDrawCall:function(t,e,i){this.drawcalls.push({start:t,count:e,index:void 0!==i?i:0})},applyMatrix:function(t){var e=this.attributes.position;void 0!==e&&(t.applyToVector3Array(e.array),e.needsUpdate=!0),void 0!==(e=this.attributes.normal)&&((new THREE.Matrix3).getNormalMatrix(t).applyToVector3Array(e.array),e.needsUpdate=!0)},center:function(){},fromGeometry:function(t,e){e=e||{vertexColors:THREE.NoColors};var i=t.vertices,r=t.faces,n=t.faceVertexUvs,a=e.vertexColors,o=0<n[0].length,s=3==r[0].vertexNormals.length,l=new Float32Array(9*r.length);this.addAttribute("position",new THREE.BufferAttribute(l,3));var h=new Float32Array(9*r.length);if(this.addAttribute("normal",new THREE.BufferAttribute(h,3)),a!==THREE.NoColors){var c=new Float32Array(9*r.length);this.addAttribute("color",new THREE.BufferAttribute(c,3))}if(!0==o){var u=new Float32Array(6*r.length);this.addAttribute("uv",new THREE.BufferAttribute(u,2))}for(var d=0,p=0,f=0;d<r.length;d++,p+=6,f+=9){var m=r[d],g=i[m.a],E=i[m.b],v=i[m.c];l[f]=g.x,l[f+1]=g.y,l[f+2]=g.z,l[f+3]=E.x,l[f+4]=E.y,l[f+5]=E.z,l[f+6]=v.x,l[f+7]=v.y,l[f+8]=v.z,!0==s?(g=m.vertexNormals[0],E=m.vertexNormals[1],v=m.vertexNormals[2],h[f]=g.x,h[f+1]=g.y,h[f+2]=g.z,h[f+3]=E.x,h[f+4]=E.y,h[f+5]=E.z,h[f+6]=v.x,h[f+7]=v.y,h[f+8]=v.z):(g=m.normal,h[f]=g.x,h[f+1]=g.y,h[f+2]=g.z,h[f+3]=g.x,h[f+4]=g.y,h[f+5]=g.z,h[f+6]=g.x,h[f+7]=g.y,h[f+8]=g.z),a===THREE.FaceColors?(m=m.color,c[f]=m.r,c[f+1]=m.g,c[f+2]=m.b,c[f+3]=m.r,c[f+4]=m.g,c[f+5]=m.b,c[f+6]=m.r,c[f+7]=m.g,c[f+8]=m.b):a===THREE.VertexColors&&(g=m.vertexColors[0],E=m.vertexColors[1],m=m.vertexColors[2],c[f]=g.r,c[f+1]=g.g,c[f+2]=g.b,c[f+3]=E.r,c[f+4]=E.g,c[f+5]=E.b,c[f+6]=m.r,c[f+7]=m.g,c[f+8]=m.b),!0==o&&(m=n[0][d][0],g=n[0][d][1],E=n[0][d][2],u[p]=m.x,u[p+1]=m.y,u[p+2]=g.x,u[p+3]=g.y,u[p+4]=E.x,u[p+5]=E.y)}return this.computeBoundingSphere(),this},computeBoundingBox:function(){var n=new THREE.Vector3;return function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var t=this.attributes.position.array;if(t){var e=this.boundingBox;e.makeEmpty();for(var i=0,r=t.length;i<r;i+=3)n.set(t[i],t[i+1],t[i+2]),e.expandByPoint(n)}void 0!==t&&0!==t.length||(this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.')}}(),computeBoundingSphere:function(){var a=new THREE.Box3,o=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var t=this.attributes.position.array;if(t){a.makeEmpty();for(var e=this.boundingSphere.center,i=0,r=t.length;i<r;i+=3)o.set(t[i],t[i+1],t[i+2]),a.expandByPoint(o);a.center(e);var n=0;for(i=0,r=t.length;i<r;i+=3)o.set(t[i],t[i+1],t[i+2]),n=Math.max(n,e.distanceToSquared(o));this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.')}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.attributes;if(t.position){var e=t.position.array;if(void 0===t.normal)this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(e.length),3));else for(var i=0,r=(s=t.normal.array).length;i<r;i++)s[i]=0;var n,a,o,s=t.normal.array,l=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Vector3,u=new THREE.Vector3,d=new THREE.Vector3;if(t.index)for(var p=t.index.array,f=0<this.offsets.length?this.offsets:[{start:0,count:p.length,index:0}],m=0,g=f.length;m<g;++m){r=f[m].start,n=f[m].count;var E=f[m].index;for(i=r,r=r+n;i<r;i+=3)n=3*(E+p[i]),a=3*(E+p[i+1]),o=3*(E+p[i+2]),l.fromArray(e,n),h.fromArray(e,a),c.fromArray(e,o),u.subVectors(c,h),d.subVectors(l,h),u.cross(d),s[n]+=u.x,s[n+1]+=u.y,s[n+2]+=u.z,s[a]+=u.x,s[1+a]+=u.y,s[2+a]+=u.z,s[o]+=u.x,s[1+o]+=u.y,s[2+o]+=u.z}else for(i=0,r=e.length;i<r;i+=9)l.fromArray(e,i),h.fromArray(e,i+3),c.fromArray(e,i+6),u.subVectors(c,h),d.subVectors(l,h),u.cross(d),s[i]=u.x,s[i+1]=u.y,s[i+2]=u.z,s[i+3]=u.x,s[i+4]=u.y,s[i+5]=u.z,s[i+6]=u.x,s[i+7]=u.y,s[i+8]=u.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},computeTangents:function(){function t(t){U.fromArray(r,3*t),V.copy(U),B=s[t],I.copy(B),I.sub(U.multiplyScalar(U.dot(B))).normalize(),z.crossVectors(V,B),N=z.dot(l[t]),O=N<0?-1:1,o[4*t]=I.x,o[4*t+1]=I.y,o[4*t+2]=I.z,o[4*t+3]=O}if(void 0===this.attributes.index||void 0===this.attributes.position||void 0===this.attributes.normal||void 0===this.attributes.uv)console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var e=this.attributes.index.array,i=this.attributes.position.array,r=this.attributes.normal.array,n=this.attributes.uv.array,a=i.length/3;void 0===this.attributes.tangent&&this.addAttribute("tangent",new THREE.BufferAttribute(new Float32Array(4*a),4));for(var o=this.attributes.tangent.array,s=[],l=[],h=0;h<a;h++)s[h]=new THREE.Vector3,l[h]=new THREE.Vector3;var c,u,d,p,f,m,g,E,v,y,T,x,b,R,w,H,_=new THREE.Vector3,S=new THREE.Vector3,C=new THREE.Vector3,M=new THREE.Vector2,A=new THREE.Vector2,P=new THREE.Vector2,L=new THREE.Vector3,D=new THREE.Vector3;0===this.drawcalls.length&&this.addDrawCall(0,e.length,0);var F=this.drawcalls;h=0;for(b=F.length;h<b;++h){x=F[h].start,R=F[h].count;var k=F[h].index;a=x;for(x+=R;a<x;a+=3)R=k+e[a],w=k+e[a+1],H=k+e[a+2],G=R,W=w,j=H,_.fromArray(i,3*G),S.fromArray(i,3*W),C.fromArray(i,3*j),M.fromArray(n,2*G),A.fromArray(n,2*W),P.fromArray(n,2*j),c=S.x-_.x,u=C.x-_.x,d=S.y-_.y,p=C.y-_.y,f=S.z-_.z,m=C.z-_.z,g=A.x-M.x,E=P.x-M.x,v=A.y-M.y,y=P.y-M.y,T=1/(g*y-E*v),L.set((y*c-v*u)*T,(y*d-v*p)*T,(y*f-v*m)*T),D.set((g*u-E*c)*T,(g*p-E*d)*T,(g*m-E*f)*T),s[G].add(L),s[W].add(L),s[j].add(L),l[G].add(D),l[W].add(D),l[j].add(D)}var O,B,N,I=new THREE.Vector3,z=new THREE.Vector3,U=new THREE.Vector3,V=new THREE.Vector3;h=0;for(b=F.length;h<b;++h)for(x=F[h].start,R=F[h].count,k=F[h].index,a=x,x+=R;a<x;a+=3)R=k+e[a],w=k+e[a+1],H=k+e[a+2],t(R),t(w),t(H)}var G,W,j},computeOffsets:function(t){var e=t;void 0===t&&(e=65535),Date.now(),t=this.attributes.index.array;for(var i=this.attributes.position.array,r=t.length/3,n=new Uint16Array(t.length),a=0,o=0,s=[{start:0,count:0,index:0}],l=s[0],h=0,c=new Int32Array(6),u=new Int32Array(i.length),d=new Int32Array(i.length),p=0;p<i.length;p++)u[p]=-1,d[p]=-1;for(i=0;i<r;i++){for(var f=h=0;f<3;f++)-1==u[p=t[3*i+f]]?(c[2*f]=p,c[2*f+1]=-1,h++):u[p]<l.index?(c[2*f]=p,c[2*f+1]=-1,0):(c[2*f]=p,c[2*f+1]=u[p]);if(o+h>l.index+e)for(l={start:a,count:0,index:o},s.push(l),h=0;h<6;h+=2)-1<(f=c[h+1])&&f<l.index&&(c[h+1]=-1);for(h=0;h<6;h+=2)p=c[h],-1===(f=c[h+1])&&(f=o++),d[u[p]=f]=p,n[a++]=f-l.index,l.count++}return this.reorderBuffers(n,d,o),this.offsets=s},merge:function(t,e){if(!1!=t instanceof THREE.BufferGeometry){void 0===e&&(e=0);var i,r=this.attributes;for(i in r)if(void 0!==t.attributes[i])for(var n=r[i].array,a=(s=t.attributes[i]).array,o=0,s=s.itemSize*e;o<a.length;o++,s++)n[s]=a[o];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:function(){for(var t,e,i,r=this.attributes.normal.array,n=0,a=r.length;n<a;n+=3)t=r[n],e=r[n+1],i=r[n+2],t=1/Math.sqrt(t*t+e*e+i*i),r[n]*=t,r[n+1]*=t,r[n+2]*=t},reorderBuffers:function(t,e,i){var r,n={};for(r in this.attributes)"index"!=r&&(n[r]=new this.attributes[r].array.constructor(this.attributes[r].itemSize*i));for(var a=0;a<i;a++){var o=e[a];for(r in this.attributes)if("index"!=r)for(var s=this.attributes[r].array,l=this.attributes[r].itemSize,h=n[r],c=0;c<l;c++)h[a*l+c]=s[o*l+c]}for(r in this.attributes.index.array=t,this.attributes)"index"!=r&&(this.attributes[r].array=n[r],this.attributes[r].numItems=this.attributes[r].itemSize*i)},toJSON:function(){var t,e={metadata:{version:4,type:"BufferGeometry",generator:"BufferGeometryExporter"},uuid:this.uuid,type:this.type,data:{attributes:{}}},i=this.attributes,r=this.offsets,n=this.boundingSphere;for(t in i){for(var a=i[t],o=[],s=a.array,l=0,h=s.length;l<h;l++)o[l]=s[l];e.data.attributes[t]={itemSize:a.itemSize,type:a.array.constructor.name,array:o}}return 0<r.length&&(e.data.offsets=JSON.parse(JSON.stringify(r))),null!==n&&(e.data.boundingSphere={center:n.center.toArray(),radius:n.radius}),e},clone:function(){var t,e=new THREE.BufferGeometry;for(t in this.attributes)e.addAttribute(t,this.attributes[t].clone());t=0;for(var i=this.offsets.length;t<i;t++){var r=this.offsets[t];e.offsets.push({start:r.start,index:r.index,count:r.count})}return e},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype),THREE.Geometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphColors=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingSphere=this.boundingBox=null,this.hasTangents=!1,this.dynamic=!0,this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1},THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(t){for(var e=(new THREE.Matrix3).getNormalMatrix(t),i=0,r=this.vertices.length;i<r;i++)this.vertices[i].applyMatrix4(t);for(i=0,r=this.faces.length;i<r;i++){(t=this.faces[i]).normal.applyMatrix3(e).normalize();for(var n=0,a=t.vertexNormals.length;n<a;n++)t.vertexNormals[n].applyMatrix3(e).normalize()}this.boundingBox instanceof THREE.Box3&&this.computeBoundingBox(),this.boundingSphere instanceof THREE.Sphere&&this.computeBoundingSphere()},fromBufferGeometry:function(t){for(var a=this,e=t.attributes,i=e.position.array,r=void 0!==e.index?e.index.array:void 0,o=void 0!==e.normal?e.normal.array:void 0,s=void 0!==e.color?e.color.array:void 0,l=void 0!==e.uv?e.uv.array:void 0,h=[],c=[],n=e=0;e<i.length;e+=3,n+=2)a.vertices.push(new THREE.Vector3(i[e],i[e+1],i[e+2])),void 0!==o&&h.push(new THREE.Vector3(o[e],o[e+1],o[e+2])),void 0!==s&&a.colors.push(new THREE.Color(s[e],s[e+1],s[e+2])),void 0!==l&&c.push(new THREE.Vector2(l[n],l[n+1]));if(n=function(t,e,i){var r=void 0!==o?[h[t].clone(),h[e].clone(),h[i].clone()]:[],n=void 0!==s?[a.colors[t].clone(),a.colors[e].clone(),a.colors[i].clone()]:[];a.faces.push(new THREE.Face3(t,e,i,r,n)),void 0!==l&&a.faceVertexUvs[0].push([c[t].clone(),c[e].clone(),c[i].clone()])},void 0!==r)for(e=0;e<r.length;e+=3)n(r[e],r[e+1],r[e+2]);else for(e=0;e<i.length/3;e+=3)n(e,e+1,e+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var t=new THREE.Vector3;return t.addVectors(this.boundingBox.min,this.boundingBox.max),t.multiplyScalar(-.5),this.applyMatrix((new THREE.Matrix4).makeTranslation(t.x,t.y,t.z)),this.computeBoundingBox(),t},computeFaceNormals:function(){for(var t=new THREE.Vector3,e=new THREE.Vector3,i=0,r=this.faces.length;i<r;i++){var n=this.faces[i],a=this.vertices[n.a],o=this.vertices[n.b];t.subVectors(this.vertices[n.c],o),e.subVectors(a,o),t.cross(e),t.normalize(),n.normal.copy(t)}},computeVertexNormals:function(t){var e,i,r;for(r=Array(this.vertices.length),e=0,i=this.vertices.length;e<i;e++)r[e]=new THREE.Vector3;if(t){var n,a,o,s=new THREE.Vector3,l=new THREE.Vector3;for(new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,t=0,e=this.faces.length;t<e;t++)i=this.faces[t],n=this.vertices[i.a],a=this.vertices[i.b],o=this.vertices[i.c],s.subVectors(o,a),l.subVectors(n,a),s.cross(l),r[i.a].add(s),r[i.b].add(s),r[i.c].add(s)}else for(t=0,e=this.faces.length;t<e;t++)r[(i=this.faces[t]).a].add(i.normal),r[i.b].add(i.normal),r[i.c].add(i.normal);for(e=0,i=this.vertices.length;e<i;e++)r[e].normalize();for(t=0,e=this.faces.length;t<e;t++)(i=this.faces[t]).vertexNormals[0]=r[i.a].clone(),i.vertexNormals[1]=r[i.b].clone(),i.vertexNormals[2]=r[i.c].clone()},computeMorphNormals:function(){var t,e,i,r,n;for(i=0,r=this.faces.length;i<r;i++)for((n=this.faces[i]).__originalFaceNormal?n.__originalFaceNormal.copy(n.normal):n.__originalFaceNormal=n.normal.clone(),n.__originalVertexNormals||(n.__originalVertexNormals=[]),t=0,e=n.vertexNormals.length;t<e;t++)n.__originalVertexNormals[t]?n.__originalVertexNormals[t].copy(n.vertexNormals[t]):n.__originalVertexNormals[t]=n.vertexNormals[t].clone();var a=new THREE.Geometry;for(a.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[],n=this.morphNormals[t].faceNormals;var o,s,l=this.morphNormals[t].vertexNormals;for(i=0,r=this.faces.length;i<r;i++)o=new THREE.Vector3,s={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},n.push(o),l.push(s)}for(l=this.morphNormals[t],a.vertices=this.morphTargets[t].vertices,a.computeFaceNormals(),a.computeVertexNormals(),i=0,r=this.faces.length;i<r;i++)n=this.faces[i],o=l.faceNormals[i],s=l.vertexNormals[i],o.copy(n.normal),s.a.copy(n.vertexNormals[0]),s.b.copy(n.vertexNormals[1]),s.c.copy(n.vertexNormals[2])}for(i=0,r=this.faces.length;i<r;i++)(n=this.faces[i]).normal=n.__originalFaceNormal,n.vertexNormals=n.__originalVertexNormals},computeTangents:function(){var t,e,i,r,n,a,o,s,l,h,c,u,d,p,f,m,g,E=[],v=[];i=new THREE.Vector3;var y=new THREE.Vector3,T=new THREE.Vector3,x=new THREE.Vector3,b=new THREE.Vector3;for(t=0,e=this.vertices.length;t<e;t++)E[t]=new THREE.Vector3,v[t]=new THREE.Vector3;for(t=0,e=this.faces.length;t<e;t++)n=this.faces[t],a=this.faceVertexUvs[0][t],r=n.a,g=n.b,n=n.c,o=this.vertices[r],s=this.vertices[g],l=this.vertices[n],h=a[0],c=a[1],u=a[2],a=s.x-o.x,d=l.x-o.x,p=s.y-o.y,f=l.y-o.y,s=s.z-o.z,o=l.z-o.z,l=c.x-h.x,m=u.x-h.x,c=c.y-h.y,u=1/(l*(h=u.y-h.y)-m*c),i.set((h*a-c*d)*u,(h*p-c*f)*u,(h*s-c*o)*u),y.set((l*d-m*a)*u,(l*f-m*p)*u,(l*o-m*s)*u),E[r].add(i),E[g].add(i),E[n].add(i),v[r].add(y),v[g].add(y),v[n].add(y);for(y=["a","b","c","d"],t=0,e=this.faces.length;t<e;t++)for(n=this.faces[t],i=0;i<Math.min(n.vertexNormals.length,3);i++)b.copy(n.vertexNormals[i]),g=E[r=n[y[i]]],T.copy(g),T.sub(b.multiplyScalar(b.dot(g))).normalize(),x.crossVectors(n.vertexNormals[i],g),r=(r=x.dot(v[r]))<0?-1:1,n.vertexTangents[i]=new THREE.Vector4(T.x,T.y,T.z,r);this.hasTangents=!0},computeLineDistances:function(){for(var t=0,e=this.vertices,i=0,r=e.length;i<r;i++)0<i&&(t+=e[i].distanceTo(e[i-1])),this.lineDistances[i]=t},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,i){if(!1==t instanceof THREE.Geometry)console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t);else{var r,n=this.vertices.length,a=this.vertices,o=t.vertices,s=this.faces,l=t.faces,h=this.faceVertexUvs[0];t=t.faceVertexUvs[0],void 0===i&&(i=0),void 0!==e&&(r=(new THREE.Matrix3).getNormalMatrix(e));for(var c=0,u=o.length;c<u;c++){var d=o[c].clone();void 0!==e&&d.applyMatrix4(e),a.push(d)}for(c=0,u=l.length;c<u;c++){var p,f=(o=l[c]).vertexNormals,m=o.vertexColors;for((d=new THREE.Face3(o.a+n,o.b+n,o.c+n)).normal.copy(o.normal),void 0!==r&&d.normal.applyMatrix3(r).normalize(),e=0,a=f.length;e<a;e++)p=f[e].clone(),void 0!==r&&p.applyMatrix3(r).normalize(),d.vertexNormals.push(p);for(d.color.copy(o.color),e=0,a=m.length;e<a;e++)p=m[e],d.vertexColors.push(p.clone());d.materialIndex=o.materialIndex+i,s.push(d)}for(c=0,u=t.length;c<u;c++)if(r=[],void 0!==(i=t[c])){for(e=0,a=i.length;e<a;e++)r.push(i[e].clone());h.push(r)}}},mergeMesh:function(t){!1==t instanceof THREE.Mesh?console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t):(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix))},mergeVertices:function(){var t,e,i,r={},n=[],a=[],o=Math.pow(10,4);for(e=0,i=this.vertices.length;e<i;e++)t=this.vertices[e],void 0===r[t=Math.round(t.x*o)+"_"+Math.round(t.y*o)+"_"+Math.round(t.z*o)]?(r[t]=e,n.push(this.vertices[e]),a[e]=n.length-1):a[e]=a[r[t]];for(r=[],e=0,i=this.faces.length;e<i;e++)for((o=this.faces[e]).a=a[o.a],o.b=a[o.b],o.c=a[o.c],o=[o.a,o.b,o.c],t=0;t<3;t++)if(o[t]==o[(t+1)%3]){r.push(e);break}for(e=r.length-1;0<=e;e--)for(o=r[e],this.faces.splice(o,1),a=0,i=this.faceVertexUvs.length;a<i;a++)this.faceVertexUvs[a].splice(o,1);return e=this.vertices.length-n.length,this.vertices=n,e},toJSON:function(){function t(t,e,i){return i?t|1<<e:t&~(1<<e)}function e(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==h[e]||(h[e]=l.length/3,l.push(t.x,t.y,t.z)),h[e]}function i(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==u[e]||(u[e]=c.length,c.push(t.getHex())),u[e]}function r(t){var e=t.x.toString()+t.y.toString();return void 0!==p[e]||(p[e]=d.length/2,d.push(t.x,t.y)),p[e]}var n={metadata:{version:4,type:"BufferGeometry",generator:"BufferGeometryExporter"},uuid:this.uuid,type:this.type};if(""!==this.name&&(n.name=this.name),void 0!==this.parameters){var a,o=this.parameters;for(a in o)void 0!==o[a]&&(n[a]=o[a]);return n}for(o=[],a=0;a<this.vertices.length;a++){var s=this.vertices[a];o.push(s.x,s.y,s.z)}s=[];var l=[],h={},c=[],u={},d=[],p={};for(a=0;a<this.faces.length;a++){var f=this.faces[a],m=void 0!==this.faceVertexUvs[0][a],g=0<f.normal.length(),E=0<f.vertexNormals.length,v=1!==f.color.r||1!==f.color.g||1!==f.color.b,y=0<f.vertexColors.length,T=t(T=t(T=t(T=t(T=t(T=t(T=t(T=t(T=0,0,0),1,!1),2,!1),3,m),4,g),5,E),6,v),7,y);s.push(T),s.push(f.a,f.b,f.c),m&&(m=this.faceVertexUvs[0][a],s.push(r(m[0]),r(m[1]),r(m[2]))),g&&s.push(e(f.normal)),E&&(g=f.vertexNormals,s.push(e(g[0]),e(g[1]),e(g[2]))),v&&s.push(i(f.color)),y&&(f=f.vertexColors,s.push(i(f[0]),i(f[1]),i(f[2])))}return n.data={},n.data.vertices=o,n.data.normals=l,0<c.length&&(n.data.colors=c),0<d.length&&(n.data.uvs=[d]),n.data.faces=s,n},clone:function(){for(var t=new THREE.Geometry,e=this.vertices,i=0,r=e.length;i<r;i++)t.vertices.push(e[i].clone());for(i=0,r=(e=this.faces).length;i<r;i++)t.faces.push(e[i].clone());for(i=0,r=this.faceVertexUvs.length;i<r;i++){e=this.faceVertexUvs[i],void 0===t.faceVertexUvs[i]&&(t.faceVertexUvs[i]=[]);for(var n=0,a=e.length;n<a;n++){for(var o=e[n],s=[],l=0,h=o.length;l<h;l++)s.push(o[l].clone());t.faceVertexUvs[i].push(s)}}return t},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype),THREE.GeometryIdCount=0,THREE.Camera=function(){THREE.Object3D.call(this),this.type="Camera",this.matrixWorldInverse=new THREE.Matrix4,this.projectionMatrix=new THREE.Matrix4},THREE.Camera.prototype=Object.create(THREE.Object3D.prototype),THREE.Camera.prototype.constructor=THREE.Camera,THREE.Camera.prototype.getWorldDirection=function(){var e=new THREE.Quaternion;return function(t){return t=t||new THREE.Vector3,this.getWorldQuaternion(e),t.set(0,0,-1).applyQuaternion(e)}}(),THREE.Camera.prototype.lookAt=function(){var e=new THREE.Matrix4;return function(t){e.lookAt(this.position,t,this.up),this.quaternion.setFromRotationMatrix(e)}}(),THREE.Camera.prototype.clone=function(t){return void 0===t&&(t=new THREE.Camera),THREE.Object3D.prototype.clone.call(this,t),t.matrixWorldInverse.copy(this.matrixWorldInverse),t.projectionMatrix.copy(this.projectionMatrix),t},THREE.CubeCamera=function(t,e,i){THREE.Object3D.call(this),this.type="CubeCamera";var n=new THREE.PerspectiveCamera(90,1,t,e);n.up.set(0,-1,0),n.lookAt(new THREE.Vector3(1,0,0)),this.add(n);var a=new THREE.PerspectiveCamera(90,1,t,e);a.up.set(0,-1,0),a.lookAt(new THREE.Vector3(-1,0,0)),this.add(a);var o=new THREE.PerspectiveCamera(90,1,t,e);o.up.set(0,0,1),o.lookAt(new THREE.Vector3(0,1,0)),this.add(o);var s=new THREE.PerspectiveCamera(90,1,t,e);s.up.set(0,0,-1),s.lookAt(new THREE.Vector3(0,-1,0)),this.add(s);var l=new THREE.PerspectiveCamera(90,1,t,e);l.up.set(0,-1,0),l.lookAt(new THREE.Vector3(0,0,1)),this.add(l);var h=new THREE.PerspectiveCamera(90,1,t,e);h.up.set(0,-1,0),h.lookAt(new THREE.Vector3(0,0,-1)),this.add(h),this.renderTarget=new THREE.WebGLRenderTargetCube(i,i,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter}),this.updateCubeMap=function(t,e){var i=this.renderTarget,r=i.generateMipmaps;i.generateMipmaps=!1,i.activeCubeFace=0,t.render(e,n,i),i.activeCubeFace=1,t.render(e,a,i),i.activeCubeFace=2,t.render(e,o,i),i.activeCubeFace=3,t.render(e,s,i),i.activeCubeFace=4,t.render(e,l,i),i.generateMipmaps=r,i.activeCubeFace=5,t.render(e,h,i)}},THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype),THREE.CubeCamera.prototype.constructor=THREE.CubeCamera,THREE.OrthographicCamera=function(t,e,i,r,n,a){THREE.Camera.call(this),this.type="OrthographicCamera",this.zoom=1,this.left=t,this.right=e,this.top=i,this.bottom=r,this.near=void 0!==n?n:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()},THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype),THREE.OrthographicCamera.prototype.constructor=THREE.OrthographicCamera,THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,r=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(i-t,i+t,r+e,r-e,this.near,this.far)},THREE.OrthographicCamera.prototype.clone=function(){var t=new THREE.OrthographicCamera;return THREE.Camera.prototype.clone.call(this,t),t.zoom=this.zoom,t.left=this.left,t.right=this.right,t.top=this.top,t.bottom=this.bottom,t.near=this.near,t.far=this.far,t.projectionMatrix.copy(this.projectionMatrix),t},THREE.PerspectiveCamera=function(t,e,i,r){THREE.Camera.call(this),this.type="PerspectiveCamera",this.zoom=1,this.fov=void 0!==t?t:50,this.aspect=void 0!==e?e:1,this.near=void 0!==i?i:.1,this.far=void 0!==r?r:2e3,this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype),THREE.PerspectiveCamera.prototype.constructor=THREE.PerspectiveCamera,THREE.PerspectiveCamera.prototype.setLens=function(t,e){void 0===e&&(e=24),this.fov=2*THREE.Math.radToDeg(Math.atan(e/(2*t))),this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype.setViewOffset=function(t,e,i,r,n,a){this.fullWidth=t,this.fullHeight=e,this.x=i,this.y=r,this.width=n,this.height=a,this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){var t=THREE.Math.radToDeg(2*Math.atan(Math.tan(.5*THREE.Math.degToRad(this.fov))/this.zoom));if(this.fullWidth){var e=(i=this.fullWidth/this.fullHeight)*(r=-(t=Math.tan(THREE.Math.degToRad(.5*t))*this.near)),i=Math.abs(i*t-e),r=Math.abs(t-r);this.projectionMatrix.makeFrustum(e+this.x*i/this.fullWidth,e+(this.x+this.width)*i/this.fullWidth,t-(this.y+this.height)*r/this.fullHeight,t-this.y*r/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(t,this.aspect,this.near,this.far)},THREE.PerspectiveCamera.prototype.clone=function(){var t=new THREE.PerspectiveCamera;return THREE.Camera.prototype.clone.call(this,t),t.zoom=this.zoom,t.fov=this.fov,t.aspect=this.aspect,t.near=this.near,t.far=this.far,t.projectionMatrix.copy(this.projectionMatrix),t},THREE.Light=function(t){THREE.Object3D.call(this),this.type="Light",this.color=new THREE.Color(t)},THREE.Light.prototype=Object.create(THREE.Object3D.prototype),THREE.Light.prototype.constructor=THREE.Light,THREE.Light.prototype.clone=function(t){return void 0===t&&(t=new THREE.Light),THREE.Object3D.prototype.clone.call(this,t),t.color.copy(this.color),t},THREE.AmbientLight=function(t){THREE.Light.call(this,t),this.type="AmbientLight"},THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype),THREE.AmbientLight.prototype.constructor=THREE.AmbientLight,THREE.AmbientLight.prototype.clone=function(){var t=new THREE.AmbientLight;return THREE.Light.prototype.clone.call(this,t),t},THREE.AreaLight=function(t,e){THREE.Light.call(this,t),this.type="AreaLight",this.normal=new THREE.Vector3(0,-1,0),this.right=new THREE.Vector3(1,0,0),this.intensity=void 0!==e?e:1,this.height=this.width=1,this.constantAttenuation=1.5,this.linearAttenuation=.5,this.quadraticAttenuation=.1},THREE.AreaLight.prototype=Object.create(THREE.Light.prototype),THREE.AreaLight.prototype.constructor=THREE.AreaLight,THREE.DirectionalLight=function(t,e){THREE.Light.call(this,t),this.type="DirectionalLight",this.position.set(0,1,0),this.target=new THREE.Object3D,this.intensity=void 0!==e?e:1,this.onlyShadow=this.castShadow=!1,this.shadowCameraNear=50,this.shadowCameraFar=5e3,this.shadowCameraLeft=-500,this.shadowCameraTop=this.shadowCameraRight=500,this.shadowCameraBottom=-500,this.shadowCameraVisible=!1,this.shadowBias=0,this.shadowDarkness=.5,this.shadowMapHeight=this.shadowMapWidth=512,this.shadowCascade=!1,this.shadowCascadeOffset=new THREE.Vector3(0,0,-1e3),this.shadowCascadeCount=2,this.shadowCascadeBias=[0,0,0],this.shadowCascadeWidth=[512,512,512],this.shadowCascadeHeight=[512,512,512],this.shadowCascadeNearZ=[-1,.99,.998],this.shadowCascadeFarZ=[.99,.998,1],this.shadowCascadeArray=[],this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null},THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype),THREE.DirectionalLight.prototype.constructor=THREE.DirectionalLight,THREE.DirectionalLight.prototype.clone=function(){var t=new THREE.DirectionalLight;return THREE.Light.prototype.clone.call(this,t),t.target=this.target.clone(),t.intensity=this.intensity,t.castShadow=this.castShadow,t.onlyShadow=this.onlyShadow,t.shadowCameraNear=this.shadowCameraNear,t.shadowCameraFar=this.shadowCameraFar,t.shadowCameraLeft=this.shadowCameraLeft,t.shadowCameraRight=this.shadowCameraRight,t.shadowCameraTop=this.shadowCameraTop,t.shadowCameraBottom=this.shadowCameraBottom,t.shadowCameraVisible=this.shadowCameraVisible,t.shadowBias=this.shadowBias,t.shadowDarkness=this.shadowDarkness,t.shadowMapWidth=this.shadowMapWidth,t.shadowMapHeight=this.shadowMapHeight,t.shadowCascade=this.shadowCascade,t.shadowCascadeOffset.copy(this.shadowCascadeOffset),t.shadowCascadeCount=this.shadowCascadeCount,t.shadowCascadeBias=this.shadowCascadeBias.slice(0),t.shadowCascadeWidth=this.shadowCascadeWidth.slice(0),t.shadowCascadeHeight=this.shadowCascadeHeight.slice(0),t.shadowCascadeNearZ=this.shadowCascadeNearZ.slice(0),t.shadowCascadeFarZ=this.shadowCascadeFarZ.slice(0),t},THREE.HemisphereLight=function(t,e,i){THREE.Light.call(this,t),this.type="HemisphereLight",this.position.set(0,100,0),this.groundColor=new THREE.Color(e),this.intensity=void 0!==i?i:1},THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype),THREE.HemisphereLight.prototype.constructor=THREE.HemisphereLight,THREE.HemisphereLight.prototype.clone=function(){var t=new THREE.HemisphereLight;return THREE.Light.prototype.clone.call(this,t),t.groundColor.copy(this.groundColor),t.intensity=this.intensity,t},THREE.PointLight=function(t,e,i){THREE.Light.call(this,t),this.type="PointLight",this.intensity=void 0!==e?e:1,this.distance=void 0!==i?i:0},THREE.PointLight.prototype=Object.create(THREE.Light.prototype),THREE.PointLight.prototype.constructor=THREE.PointLight,THREE.PointLight.prototype.clone=function(){var t=new THREE.PointLight;return THREE.Light.prototype.clone.call(this,t),t.intensity=this.intensity,t.distance=this.distance,t},THREE.SpotLight=function(t,e,i,r,n){THREE.Light.call(this,t),this.type="SpotLight",this.position.set(0,1,0),this.target=new THREE.Object3D,this.intensity=void 0!==e?e:1,this.distance=void 0!==i?i:0,this.angle=void 0!==r?r:Math.PI/3,this.exponent=void 0!==n?n:10,this.onlyShadow=this.castShadow=!1,this.shadowCameraNear=50,this.shadowCameraFar=5e3,this.shadowCameraFov=50,this.shadowCameraVisible=!1,this.shadowBias=0,this.shadowDarkness=.5,this.shadowMapHeight=this.shadowMapWidth=512,this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null},THREE.SpotLight.prototype=Object.create(THREE.Light.prototype),THREE.SpotLight.prototype.constructor=THREE.SpotLight,THREE.SpotLight.prototype.clone=function(){var t=new THREE.SpotLight;return THREE.Light.prototype.clone.call(this,t),t.target=this.target.clone(),t.intensity=this.intensity,t.distance=this.distance,t.angle=this.angle,t.exponent=this.exponent,t.castShadow=this.castShadow,t.onlyShadow=this.onlyShadow,t.shadowCameraNear=this.shadowCameraNear,t.shadowCameraFar=this.shadowCameraFar,t.shadowCameraFov=this.shadowCameraFov,t.shadowCameraVisible=this.shadowCameraVisible,t.shadowBias=this.shadowBias,t.shadowDarkness=this.shadowDarkness,t.shadowMapWidth=this.shadowMapWidth,t.shadowMapHeight=this.shadowMapHeight,t},THREE.Cache=function(){this.files={}},THREE.Cache.prototype={constructor:THREE.Cache,add:function(t,e){this.files[t]=e},get:function(t){return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}},THREE.Loader=function(t){this.statusDomElement=(this.showStatus=t)?THREE.Loader.prototype.addStatusElement():null,this.imageLoader=new THREE.ImageLoader,this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}},THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,addStatusElement:function(){var t=document.createElement("div");return t.style.position="absolute",t.style.right="0px",t.style.top="0px",t.style.fontSize="0.8em",t.style.textAlign="left",t.style.background="rgba(0,0,0,0.25)",t.style.color="#fff",t.style.width="120px",t.style.padding="0.5em 0.5em 0.5em 0.5em",t.style.zIndex=1e3,t.innerHTML="Loading ...",t},updateProgress:function(t){var e="Loaded ";e=t.total?e+((100*t.loaded/t.total).toFixed(0)+"%"):e+((t.loaded/1024).toFixed(2)+" KB");this.statusDomElement.innerHTML=e},extractUrlBase:function(t){return 1===(t=t.split("/")).length?"./":(t.pop(),t.join("/")+"/")},initMaterials:function(t,e){for(var i=[],r=0;r<t.length;++r)i[r]=this.createMaterial(t[r],e);return i},needsTangents:function(t){for(var e=0,i=t.length;e<i;e++)if(t[e]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(t,c){function u(t){return t=Math.log(t)/Math.LN2,Math.pow(2,Math.round(t))}function e(t,e,i,r,n,a,o){var s,l=c+i,h=THREE.Loader.Handlers.get(l);null!==h?s=h.load(l):(s=new THREE.Texture,(h=d.imageLoader).crossOrigin=d.crossOrigin,h.load(l,function(t){if(!1===THREE.Math.isPowerOfTwo(t.width)||!1===THREE.Math.isPowerOfTwo(t.height)){var e=u(t.width),i=u(t.height),r=document.createElement("canvas");r.width=e,r.height=i,r.getContext("2d").drawImage(t,0,0,e,i),s.image=r}else s.image=t;s.needsUpdate=!0})),s.sourceFile=i,r&&(s.repeat.set(r[0],r[1]),1!==r[0]&&(s.wrapS=THREE.RepeatWrapping),1!==r[1]&&(s.wrapT=THREE.RepeatWrapping)),n&&s.offset.set(n[0],n[1]),a&&(void 0!==(i={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping})[a[0]]&&(s.wrapS=i[a[0]]),void 0!==i[a[1]]&&(s.wrapT=i[a[1]])),o&&(s.anisotropy=o),t[e]=s}function i(t){return(255*t[0]<<16)+(255*t[1]<<8)+255*t[2]}var d=this,r="MeshLambertMaterial",n={color:15658734,opacity:1,map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(t.shading){var a=t.shading.toLowerCase();"phong"===a?r="MeshPhongMaterial":"basic"===a&&(r="MeshBasicMaterial")}return void 0!==t.blending&&void 0!==THREE[t.blending]&&(n.blending=THREE[t.blending]),(void 0!==t.transparent||t.opacity<1)&&(n.transparent=t.transparent),void 0!==t.depthTest&&(n.depthTest=t.depthTest),void 0!==t.depthWrite&&(n.depthWrite=t.depthWrite),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.flipSided&&(n.side=THREE.BackSide),void 0!==t.doubleSided&&(n.side=THREE.DoubleSide),void 0!==t.wireframe&&(n.wireframe=t.wireframe),void 0!==t.vertexColors&&("face"===t.vertexColors?n.vertexColors=THREE.FaceColors:t.vertexColors&&(n.vertexColors=THREE.VertexColors)),t.colorDiffuse?n.color=i(t.colorDiffuse):t.DbgColor&&(n.color=t.DbgColor),t.colorSpecular&&(n.specular=i(t.colorSpecular)),t.colorAmbient&&(n.ambient=i(t.colorAmbient)),t.colorEmissive&&(n.emissive=i(t.colorEmissive)),t.transparency&&(n.opacity=t.transparency),t.specularCoef&&(n.shininess=t.specularCoef),t.mapDiffuse&&c&&e(n,"map",t.mapDiffuse,t.mapDiffuseRepeat,t.mapDiffuseOffset,t.mapDiffuseWrap,t.mapDiffuseAnisotropy),t.mapLight&&c&&e(n,"lightMap",t.mapLight,t.mapLightRepeat,t.mapLightOffset,t.mapLightWrap,t.mapLightAnisotropy),t.mapBump&&c&&e(n,"bumpMap",t.mapBump,t.mapBumpRepeat,t.mapBumpOffset,t.mapBumpWrap,t.mapBumpAnisotropy),t.mapNormal&&c&&e(n,"normalMap",t.mapNormal,t.mapNormalRepeat,t.mapNormalOffset,t.mapNormalWrap,t.mapNormalAnisotropy),t.mapSpecular&&c&&e(n,"specularMap",t.mapSpecular,t.mapSpecularRepeat,t.mapSpecularOffset,t.mapSpecularWrap,t.mapSpecularAnisotropy),t.mapAlpha&&c&&e(n,"alphaMap",t.mapAlpha,t.mapAlphaRepeat,t.mapAlphaOffset,t.mapAlphaWrap,t.mapAlphaAnisotropy),t.mapBumpScale&&(n.bumpScale=t.mapBumpScale),t.mapNormalFactor&&(n.normalScale=new THREE.Vector2(t.mapNormalFactor,t.mapNormalFactor)),r=new THREE[r](n),void 0!==t.DbgName&&(r.name=t.DbgName),r}},THREE.Loader.Handlers={handlers:[],add:function(t,e){this.handlers.push(t,e)},get:function(t){for(var e=0,i=this.handlers.length;e<i;e+=2){var r=this.handlers[e+1];if(this.handlers[e].test(t))return r}return null}},THREE.XHRLoader=function(t){this.cache=new THREE.Cache,this.manager=void 0!==t?t:THREE.DefaultLoadingManager},THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(e,i,r,n){var a=this,t=a.cache.get(e);void 0!==t?i&&i(t):((t=new XMLHttpRequest).open("GET",e,!0),t.addEventListener("load",function(t){a.cache.add(e,this.response),i&&i(this.response),a.manager.itemEnd(e)},!1),void 0!==r&&t.addEventListener("progress",function(t){r(t)},!1),void 0!==n&&t.addEventListener("error",function(t){n(t)},!1),void 0!==this.crossOrigin&&(t.crossOrigin=this.crossOrigin),void 0!==this.responseType&&(t.responseType=this.responseType),t.send(null),a.manager.itemStart(e))},setResponseType:function(t){this.responseType=t},setCrossOrigin:function(t){this.crossOrigin=t}},THREE.ImageLoader=function(t){this.cache=new THREE.Cache,this.manager=void 0!==t?t:THREE.DefaultLoadingManager},THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(e,i,r,n){var a=this,t=a.cache.get(e);if(void 0===t)return t=document.createElement("img"),void 0!==i&&t.addEventListener("load",function(t){a.cache.add(e,this),i(this),a.manager.itemEnd(e)},!1),void 0!==r&&t.addEventListener("progress",function(t){r(t)},!1),void 0!==n&&t.addEventListener("error",function(t){n(t)},!1),void 0!==this.crossOrigin&&(t.crossOrigin=this.crossOrigin),t.src=e,a.manager.itemStart(e),t;i(t)},setCrossOrigin:function(t){this.crossOrigin=t}},THREE.JSONLoader=function(t){THREE.Loader.call(this,t),this.withCredentials=!1},THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype),THREE.JSONLoader.prototype.constructor=THREE.JSONLoader,THREE.JSONLoader.prototype.load=function(t,e,i){i=i&&"string"==typeof i?i:this.extractUrlBase(t),this.onLoadStart(),this.loadAjaxJSON(this,t,e,i)},THREE.JSONLoader.prototype.loadAjaxJSON=function(e,i,r,n,a){var o=new XMLHttpRequest,s=0;o.onreadystatechange=function(){if(o.readyState===o.DONE)if(200===o.status||0===o.status){if(o.responseText){var t=JSON.parse(o.responseText);if(void 0!==t.metadata&&"scene"===t.metadata.type)return void console.error('THREE.JSONLoader: "'+i+'" seems to be a Scene. Use THREE.SceneLoader instead.');t=e.parse(t,n),r(t.geometry,t.materials)}else console.error('THREE.JSONLoader: "'+i+'" seems to be unreachable or the file is empty.');e.onLoadComplete()}else console.error("THREE.JSONLoader: Couldn't load \""+i+'" ('+o.status+")");else o.readyState===o.LOADING?a&&(0===s&&(s=o.getResponseHeader("Content-Length")),a({total:s,loaded:o.responseText.length})):o.readyState===o.HEADERS_RECEIVED&&void 0!==a&&(s=o.getResponseHeader("Content-Length"))},o.open("GET",i,!0),o.withCredentials=this.withCredentials,o.send(null)},THREE.JSONLoader.prototype.parse=function(v,t){var y=new THREE.Geometry,e=void 0!==v.scale?1/v.scale:1;return function(t){var e,i,r,n,a,o,s,l,h,c,u,d,p,f=v.faces;o=v.vertices;var m=v.normals,g=v.colors,E=0;if(void 0!==v.uvs){for(e=0;e<v.uvs.length;e++)v.uvs[e].length&&E++;for(e=0;e<E;e++)y.faceVertexUvs[e]=[]}for(n=0,a=o.length;n<a;)(e=new THREE.Vector3).x=o[n++]*t,e.y=o[n++]*t,e.z=o[n++]*t,y.vertices.push(e);for(n=0,a=f.length;n<a;)if(h=1&(t=f[n++]),r=2&t,e=8&t,s=16&t,c=32&t,o=64&t,t&=128,h){if((h=new THREE.Face3).a=f[n],h.b=f[n+1],h.c=f[n+3],(u=new THREE.Face3).a=f[n+1],u.b=f[n+2],u.c=f[n+3],n+=4,r&&(r=f[n++],h.materialIndex=r,u.materialIndex=r),r=y.faces.length,e)for(e=0;e<E;e++)for(d=v.uvs[e],y.faceVertexUvs[e][r]=[],y.faceVertexUvs[e][r+1]=[],i=0;i<4;i++)p=d[2*(l=f[n++])],l=d[2*l+1],p=new THREE.Vector2(p,l),2!==i&&y.faceVertexUvs[e][r].push(p),0!==i&&y.faceVertexUvs[e][r+1].push(p);if(s&&(s=3*f[n++],h.normal.set(m[s++],m[s++],m[s]),u.normal.copy(h.normal)),c)for(e=0;e<4;e++)s=3*f[n++],c=new THREE.Vector3(m[s++],m[s++],m[s]),2!==e&&h.vertexNormals.push(c),0!==e&&u.vertexNormals.push(c);if(o&&(o=g[o=f[n++]],h.color.setHex(o),u.color.setHex(o)),t)for(e=0;e<4;e++)o=g[o=f[n++]],2!==e&&h.vertexColors.push(new THREE.Color(o)),0!==e&&u.vertexColors.push(new THREE.Color(o));y.faces.push(h),y.faces.push(u)}else{if((h=new THREE.Face3).a=f[n++],h.b=f[n++],h.c=f[n++],r&&(r=f[n++],h.materialIndex=r),r=y.faces.length,e)for(e=0;e<E;e++)for(d=v.uvs[e],y.faceVertexUvs[e][r]=[],i=0;i<3;i++)p=d[2*(l=f[n++])],l=d[2*l+1],p=new THREE.Vector2(p,l),y.faceVertexUvs[e][r].push(p);if(s&&(s=3*f[n++],h.normal.set(m[s++],m[s++],m[s])),c)for(e=0;e<3;e++)s=3*f[n++],c=new THREE.Vector3(m[s++],m[s++],m[s]),h.vertexNormals.push(c);if(o&&(o=f[n++],h.color.setHex(g[o])),t)for(e=0;e<3;e++)o=f[n++],h.vertexColors.push(new THREE.Color(g[o]));y.faces.push(h)}}(e),function(){var t=void 0!==v.influencesPerVertex?v.influencesPerVertex:2;if(v.skinWeights)for(var e=0,i=v.skinWeights.length;e<i;e+=t)y.skinWeights.push(new THREE.Vector4(v.skinWeights[e],1<t?v.skinWeights[e+1]:0,2<t?v.skinWeights[e+2]:0,3<t?v.skinWeights[e+3]:0));if(v.skinIndices)for(e=0,i=v.skinIndices.length;e<i;e+=t)y.skinIndices.push(new THREE.Vector4(v.skinIndices[e],1<t?v.skinIndices[e+1]:0,2<t?v.skinIndices[e+2]:0,3<t?v.skinIndices[e+3]:0));y.bones=v.bones,y.bones&&0<y.bones.length&&(y.skinWeights.length!==y.skinIndices.length||y.skinIndices.length!==y.vertices.length)&&console.warn("When skinning, number of vertices ("+y.vertices.length+"), skinIndices ("+y.skinIndices.length+"), and skinWeights ("+y.skinWeights.length+") should match."),y.animation=v.animation,y.animations=v.animations}(),function(t){var e,i,r,n,a,o;if(void 0!==v.morphTargets)for(e=0,i=v.morphTargets.length;e<i;e++)for(y.morphTargets[e]={},y.morphTargets[e].name=v.morphTargets[e].name,y.morphTargets[e].vertices=[],a=y.morphTargets[e].vertices,r=0,n=(o=v.morphTargets[e].vertices).length;r<n;r+=3){var s=new THREE.Vector3;s.x=o[r]*t,s.y=o[r+1]*t,s.z=o[r+2]*t,a.push(s)}if(void 0!==v.morphColors)for(e=0,i=v.morphColors.length;e<i;e++)for(y.morphColors[e]={},y.morphColors[e].name=v.morphColors[e].name,y.morphColors[e].colors=[],n=y.morphColors[e].colors,t=0,r=(a=v.morphColors[e].colors).length;t<r;t+=3)(o=new THREE.Color(16755200)).setRGB(a[t],a[t+1],a[t+2]),n.push(o)}(e),y.computeFaceNormals(),y.computeBoundingSphere(),void 0===v.materials||0===v.materials.length?{geometry:y}:(e=this.initMaterials(v.materials,t),this.needsTangents(e)&&y.computeTangents(),{geometry:y,materials:e})},THREE.LoadingManager=function(t,e,i){var r=this,n=0,a=0;this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){a++},this.itemEnd=function(t){n++,void 0!==r.onProgress&&r.onProgress(t,n,a),n===a&&void 0!==r.onLoad&&r.onLoad()}},THREE.DefaultLoadingManager=new THREE.LoadingManager,THREE.BufferGeometryLoader=function(t){this.manager=void 0!==t?t:THREE.DefaultLoadingManager},THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(t,e,i,r){var n=this,a=new THREE.XHRLoader(n.manager);a.setCrossOrigin(this.crossOrigin),a.load(t,function(t){e(n.parse(JSON.parse(t)))},i,r)},setCrossOrigin:function(t){this.crossOrigin=t},parse:function(t){var e,i=new THREE.BufferGeometry,r=t.attributes;for(e in r){var n=r[e],a=new self[n.type](n.array);i.addAttribute(e,new THREE.BufferAttribute(a,n.itemSize))}return void 0!==(r=t.offsets)&&(i.offsets=JSON.parse(JSON.stringify(r))),void 0!==(t=t.boundingSphere)&&(r=new THREE.Vector3,void 0!==t.center&&r.fromArray(t.center),i.boundingSphere=new THREE.Sphere(r,t.radius)),i}},THREE.MaterialLoader=function(t){this.manager=void 0!==t?t:THREE.DefaultLoadingManager},THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(t,e,i,r){var n=this,a=new THREE.XHRLoader(n.manager);a.setCrossOrigin(this.crossOrigin),a.load(t,function(t){e(n.parse(JSON.parse(t)))},i,r)},setCrossOrigin:function(t){this.crossOrigin=t},parse:function(t){var e=new THREE[t.type];if(void 0!==t.color&&e.color.setHex(t.color),void 0!==t.ambient&&e.ambient.setHex(t.ambient),void 0!==t.emissive&&e.emissive.setHex(t.emissive),void 0!==t.specular&&e.specular.setHex(t.specular),void 0!==t.shininess&&(e.shininess=t.shininess),void 0!==t.uniforms&&(e.uniforms=t.uniforms),void 0!==t.vertexShader&&(e.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(e.fragmentShader=t.fragmentShader),void 0!==t.vertexColors&&(e.vertexColors=t.vertexColors),void 0!==t.shading&&(e.shading=t.shading),void 0!==t.blending&&(e.blending=t.blending),void 0!==t.side&&(e.side=t.side),void 0!==t.opacity&&(e.opacity=t.opacity),void 0!==t.transparent&&(e.transparent=t.transparent),void 0!==t.wireframe&&(e.wireframe=t.wireframe),void 0!==t.materials)for(var i=0,r=t.materials.length;i<r;i++)e.materials.push(this.parse(t.materials[i]));return e}},THREE.ObjectLoader=function(t){this.manager=void 0!==t?t:THREE.DefaultLoadingManager},THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(t,e,i,r){var n=this,a=new THREE.XHRLoader(n.manager);a.setCrossOrigin(this.crossOrigin),a.load(t,function(t){e(n.parse(JSON.parse(t)))},i,r)},setCrossOrigin:function(t){this.crossOrigin=t},parse:function(t){var e=this.parseGeometries(t.geometries),i=this.parseMaterials(t.materials);return this.parseObject(t.object,e,i)},parseGeometries:function(t){var e={};if(void 0!==t)for(var i=new THREE.JSONLoader,r=new THREE.BufferGeometryLoader,n=0,a=t.length;n<a;n++){var o,s=t[n];switch(s.type){case"PlaneGeometry":o=new THREE.PlaneGeometry(s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"CubeGeometry":o=new THREE.BoxGeometry(s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":o=new THREE.CircleGeometry(s.radius,s.segments);break;case"CylinderGeometry":o=new THREE.CylinderGeometry(s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded);break;case"SphereGeometry":o=new THREE.SphereGeometry(s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"IcosahedronGeometry":o=new THREE.IcosahedronGeometry(s.radius,s.detail);break;case"TorusGeometry":o=new THREE.TorusGeometry(s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":o=new THREE.TorusKnotGeometry(s.radius,s.tube,s.radialSegments,s.tubularSegments,s.p,s.q,s.heightScale);break;case"BufferGeometry":o=r.parse(s.data);break;case"Geometry":o=i.parse(s.data).geometry}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),e[s.uuid]=o}return e},parseMaterials:function(t){var e={};if(void 0!==t)for(var i=new THREE.MaterialLoader,r=0,n=t.length;r<n;r++){var a=t[r],o=i.parse(a);o.uuid=a.uuid,void 0!==a.name&&(o.name=a.name),e[a.uuid]=o}return e},parseObject:function(){var o=new THREE.Matrix4;return function(t,e,i){var r;switch(t.type){case"Scene":r=new THREE.Scene;break;case"PerspectiveCamera":r=new THREE.PerspectiveCamera(t.fov,t.aspect,t.near,t.far);break;case"OrthographicCamera":r=new THREE.OrthographicCamera(t.left,t.right,t.top,t.bottom,t.near,t.far);break;case"AmbientLight":r=new THREE.AmbientLight(t.color);break;case"DirectionalLight":r=new THREE.DirectionalLight(t.color,t.intensity);break;case"PointLight":r=new THREE.PointLight(t.color,t.intensity,t.distance);break;case"SpotLight":r=new THREE.SpotLight(t.color,t.intensity,t.distance,t.angle,t.exponent);break;case"HemisphereLight":r=new THREE.HemisphereLight(t.color,t.groundColor,t.intensity);break;case"Mesh":r=e[t.geometry];var n=i[t.material];void 0===r&&console.warn("THREE.ObjectLoader: Undefined geometry",t.geometry),void 0===n&&console.warn("THREE.ObjectLoader: Undefined material",t.material),r=new THREE.Mesh(r,n);break;case"Line":r=e[t.geometry],n=i[t.material],void 0===r&&console.warn("THREE.ObjectLoader: Undefined geometry",t.geometry),void 0===n&&console.warn("THREE.ObjectLoader: Undefined material",t.material),r=new THREE.Line(r,n);break;case"Sprite":void 0===(n=i[t.material])&&console.warn("THREE.ObjectLoader: Undefined material",t.material),r=new THREE.Sprite(n);break;case"Group":r=new THREE.Group;break;default:r=new THREE.Object3D}if(r.uuid=t.uuid,void 0!==t.name&&(r.name=t.name),void 0!==t.matrix?(o.fromArray(t.matrix),o.decompose(r.position,r.quaternion,r.scale)):(void 0!==t.position&&r.position.fromArray(t.position),void 0!==t.rotation&&r.rotation.fromArray(t.rotation),void 0!==t.scale&&r.scale.fromArray(t.scale)),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.children)for(var a in t.children)r.add(this.parseObject(t.children[a],e,i));return r}}()},THREE.TextureLoader=function(t){this.manager=void 0!==t?t:THREE.DefaultLoadingManager},THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(t,e,i,r){var n=new THREE.ImageLoader(this.manager);n.setCrossOrigin(this.crossOrigin),n.load(t,function(t){(t=new THREE.Texture(t)).needsUpdate=!0,void 0!==e&&e(t)},i,r)},setCrossOrigin:function(t){this.crossOrigin=t}},THREE.DataTextureLoader=THREE.BinaryTextureLoader=function(){this._parser=null},THREE.BinaryTextureLoader.prototype={constructor:THREE.BinaryTextureLoader,load:function(t,e,i,r){var n=this,a=new THREE.DataTexture,o=new THREE.XHRLoader;return o.setResponseType("arraybuffer"),o.load(t,function(t){(t=n._parser(t))&&(void 0!==t.image?a.image=t.image:void 0!==t.data&&(a.image.width=t.width,a.image.height=t.height,a.image.data=t.data),a.wrapS=void 0!==t.wrapS?t.wrapS:THREE.ClampToEdgeWrapping,a.wrapT=void 0!==t.wrapT?t.wrapT:THREE.ClampToEdgeWrapping,a.magFilter=void 0!==t.magFilter?t.magFilter:THREE.LinearFilter,a.minFilter=void 0!==t.minFilter?t.minFilter:THREE.LinearMipMapLinearFilter,a.anisotropy=void 0!==t.anisotropy?t.anisotropy:1,void 0!==t.format&&(a.format=t.format),void 0!==t.type&&(a.type=t.type),void 0!==t.mipmaps&&(a.mipmaps=t.mipmaps),1===t.mipmapCount&&(a.minFilter=THREE.LinearFilter),a.needsUpdate=!0,e&&e(a,t))},i,r),a}},THREE.CompressedTextureLoader=function(){this._parser=null},THREE.CompressedTextureLoader.prototype={constructor:THREE.CompressedTextureLoader,load:function(t,n,e){var a=this,o=[],s=new THREE.CompressedTexture;s.image=o;var i=new THREE.XHRLoader;if(i.setResponseType("arraybuffer"),t instanceof Array){var r=0;e=function(e){i.load(t[e],function(t){t=a._parser(t,!0),o[e]={width:t.width,height:t.height,format:t.format,mipmaps:t.mipmaps},6===(r+=1)&&(1==t.mipmapCount&&(s.minFilter=THREE.LinearFilter),s.format=t.format,s.needsUpdate=!0,n&&n(s))})};for(var l=0,h=t.length;l<h;++l)e(l)}else i.load(t,function(t){if((t=a._parser(t,!0)).isCubemap)for(var e=t.mipmaps.length/t.mipmapCount,i=0;i<e;i++){o[i]={mipmaps:[]};for(var r=0;r<t.mipmapCount;r++)o[i].mipmaps.push(t.mipmaps[i*t.mipmapCount+r]),o[i].format=t.format,o[i].width=t.width,o[i].height=t.height}else s.image.width=t.width,s.image.height=t.height,s.mipmaps=t.mipmaps;1===t.mipmapCount&&(s.minFilter=THREE.LinearFilter),s.format=t.format,s.needsUpdate=!0,n&&n(s)});return s}},THREE.Material=function(){Object.defineProperty(this,"id",{value:THREE.MaterialIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Material",this.side=THREE.FrontSide,this.opacity=1,this.transparent=!1,this.blending=THREE.NormalBlending,this.blendSrc=THREE.SrcAlphaFactor,this.blendDst=THREE.OneMinusSrcAlphaFactor,this.blendEquation=THREE.AddEquation,this.depthWrite=this.depthTest=!0,this.polygonOffset=!1,this.overdraw=this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0,this.needsUpdate=this.visible=!0},THREE.Material.prototype={constructor:THREE.Material,setValues:function(t){if(void 0!==t)for(var e in t){var i=t[e];if(void 0===i)console.warn("THREE.Material: '"+e+"' parameter is undefined.");else if(e in this){var r=this[e];r instanceof THREE.Color?r.set(i):r instanceof THREE.Vector3&&i instanceof THREE.Vector3?r.copy(i):this[e]="overdraw"==e?Number(i):i}}},toJSON:function(){var t={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type};return""!==this.name&&(t.name=this.name),this instanceof THREE.MeshBasicMaterial?(t.color=this.color.getHex(),this.vertexColors!==THREE.NoColors&&(t.vertexColors=this.vertexColors),this.blending!==THREE.NormalBlending&&(t.blending=this.blending),this.side!==THREE.FrontSide&&(t.side=this.side)):this instanceof THREE.MeshLambertMaterial?(t.color=this.color.getHex(),t.ambient=this.ambient.getHex(),t.emissive=this.emissive.getHex(),this.vertexColors!==THREE.NoColors&&(t.vertexColors=this.vertexColors),this.blending!==THREE.NormalBlending&&(t.blending=this.blending),this.side!==THREE.FrontSide&&(t.side=this.side)):this instanceof THREE.MeshPhongMaterial?(t.color=this.color.getHex(),t.ambient=this.ambient.getHex(),t.emissive=this.emissive.getHex(),t.specular=this.specular.getHex(),t.shininess=this.shininess,this.vertexColors!==THREE.NoColors&&(t.vertexColors=this.vertexColors),this.blending!==THREE.NormalBlending&&(t.blending=this.blending),this.side!==THREE.FrontSide&&(t.side=this.side)):this instanceof THREE.MeshNormalMaterial?(this.shading!==THREE.FlatShading&&(t.shading=this.shading),this.blending!==THREE.NormalBlending&&(t.blending=this.blending),this.side!==THREE.FrontSide&&(t.side=this.side)):this instanceof THREE.MeshDepthMaterial?(this.blending!==THREE.NormalBlending&&(t.blending=this.blending),this.side!==THREE.FrontSide&&(t.side=this.side)):this instanceof THREE.ShaderMaterial?(t.uniforms=this.uniforms,t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader):this instanceof THREE.SpriteMaterial&&(t.color=this.color.getHex()),this.opacity<1&&(t.opacity=this.opacity),!1!==this.transparent&&(t.transparent=this.transparent),!1!==this.wireframe&&(t.wireframe=this.wireframe),t},clone:function(t){return void 0===t&&(t=new THREE.Material),t.name=this.name,t.side=this.side,t.opacity=this.opacity,t.transparent=this.transparent,t.blending=this.blending,t.blendSrc=this.blendSrc,t.blendDst=this.blendDst,t.blendEquation=this.blendEquation,t.depthTest=this.depthTest,t.depthWrite=this.depthWrite,t.polygonOffset=this.polygonOffset,t.polygonOffsetFactor=this.polygonOffsetFactor,t.polygonOffsetUnits=this.polygonOffsetUnits,t.alphaTest=this.alphaTest,t.overdraw=this.overdraw,t.visible=this.visible,t},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.Material.prototype),THREE.MaterialIdCount=0,THREE.LineBasicMaterial=function(t){THREE.Material.call(this),this.type="LineBasicMaterial",this.color=new THREE.Color(16777215),this.linewidth=1,this.linejoin=this.linecap="round",this.vertexColors=THREE.NoColors,this.fog=!0,this.setValues(t)},THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype),THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial,THREE.LineBasicMaterial.prototype.clone=function(){var t=new THREE.LineBasicMaterial;return THREE.Material.prototype.clone.call(this,t),t.color.copy(this.color),t.linewidth=this.linewidth,t.linecap=this.linecap,t.linejoin=this.linejoin,t.vertexColors=this.vertexColors,t.fog=this.fog,t},THREE.LineDashedMaterial=function(t){THREE.Material.call(this),this.type="LineDashedMaterial",this.color=new THREE.Color(16777215),this.scale=this.linewidth=1,this.dashSize=3,this.gapSize=1,this.vertexColors=!1,this.fog=!0,this.setValues(t)},THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype),THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial,THREE.LineDashedMaterial.prototype.clone=function(){var t=new THREE.LineDashedMaterial;return THREE.Material.prototype.clone.call(this,t),t.color.copy(this.color),t.linewidth=this.linewidth,t.scale=this.scale,t.dashSize=this.dashSize,t.gapSize=this.gapSize,t.vertexColors=this.vertexColors,t.fog=this.fog,t},THREE.MeshBasicMaterial=function(t){THREE.Material.call(this),this.type="MeshBasicMaterial",this.color=new THREE.Color(16777215),this.envMap=this.alphaMap=this.specularMap=this.lightMap=this.map=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.fog=!0,this.shading=THREE.SmoothShading,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinejoin=this.wireframeLinecap="round",this.vertexColors=THREE.NoColors,this.morphTargets=this.skinning=!1,this.setValues(t)},THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial,THREE.MeshBasicMaterial.prototype.clone=function(){var t=new THREE.MeshBasicMaterial;return THREE.Material.prototype.clone.call(this,t),t.color.copy(this.color),t.map=this.map,t.lightMap=this.lightMap,t.specularMap=this.specularMap,t.alphaMap=this.alphaMap,t.envMap=this.envMap,t.combine=this.combine,t.reflectivity=this.reflectivity,t.refractionRatio=this.refractionRatio,t.fog=this.fog,t.shading=this.shading,t.wireframe=this.wireframe,t.wireframeLinewidth=this.wireframeLinewidth,t.wireframeLinecap=this.wireframeLinecap,t.wireframeLinejoin=this.wireframeLinejoin,t.vertexColors=this.vertexColors,t.skinning=this.skinning,t.morphTargets=this.morphTargets,t},THREE.MeshLambertMaterial=function(t){THREE.Material.call(this),this.type="MeshLambertMaterial",this.color=new THREE.Color(16777215),this.ambient=new THREE.Color(16777215),this.emissive=new THREE.Color(0),this.wrapAround=!1,this.wrapRGB=new THREE.Vector3(1,1,1),this.envMap=this.alphaMap=this.specularMap=this.lightMap=this.map=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.fog=!0,this.shading=THREE.SmoothShading,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinejoin=this.wireframeLinecap="round",this.vertexColors=THREE.NoColors,this.morphNormals=this.morphTargets=this.skinning=!1,this.setValues(t)},THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial,THREE.MeshLambertMaterial.prototype.clone=function(){var t=new THREE.MeshLambertMaterial;return THREE.Material.prototype.clone.call(this,t),t.color.copy(this.color),t.ambient.copy(this.ambient),t.emissive.copy(this.emissive),t.wrapAround=this.wrapAround,t.wrapRGB.copy(this.wrapRGB),t.map=this.map,t.lightMap=this.lightMap,t.specularMap=this.specularMap,t.alphaMap=this.alphaMap,t.envMap=this.envMap,t.combine=this.combine,t.reflectivity=this.reflectivity,t.refractionRatio=this.refractionRatio,t.fog=this.fog,t.shading=this.shading,t.wireframe=this.wireframe,t.wireframeLinewidth=this.wireframeLinewidth,t.wireframeLinecap=this.wireframeLinecap,t.wireframeLinejoin=this.wireframeLinejoin,t.vertexColors=this.vertexColors,t.skinning=this.skinning,t.morphTargets=this.morphTargets,t.morphNormals=this.morphNormals,t},THREE.MeshPhongMaterial=function(t){THREE.Material.call(this),this.type="MeshPhongMaterial",this.color=new THREE.Color(16777215),this.ambient=new THREE.Color(16777215),this.emissive=new THREE.Color(0),this.specular=new THREE.Color(1118481),this.shininess=30,this.wrapAround=this.metal=!1,this.wrapRGB=new THREE.Vector3(1,1,1),this.bumpMap=this.lightMap=this.map=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new THREE.Vector2(1,1),this.envMap=this.alphaMap=this.specularMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.fog=!0,this.shading=THREE.SmoothShading,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinejoin=this.wireframeLinecap="round",this.vertexColors=THREE.NoColors,this.morphNormals=this.morphTargets=this.skinning=!1,this.setValues(t)},THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial,THREE.MeshPhongMaterial.prototype.clone=function(){var t=new THREE.MeshPhongMaterial;return THREE.Material.prototype.clone.call(this,t),t.color.copy(this.color),t.ambient.copy(this.ambient),t.emissive.copy(this.emissive),t.specular.copy(this.specular),t.shininess=this.shininess,t.metal=this.metal,t.wrapAround=this.wrapAround,t.wrapRGB.copy(this.wrapRGB),t.map=this.map,t.lightMap=this.lightMap,t.bumpMap=this.bumpMap,t.bumpScale=this.bumpScale,t.normalMap=this.normalMap,t.normalScale.copy(this.normalScale),t.specularMap=this.specularMap,t.alphaMap=this.alphaMap,t.envMap=this.envMap,t.combine=this.combine,t.reflectivity=this.reflectivity,t.refractionRatio=this.refractionRatio,t.fog=this.fog,t.shading=this.shading,t.wireframe=this.wireframe,t.wireframeLinewidth=this.wireframeLinewidth,t.wireframeLinecap=this.wireframeLinecap,t.wireframeLinejoin=this.wireframeLinejoin,t.vertexColors=this.vertexColors,t.skinning=this.skinning,t.morphTargets=this.morphTargets,t.morphNormals=this.morphNormals,t},THREE.MeshDepthMaterial=function(t){THREE.Material.call(this),this.type="MeshDepthMaterial",this.wireframe=this.morphTargets=!1,this.wireframeLinewidth=1,this.setValues(t)},THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial,THREE.MeshDepthMaterial.prototype.clone=function(){var t=new THREE.MeshDepthMaterial;return THREE.Material.prototype.clone.call(this,t),t.wireframe=this.wireframe,t.wireframeLinewidth=this.wireframeLinewidth,t},THREE.MeshNormalMaterial=function(t){THREE.Material.call(this,t),this.type="MeshNormalMaterial",this.shading=THREE.FlatShading,this.wireframe=!1,this.wireframeLinewidth=1,this.morphTargets=!1,this.setValues(t)},THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial,THREE.MeshNormalMaterial.prototype.clone=function(){var t=new THREE.MeshNormalMaterial;return THREE.Material.prototype.clone.call(this,t),t.shading=this.shading,t.wireframe=this.wireframe,t.wireframeLinewidth=this.wireframeLinewidth,t},THREE.MeshFaceMaterial=function(t){this.uuid=THREE.Math.generateUUID(),this.type="MeshFaceMaterial",this.materials=t instanceof Array?t:[]},THREE.MeshFaceMaterial.prototype={constructor:THREE.MeshFaceMaterial,toJSON:function(){for(var t={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type,materials:[]},e=0,i=this.materials.length;e<i;e++)t.materials.push(this.materials[e].toJSON());return t},clone:function(){for(var t=new THREE.MeshFaceMaterial,e=0;e<this.materials.length;e++)t.materials.push(this.materials[e].clone());return t}},THREE.PointCloudMaterial=function(t){THREE.Material.call(this),this.type="PointCloudMaterial",this.color=new THREE.Color(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.vertexColors=THREE.NoColors,this.fog=!0,this.setValues(t)},THREE.PointCloudMaterial.prototype=Object.create(THREE.Material.prototype),THREE.PointCloudMaterial.prototype.constructor=THREE.PointCloudMaterial,THREE.PointCloudMaterial.prototype.clone=function(){var t=new THREE.PointCloudMaterial;return THREE.Material.prototype.clone.call(this,t),t.color.copy(this.color),t.map=this.map,t.size=this.size,t.sizeAttenuation=this.sizeAttenuation,t.vertexColors=this.vertexColors,t.fog=this.fog,t},THREE.ParticleBasicMaterial=function(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial."),new THREE.PointCloudMaterial(t)},THREE.ParticleSystemMaterial=function(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial."),new THREE.PointCloudMaterial(t)},THREE.ShaderMaterial=function(t){THREE.Material.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.attributes=null,this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.shading=THREE.SmoothShading,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.lights=this.fog=!1,this.vertexColors=THREE.NoColors,this.morphNormals=this.morphTargets=this.skinning=!1,this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.setValues(t)},THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype),THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial,THREE.ShaderMaterial.prototype.clone=function(){var t=new THREE.ShaderMaterial;return THREE.Material.prototype.clone.call(this,t),t.fragmentShader=this.fragmentShader,t.vertexShader=this.vertexShader,t.uniforms=THREE.UniformsUtils.clone(this.uniforms),t.attributes=this.attributes,t.defines=this.defines,t.shading=this.shading,t.wireframe=this.wireframe,t.wireframeLinewidth=this.wireframeLinewidth,t.fog=this.fog,t.lights=this.lights,t.vertexColors=this.vertexColors,t.skinning=this.skinning,t.morphTargets=this.morphTargets,t.morphNormals=this.morphNormals,t},THREE.RawShaderMaterial=function(t){THREE.ShaderMaterial.call(this,t),this.type="RawShaderMaterial"},THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial,THREE.RawShaderMaterial.prototype.clone=function(){var t=new THREE.RawShaderMaterial;return THREE.ShaderMaterial.prototype.clone.call(this,t),t},THREE.SpriteMaterial=function(t){THREE.Material.call(this),this.type="SpriteMaterial",this.color=new THREE.Color(16777215),this.map=null,this.rotation=0,this.fog=!1,this.setValues(t)},THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteMaterial.prototype.constructor=THREE.SpriteMaterial,THREE.SpriteMaterial.prototype.clone=function(){var t=new THREE.SpriteMaterial;return THREE.Material.prototype.clone.call(this,t),t.color.copy(this.color),t.map=this.map,t.rotation=this.rotation,t.fog=this.fog,t},THREE.Texture=function(t,e,i,r,n,a,o,s,l){Object.defineProperty(this,"id",{value:THREE.TextureIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.image=void 0!==t?t:THREE.Texture.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:THREE.Texture.DEFAULT_MAPPING,this.wrapS=void 0!==i?i:THREE.ClampToEdgeWrapping,this.wrapT=void 0!==r?r:THREE.ClampToEdgeWrapping,this.magFilter=void 0!==n?n:THREE.LinearFilter,this.minFilter=void 0!==a?a:THREE.LinearMipMapLinearFilter,this.anisotropy=void 0!==l?l:1,this.format=void 0!==o?o:THREE.RGBAFormat,this.type=void 0!==s?s:THREE.UnsignedByteType,this.offset=new THREE.Vector2(0,0),this.repeat=new THREE.Vector2(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this._needsUpdate=!1,this.onUpdate=null},THREE.Texture.DEFAULT_IMAGE=void 0,THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping,THREE.Texture.prototype={constructor:THREE.Texture,get needsUpdate(){return this._needsUpdate},set needsUpdate(t){!0===t&&this.update(),this._needsUpdate=t},clone:function(t){return void 0===t&&(t=new THREE.Texture),t.image=this.image,t.mipmaps=this.mipmaps.slice(0),t.mapping=this.mapping,t.wrapS=this.wrapS,t.wrapT=this.wrapT,t.magFilter=this.magFilter,t.minFilter=this.minFilter,t.anisotropy=this.anisotropy,t.format=this.format,t.type=this.type,t.offset.copy(this.offset),t.repeat.copy(this.repeat),t.generateMipmaps=this.generateMipmaps,t.premultiplyAlpha=this.premultiplyAlpha,t.flipY=this.flipY,t.unpackAlignment=this.unpackAlignment,t},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype),THREE.TextureIdCount=0,THREE.CubeTexture=function(t,e,i,r,n,a,o,s,l){e=void 0!==e?e:THREE.CubeReflectionMapping,THREE.Texture.call(this,t,e,i,r,n,a,o,s,l),this.images=t},THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CubeTexture.prototype.constructor=THREE.CubeTexture,THREE.CubeTexture.clone=function(t){return void 0===t&&(t=new THREE.CubeTexture),THREE.Texture.prototype.clone.call(this,t),t.images=this.images,t},THREE.CompressedTexture=function(t,e,i,r,n,a,o,s,l,h,c){THREE.Texture.call(this,null,a,o,s,l,h,r,n,c),this.image={width:e,height:i},this.mipmaps=t,this.generateMipmaps=this.flipY=!1},THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture,THREE.CompressedTexture.prototype.clone=function(){var t=new THREE.CompressedTexture;return THREE.Texture.prototype.clone.call(this,t),t},THREE.DataTexture=function(t,e,i,r,n,a,o,s,l,h,c){THREE.Texture.call(this,null,a,o,s,l,h,r,n,c),this.image={data:t,width:e,height:i}},THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype),THREE.DataTexture.prototype.constructor=THREE.DataTexture,THREE.DataTexture.prototype.clone=function(){var t=new THREE.DataTexture;return THREE.Texture.prototype.clone.call(this,t),t},THREE.VideoTexture=function(t,e,i,r,n,a,o,s,l){THREE.Texture.call(this,t,e,i,r,n,a,o,s,l),this.generateMipmaps=!1;var h=this,c=function(){requestAnimationFrame(c),t.readyState===t.HAVE_ENOUGH_DATA&&(h.needsUpdate=!0)};c()},THREE.VideoTexture.prototype=Object.create(THREE.Texture.prototype),THREE.VideoTexture.prototype.constructor=THREE.VideoTexture,THREE.Group=function(){THREE.Object3D.call(this),this.type="Group"},THREE.Group.prototype=Object.create(THREE.Object3D.prototype),THREE.Group.prototype.constructor=THREE.Group,THREE.PointCloud=function(t,e){THREE.Object3D.call(this),this.type="PointCloud",this.geometry=void 0!==t?t:new THREE.Geometry,this.material=void 0!==e?e:new THREE.PointCloudMaterial({color:16777215*Math.random()})},THREE.PointCloud.prototype=Object.create(THREE.Object3D.prototype),THREE.PointCloud.prototype.constructor=THREE.PointCloud,THREE.PointCloud.prototype.raycast=function(){var m=new THREE.Matrix4,g=new THREE.Ray;return function(a,o){var s=this,t=s.geometry,e=a.params.PointCloud.threshold;if(m.getInverse(this.matrixWorld),g.copy(a.ray).applyMatrix4(m),null===t.boundingBox||!1!==g.isIntersectionBox(t.boundingBox)){var l=e/((this.scale.x+this.scale.y+this.scale.z)/3),i=new THREE.Vector3;e=function(t,e){var i=g.distanceToPoint(t);if(i<l){var r=g.closestPointToPoint(t);r.applyMatrix4(s.matrixWorld);var n=a.ray.origin.distanceTo(r);o.push({distance:n,distanceToRay:i,point:r.clone(),index:e,face:null,object:s})}};if(t instanceof THREE.BufferGeometry){var r=(n=t.attributes).position.array;if(void 0!==n.index){var n=n.index.array,h=t.offsets;0===h.length&&(h=[{start:0,count:n.length,index:0}]);for(var c=0,u=h.length;c<u;++c){var d=h[c].start,p=h[c].index;for(t=d,d=d+h[c].count;t<d;t++){var f=p+n[t];i.fromArray(r,3*f),e(i,f)}}}else for(n=r.length/3,t=0;t<n;t++)i.set(r[3*t],r[3*t+1],r[3*t+2]),e(i,t)}else for(i=this.geometry.vertices,t=0;t<i.length;t++)e(i[t],t)}}}(),THREE.PointCloud.prototype.clone=function(t){return void 0===t&&(t=new THREE.PointCloud(this.geometry,this.material)),THREE.Object3D.prototype.clone.call(this,t),t},THREE.ParticleSystem=function(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.PointCloud."),new THREE.PointCloud(t,e)},THREE.Line=function(t,e,i){THREE.Object3D.call(this),this.type="Line",this.geometry=void 0!==t?t:new THREE.Geometry,this.material=void 0!==e?e:new THREE.LineBasicMaterial({color:16777215*Math.random()}),this.mode=void 0!==i?i:THREE.LineStrip},THREE.LineStrip=0,THREE.LinePieces=1,THREE.Line.prototype=Object.create(THREE.Object3D.prototype),THREE.Line.prototype.constructor=THREE.Line,THREE.Line.prototype.raycast=function(){var E=new THREE.Matrix4,v=new THREE.Ray,y=new THREE.Sphere;return function(t,e){var i=(i=t.linePrecision)*i;if(null===(m=this.geometry).boundingSphere&&m.computeBoundingSphere(),y.copy(m.boundingSphere),y.applyMatrix4(this.matrixWorld),!1!==t.ray.isIntersectionSphere(y)){E.getInverse(this.matrixWorld),v.copy(t.ray).applyMatrix4(E);var r=new THREE.Vector3,n=new THREE.Vector3,a=new THREE.Vector3,o=new THREE.Vector3,s=this.mode===THREE.LineStrip?1:2;if(m instanceof THREE.BufferGeometry)if(void 0!==(h=m.attributes).index){var l=h.index.array,h=h.position.array,c=m.offsets;0===c.length&&(c=[{start:0,count:l.length,index:0}]);for(var u=0;u<c.length;u++)for(var d=c[u].start,p=c[u].count,f=c[u].index,m=d;m<d+p-1;m+=s){var g=f+l[m+1];r.fromArray(h,3*(f+l[m])),n.fromArray(h,3*g),i<(g=v.distanceSqToSegment(r,n,o,a))||((g=v.origin.distanceTo(o))<t.near||g>t.far||e.push({distance:g,point:a.clone().applyMatrix4(this.matrixWorld),face:null,faceIndex:null,object:this}))}}else for(h=h.position.array,m=0;m<h.length/3-1;m+=s)r.fromArray(h,3*m),n.fromArray(h,3*m+3),i<(g=v.distanceSqToSegment(r,n,o,a))||((g=v.origin.distanceTo(o))<t.near||g>t.far||e.push({distance:g,point:a.clone().applyMatrix4(this.matrixWorld),face:null,faceIndex:null,object:this}));else if(m instanceof THREE.Geometry)for(n=(r=m.vertices).length,m=0;m<n-1;m+=s)i<(g=v.distanceSqToSegment(r[m],r[m+1],o,a))||((g=v.origin.distanceTo(o))<t.near||g>t.far||e.push({distance:g,point:a.clone().applyMatrix4(this.matrixWorld),face:null,faceIndex:null,object:this}))}}}(),THREE.Line.prototype.clone=function(t){return void 0===t&&(t=new THREE.Line(this.geometry,this.material,this.mode)),THREE.Object3D.prototype.clone.call(this,t),t},THREE.Mesh=function(t,e){THREE.Object3D.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new THREE.Geometry,this.material=void 0!==e?e:new THREE.MeshBasicMaterial({color:16777215*Math.random()}),this.updateMorphTargets()},THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype),THREE.Mesh.prototype.constructor=THREE.Mesh,THREE.Mesh.prototype.updateMorphTargets=function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1,this.morphTargetForcedOrder=[],this.morphTargetInfluences=[],this.morphTargetDictionary={};for(var t=0,e=this.geometry.morphTargets.length;t<e;t++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[t].name]=t}},THREE.Mesh.prototype.getMorphTargetIndexByName=function(t){return void 0!==this.morphTargetDictionary[t]?this.morphTargetDictionary[t]:(console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+t+" does not exist. Returning 0."),0)},THREE.Mesh.prototype.raycast=function(){var T=new THREE.Matrix4,x=new THREE.Ray,b=new THREE.Sphere,R=new THREE.Vector3,w=new THREE.Vector3,H=new THREE.Vector3;return function(t,e){if(null===(p=this.geometry).boundingSphere&&p.computeBoundingSphere(),b.copy(p.boundingSphere),b.applyMatrix4(this.matrixWorld),!1!==t.ray.isIntersectionSphere(b)&&(T.getInverse(this.matrixWorld),x.copy(t.ray).applyMatrix4(T),null===p.boundingBox||!1!==x.isIntersectionBox(p.boundingBox)))if(p instanceof THREE.BufferGeometry){var i=this.material;if(void 0!==i){var r,n,a=p.attributes,o=t.precision;if(void 0!==a.index){var s=a.index.array,l=a.position.array,h=p.offsets;0===h.length&&(h=[{start:0,count:s.length,index:0}]);for(var c=0,u=h.length;c<u;++c){a=h[c].start;for(var d=h[c].index,p=a,f=a+h[c].count;p<f;p+=3){a=d+s[p],r=d+s[p+1],n=d+s[p+2],R.fromArray(l,3*a),w.fromArray(l,3*r),H.fromArray(l,3*n);var m=i.side===THREE.BackSide?x.intersectTriangle(H,w,R,!0):x.intersectTriangle(R,w,H,i.side!==THREE.DoubleSide);if(null!==m){m.applyMatrix4(this.matrixWorld);var g=t.ray.origin.distanceTo(m);g<o||g<t.near||g>t.far||e.push({distance:g,point:m,face:new THREE.Face3(a,r,n,THREE.Triangle.normal(R,w,H)),faceIndex:null,object:this})}}}}else for(s=p=0,f=(l=a.position.array).length;p<f;p+=3,s+=9)r=(a=p)+1,n=p+2,R.fromArray(l,s),w.fromArray(l,s+3),H.fromArray(l,s+6),null!==(m=i.side===THREE.BackSide?x.intersectTriangle(H,w,R,!0):x.intersectTriangle(R,w,H,i.side!==THREE.DoubleSide))&&(m.applyMatrix4(this.matrixWorld),(g=t.ray.origin.distanceTo(m))<o||g<t.near||g>t.far||e.push({distance:g,point:m,face:new THREE.Face3(a,r,n,THREE.Triangle.normal(R,w,H)),faceIndex:null,object:this}))}}else if(p instanceof THREE.Geometry)for(l=!0===(s=this.material instanceof THREE.MeshFaceMaterial)?this.material.materials:null,o=t.precision,h=p.vertices,c=0,u=p.faces.length;c<u;c++)if(d=p.faces[c],void 0!==(i=!0===s?l[d.materialIndex]:this.material)){if(a=h[d.a],r=h[d.b],n=h[d.c],!0===i.morphTargets){m=p.morphTargets,g=this.morphTargetInfluences,R.set(0,0,0),w.set(0,0,0),H.set(0,0,0);f=0;for(var E=m.length;f<E;f++){var v=g[f];if(0!==v){var y=m[f].vertices;R.x+=(y[d.a].x-a.x)*v,R.y+=(y[d.a].y-a.y)*v,R.z+=(y[d.a].z-a.z)*v,w.x+=(y[d.b].x-r.x)*v,w.y+=(y[d.b].y-r.y)*v,w.z+=(y[d.b].z-r.z)*v,H.x+=(y[d.c].x-n.x)*v,H.y+=(y[d.c].y-n.y)*v,H.z+=(y[d.c].z-n.z)*v}}R.add(a),w.add(r),H.add(n),a=R,r=w,n=H}null!==(m=i.side===THREE.BackSide?x.intersectTriangle(n,r,a,!0):x.intersectTriangle(a,r,n,i.side!==THREE.DoubleSide))&&(m.applyMatrix4(this.matrixWorld),(g=t.ray.origin.distanceTo(m))<o||g<t.near||g>t.far||e.push({distance:g,point:m,face:d,faceIndex:c,object:this}))}}}(),THREE.Mesh.prototype.clone=function(t,e){return void 0===t&&(t=new THREE.Mesh(this.geometry,this.material)),THREE.Object3D.prototype.clone.call(this,t,e),t},THREE.Bone=function(t){THREE.Object3D.call(this),this.skin=t},THREE.Bone.prototype=Object.create(THREE.Object3D.prototype),THREE.Bone.prototype.constructor=THREE.Bone,THREE.Skeleton=function(t,e,i){if(this.useVertexTexture=void 0===i||i,this.identityMatrix=new THREE.Matrix4,t=t||[],this.bones=t.slice(0),this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=t=256<this.bones.length?64:64<this.bones.length?32:16<this.bones.length?16:8,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*this.bones.length),void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else for(console.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[],e=0,t=this.bones.length;e<t;e++)this.boneInverses.push(new THREE.Matrix4)},THREE.Skeleton.prototype.calculateInverses=function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var i=new THREE.Matrix4;this.bones[t]&&i.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(i)}},THREE.Skeleton.prototype.pose=function(){for(var t,e=0,i=this.bones.length;e<i;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,i=this.bones.length;e<i;e++)(t=this.bones[e])&&(t.parent?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},THREE.Skeleton.prototype.update=function(){var i=new THREE.Matrix4;return function(){for(var t=0,e=this.bones.length;t<e;t++)i.multiplyMatrices(this.bones[t]?this.bones[t].matrixWorld:this.identityMatrix,this.boneInverses[t]),i.flattenToArrayOffset(this.boneMatrices,16*t);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),THREE.SkinnedMesh=function(t,e,i){if(THREE.Mesh.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new THREE.Matrix4,this.bindMatrixInverse=new THREE.Matrix4,t=[],this.geometry&&void 0!==this.geometry.bones){for(var r,n,a,o,s=0,l=this.geometry.bones.length;s<l;++s)n=(r=this.geometry.bones[s]).pos,a=r.rotq,o=r.scl,e=new THREE.Bone(this),t.push(e),e.name=r.name,e.position.set(n[0],n[1],n[2]),e.quaternion.set(a[0],a[1],a[2],a[3]),void 0!==o?e.scale.set(o[0],o[1],o[2]):e.scale.set(1,1,1);for(s=0,l=this.geometry.bones.length;s<l;++s)-1!==(r=this.geometry.bones[s]).parent?t[r.parent].add(t[s]):this.add(t[s])}this.normalizeSkinWeights(),this.updateMatrixWorld(!0),this.bind(new THREE.Skeleton(t,void 0,i))},THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype),THREE.SkinnedMesh.prototype.constructor=THREE.SkinnedMesh,THREE.SkinnedMesh.prototype.bind=function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},THREE.SkinnedMesh.prototype.pose=function(){this.skeleton.pose()},THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var t=0;t<this.geometry.skinIndices.length;t++){var e=this.geometry.skinWeights[t],i=1/e.lengthManhattan();1/0!=i?e.multiplyScalar(i):e.set(1)}},THREE.SkinnedMesh.prototype.updateMatrixWorld=function(t){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh unreckognized bindMode: "+this.bindMode)},THREE.SkinnedMesh.prototype.clone=function(t){return void 0===t&&(t=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture)),THREE.Mesh.prototype.clone.call(this,t),t},THREE.MorphAnimMesh=function(t,e){THREE.Mesh.call(this,t,e),this.type="MorphAnimMesh",this.duration=1e3,this.mirroredLoop=!1,this.currentKeyframe=this.lastKeyframe=this.time=0,this.direction=1,this.directionBackwards=!1,this.setFrameRange(0,this.geometry.morphTargets.length-1)},THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype),THREE.MorphAnimMesh.prototype.constructor=THREE.MorphAnimMesh,THREE.MorphAnimMesh.prototype.setFrameRange=function(t,e){this.startKeyframe=t,this.endKeyframe=e,this.length=this.endKeyframe-this.startKeyframe+1},THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1,this.directionBackwards=!1},THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1,this.directionBackwards=!0},THREE.MorphAnimMesh.prototype.parseAnimations=function(){var t=this.geometry;t.animations||(t.animations={});for(var e,i=t.animations,r=/([a-z]+)_?(\d+)/,n=0,a=t.morphTargets.length;n<a;n++){var o=t.morphTargets[n].name.match(r);if(o&&1<o.length){i[o=o[1]]||(i[o]={start:1/0,end:-1/0});var s=i[o];n<s.start&&(s.start=n),n>s.end&&(s.end=n),e=e||o}}t.firstAnimation=e},THREE.MorphAnimMesh.prototype.setAnimationLabel=function(t,e,i){this.geometry.animations||(this.geometry.animations={}),this.geometry.animations[t]={start:e,end:i}},THREE.MorphAnimMesh.prototype.playAnimation=function(t,e){var i=this.geometry.animations[t];i?(this.setFrameRange(i.start,i.end),this.duration=(i.end-i.start)/e*1e3,this.time=0):console.warn("animation["+t+"] undefined")},THREE.MorphAnimMesh.prototype.updateAnimation=function(t){var e=this.duration/this.length;this.time+=this.direction*t,this.mirroredLoop?(this.time>this.duration||this.time<0)&&(this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),this.time<0&&(this.time=0,this.directionBackwards=!1)):(this.time%=this.duration,this.time<0&&(this.time+=this.duration)),(t=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/e),0,this.length-1))!==this.currentKeyframe&&(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[t]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=t),e=this.time%e/e,this.directionBackwards&&(e=1-e),this.morphTargetInfluences[this.currentKeyframe]=e,this.morphTargetInfluences[this.lastKeyframe]=1-e},THREE.MorphAnimMesh.prototype.interpolateTargets=function(t,e,i){for(var r=this.morphTargetInfluences,n=0,a=r.length;n<a;n++)r[n]=0;-1<t&&(r[t]=1-i),-1<e&&(r[e]=i)},THREE.MorphAnimMesh.prototype.clone=function(t){return void 0===t&&(t=new THREE.MorphAnimMesh(this.geometry,this.material)),t.duration=this.duration,t.mirroredLoop=this.mirroredLoop,t.time=this.time,t.lastKeyframe=this.lastKeyframe,t.currentKeyframe=this.currentKeyframe,t.direction=this.direction,t.directionBackwards=this.directionBackwards,THREE.Mesh.prototype.clone.call(this,t),t},THREE.LOD=function(){THREE.Object3D.call(this),this.objects=[]},THREE.LOD.prototype=Object.create(THREE.Object3D.prototype),THREE.LOD.prototype.constructor=THREE.LOD,THREE.LOD.prototype.addLevel=function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var i=0;i<this.objects.length&&!(e<this.objects[i].distance);i++);this.objects.splice(i,0,{distance:e,object:t}),this.add(t)},THREE.LOD.prototype.getObjectForDistance=function(t){for(var e=1,i=this.objects.length;e<i&&!(t<this.objects[e].distance);e++);return this.objects[e-1].object},THREE.LOD.prototype.raycast=function(){var r=new THREE.Vector3;return function(t,e){r.setFromMatrixPosition(this.matrixWorld);var i=t.ray.origin.distanceTo(r);this.getObjectForDistance(i).raycast(t,e)}}(),THREE.LOD.prototype.update=function(){var r=new THREE.Vector3,n=new THREE.Vector3;return function(t){if(1<this.objects.length){r.setFromMatrixPosition(t.matrixWorld),n.setFromMatrixPosition(this.matrixWorld),t=r.distanceTo(n),this.objects[0].object.visible=!0;for(var e=1,i=this.objects.length;e<i&&t>=this.objects[e].distance;e++)this.objects[e-1].object.visible=!1,this.objects[e].object.visible=!0;for(;e<i;e++)this.objects[e].object.visible=!1}}}(),THREE.LOD.prototype.clone=function(t){void 0===t&&(t=new THREE.LOD),THREE.Object3D.prototype.clone.call(this,t);for(var e=0,i=this.objects.length;e<i;e++){var r=this.objects[e].object.clone();r.visible=0===e,t.addLevel(r,this.objects[e].distance)}return t},THREE.Sprite=function(){var t=new Uint16Array([0,1,2,0,2,3]),e=new Float32Array([-.5,-.5,0,.5,-.5,0,.5,.5,0,-.5,.5,0]),i=new Float32Array([0,0,1,0,1,1,0,1]),r=new THREE.BufferGeometry;return r.addAttribute("index",new THREE.BufferAttribute(t,1)),r.addAttribute("position",new THREE.BufferAttribute(e,3)),r.addAttribute("uv",new THREE.BufferAttribute(i,2)),function(t){THREE.Object3D.call(this),this.type="Sprite",this.geometry=r,this.material=void 0!==t?t:new THREE.SpriteMaterial}}(),THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype),THREE.Sprite.prototype.constructor=THREE.Sprite,THREE.Sprite.prototype.raycast=function(){var r=new THREE.Vector3;return function(t,e){r.setFromMatrixPosition(this.matrixWorld);var i=t.ray.distanceToPoint(r);i>this.scale.x||e.push({distance:i,point:this.position,face:null,object:this})}}(),THREE.Sprite.prototype.clone=function(t){return void 0===t&&(t=new THREE.Sprite(this.material)),THREE.Object3D.prototype.clone.call(this,t),t},THREE.Particle=THREE.Sprite,THREE.LensFlare=function(t,e,i,r,n){THREE.Object3D.call(this),this.lensFlares=[],this.positionScreen=new THREE.Vector3,(this.customUpdateCallback=void 0)!==t&&this.add(t,e,i,r,n)},THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype),THREE.LensFlare.prototype.constructor=THREE.LensFlare,THREE.LensFlare.prototype.add=function(t,e,i,r,n,a){void 0===e&&(e=-1),void 0===i&&(i=0),void 0===a&&(a=1),void 0===n&&(n=new THREE.Color(16777215)),void 0===r&&(r=THREE.NormalBlending),i=Math.min(i,Math.max(0,i)),this.lensFlares.push({texture:t,size:e,distance:i,x:0,y:0,z:0,scale:1,rotation:1,opacity:a,color:n,blending:r})},THREE.LensFlare.prototype.updateLensFlares=function(){var t,e,i=this.lensFlares.length,r=2*-this.positionScreen.x,n=2*-this.positionScreen.y;for(t=0;t<i;t++)(e=this.lensFlares[t]).x=this.positionScreen.x+r*e.distance,e.y=this.positionScreen.y+n*e.distance,e.wantedRotation=e.x*Math.PI*.25,e.rotation+=.25*(e.wantedRotation-e.rotation)},THREE.Scene=function(){THREE.Object3D.call(this),this.type="Scene",this.overrideMaterial=this.fog=null,this.autoUpdate=!0},THREE.Scene.prototype=Object.create(THREE.Object3D.prototype),THREE.Scene.prototype.constructor=THREE.Scene,THREE.Scene.prototype.clone=function(t){return void 0===t&&(t=new THREE.Scene),THREE.Object3D.prototype.clone.call(this,t),null!==this.fog&&(t.fog=this.fog.clone()),null!==this.overrideMaterial&&(t.overrideMaterial=this.overrideMaterial.clone()),t.autoUpdate=this.autoUpdate,t.matrixAutoUpdate=this.matrixAutoUpdate,t},THREE.Fog=function(t,e,i){this.name="",this.color=new THREE.Color(t),this.near=void 0!==e?e:1,this.far=void 0!==i?i:1e3},THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)},THREE.FogExp2=function(t,e){this.name="",this.color=new THREE.Color(t),this.density=void 0!==e?e:25e-5},THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)},THREE.ShaderChunk={},THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n\n\tif ( gl_FragColor.a < ALPHATEST ) discard;\n\n#endif\n",THREE.ShaderChunk.lights_lambert_vertex="vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\ntransformedNormal = normalize( transformedNormal );\n\n#if MAX_DIR_LIGHTS > 0\n\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\tvec3 dirVector = normalize( lDirection.xyz );\n\n\tfloat dotProduct = dot( transformedNormal, dirVector );\n\tvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t#endif\n\n\t#endif\n\n\t#ifdef WRAP_AROUND\n\n\t\tvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\tdirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tdirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n\n\t\t#endif\n\n\t#endif\n\n\tvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n\n\t#endif\n\n}\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\tpointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tpointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\tvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\tfloat lDistance = 1.0;\n\t\t\tif ( spotLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\t\t\tvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\t\tspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n\n\t\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\t\tspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\tvec3 lVector = normalize( lDirection.xyz );\n\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\t\tfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n\n#endif",THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif",THREE.ShaderChunk.default_vertex="#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#elif defined( USE_MORPHTARGETS )\n\n\tvec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n",THREE.ShaderChunk.map_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif",THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\t#ifdef USE_MORPHNORMALS\n\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n\t#else\n\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n\t#endif\n\n#endif\n",THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif",THREE.ShaderChunk.lightmap_pars_vertex="#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\n#endif",THREE.ShaderChunk.lights_phong_fragment="vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n\n#ifdef DOUBLE_SIDED\n\n\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tvec3 pointDiffuse = vec3( 0.0 );\n\tvec3 pointSpecular = vec3( 0.0 );\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\n\t\t\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\n\n\t\t\t\t// specular\n\n\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tvec3 spotDiffuse = vec3( 0.0 );\n\tvec3 spotSpecular = vec3( 0.0 );\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( spotLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t#else\n\n\t\t\t\tfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t#endif\n\n\t\t\tspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\n\n\t\t\t\t\t// specular\n\n\t\t\tvec3 spotHalfVector = normalize( lVector + viewPosition );\n\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n\t\t\tfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\n\t\t\tspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tvec3 dirDiffuse = vec3( 0.0 );\n\tvec3 dirSpecular = vec3( 0.0 );\n\n\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, dirVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\n\t\t// specular\n\n\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n\t\t/*\n\t\t// fresnel term from skin shader\n\t\tconst float F0 = 0.128;\n\n\t\tfloat base = 1.0 - dot( viewPosition, dirHalfVector );\n\t\tfloat exponential = pow( base, 5.0 );\n\n\t\tfloat fresnel = exponential + F0 * ( 1.0 - exponential );\n\t\t*/\n\n\t\t/*\n\t\t// fresnel term from fresnel shader\n\t\tconst float mFresnelBias = 0.08;\n\t\tconst float mFresnelScale = 0.3;\n\t\tconst float mFresnelPower = 5.0;\n\n\t\tfloat fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\n\t\t*/\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t// \t\tdirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tvec3 hemiDiffuse = vec3( 0.0 );\n\tvec3 hemiSpecular = vec3( 0.0 );\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\tvec3 lVector = normalize( lDirection.xyz );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\themiDiffuse += diffuse * hemiColor;\n\n\t\t// specular (sky light)\n\n\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\tfloat hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\n\t\t// specular (ground light)\n\n\t\tvec3 lVectorGround = -lVector;\n\n\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\tfloat hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\n\t\tfloat dotProductGround = dot( normal, lVectorGround );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n\t\themiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\n\t}\n\n#endif\n\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n\n#if MAX_DIR_LIGHTS > 0\n\n\ttotalDiffuse += dirDiffuse;\n\ttotalSpecular += dirSpecular;\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\ttotalDiffuse += hemiDiffuse;\n\ttotalSpecular += hemiSpecular;\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\ttotalDiffuse += pointDiffuse;\n\ttotalSpecular += pointSpecular;\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\ttotalDiffuse += spotDiffuse;\n\ttotalSpecular += spotSpecular;\n\n#endif\n\n#ifdef METAL\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n\n#else\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n\n#endif",THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif",THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\n\tvec3 morphedNormal = vec3( 0.0 );\n\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n\tmorphedNormal += normal;\n\n#endif",THREE.ShaderChunk.envmap_pars_fragment="#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif\n",THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif",THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\t\t\t// Per-Pixel Tangent Space Normal Mapping\n\t\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n",THREE.ShaderChunk.lights_phong_pars_vertex="#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n",THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\tuniform sampler2D lightMap;\n\n#endif",THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif",THREE.ShaderChunk.lights_phong_vertex="#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif",THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\t#ifdef GAMMA_INPUT\n\n\t\ttexelColor.xyz *= texelColor.xyz;\n\n\t#endif\n\n\tgl_FragColor = gl_FragColor * texelColor;\n\n#endif",THREE.ShaderChunk.lightmap_vertex="#ifdef USE_LIGHTMAP\n\n\tvUv2 = uv2;\n\n#endif",THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n\n\tgl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n\n#endif",THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n",THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\n\n\t#ifdef GAMMA_INPUT\n\n\t\tvColor = color * color;\n\n\t#else\n\n\t\tvColor = color;\n\n\t#endif\n\n#endif",THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n\n\t#ifdef USE_MORPHTARGETS\n\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n",THREE.ShaderChunk.envmap_pars_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\n#endif\n",THREE.ShaderChunk.linear_to_gamma_fragment="#ifdef GAMMA_OUTPUT\n\n\tgl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n\n#endif",THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif",THREE.ShaderChunk.lights_lambert_pars_vertex="uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n",THREE.ShaderChunk.map_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n",THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\n\t\tvec3 worldNormal = normalize( vec3( vec4( normal, 0.0 ) * viewMatrix ) );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = clamp( flipNormal * reflectVec.y * 0.5 + 0.5, 0.0, 1.0);\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * 0.15915494309189533576888376337251 + 0.5; // reciprocal( 2 PI ) + 0.5\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t\t\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\t#ifdef GAMMA_INPUT\n\n\t\tenvColor.xyz *= envColor.xyz;\n\n\t#endif\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\tgl_FragColor.xyz += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n",THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif",THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif",THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif",THREE.ShaderChunk.specularmap_fragment="float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif",THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tconst float LOG2 = 1.442695;\n\t\tfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\n\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n\n#endif",THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t\t\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n\t\t\t//\thttp://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n\t\t\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif",THREE.ShaderChunk.defaultnormal_vertex="#ifdef USE_SKINNING\n\n\tvec3 objectNormal = skinnedNormal.xyz;\n\n#elif defined( USE_MORPHNORMALS )\n\n\tvec3 objectNormal = morphedNormal;\n\n#else\n\n\tvec3 objectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n",THREE.ShaderChunk.lights_phong_pars_fragment="uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif",THREE.ShaderChunk.map_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif",THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n\n\tgl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n\n#endif",THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif",THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\n\n\tgl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\n\n#endif",THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\n\tvec3 morphed = vec3( 0.0 );\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n\tmorphed += position;\n\n#endif",THREE.ShaderChunk.envmap_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\n\tworldNormal = normalize( worldNormal );\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t#else\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t#endif\n\n#endif\n",THREE.ShaderChunk.shadowmap_fragment="#ifdef USE_SHADOWMAP\n\n\t#ifdef SHADOWMAP_DEBUG\n\n\t\tvec3 frustumColors[3];\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n\t#endif\n\n\t#ifdef SHADOWMAP_CASCADE\n\n\t\tint inFrustumCount = 0;\n\n\t#endif\n\n\tfloat fDepth;\n\tvec3 shadowColor = vec3( 1.0 );\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\t\t// don't shadow pixels outside of light frustum\n\t\t\t\t// use just first frustum (for cascades)\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\n\n\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\tinFrustumCount += int( inFrustum );\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n\t\t#else\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t#endif\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t/*\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n\t\t\t\t\t\t// must enroll loop manually\n\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\tshadow += 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tshadow /= 9.0;\n\n\t\t*/\n\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#else\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\n\t\t// spot with multiple shadows is darker\n\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n\t\t// spot with multiple shadows has the same color as single shadow spot\n\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n\t\t\t#endif\n\n\t\t}\n\n\n\t\t#ifdef SHADOWMAP_DEBUG\n\n\t\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t}\n\n\t#ifdef GAMMA_OUTPUT\n\n\t\tshadowColor *= shadowColor;\n\n\t#endif\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n\n#endif\n",THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#elif defined( USE_MORPHTARGETS )\n\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n#endif\n",THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n#endif",THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n",THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\t#extension GL_EXT_frag_depth : enable\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif",THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n\n\tgl_FragColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n",THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",THREE.UniformsUtils={merge:function(t){for(var e={},i=0;i<t.length;i++){var r,n=this.clone(t[i]);for(r in n)e[r]=n[r]}return e},clone:function(t){var e,i={};for(e in t)for(var r in i[e]={},t[e]){var n=t[e][r];i[e][r]=n instanceof THREE.Color||n instanceof THREE.Vector2||n instanceof THREE.Vector3||n instanceof THREE.Vector4||n instanceof THREE.Matrix4||n instanceof THREE.Texture?n.clone():n instanceof Array?n.slice():n}return i}},THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},alphaMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:.98},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:25e-5},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:25e-5},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}},THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.skinbase_vertex,"\t#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"\t#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"\t#ifdef DOUBLE_SIDED\n\t\tif ( gl_FrontFacing )\n\t\t\tgl_FragColor.xyz *= vLightFront;\n\t\telse\n\t\t\tgl_FragColor.xyz *= vLightBack;\n\t#else\n\t\tgl_FragColor.xyz *= vLightFront;\n\t#endif",THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"\tvNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["#define PHONG\nuniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\tgl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tgl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2e3},opacity:{type:"f",value:1}},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform float mNear;\nuniform float mFar;\nuniform float opacity;",THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {",THREE.ShaderChunk.logdepthbuf_fragment,"\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\n\tgl_FragColor = vec4( vec3( color ), opacity );\n}"].join("\n")},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:["varying vec3 vNormal;",THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvNormal = normalize( normalMatrix * normal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vNormal;",THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:["varying vec3 vWorldPosition;",THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},equirect:{uniforms:{tEquirect:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:["varying vec3 vWorldPosition;",THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\nvec3 direction = normalize( vWorldPosition );\nvec2 sampleUV;\nsampleUV.y = clamp( tFlip * direction.y * -0.5 + 0.5, 0.0, 1.0);\nsampleUV.x = atan( direction.z, direction.x ) * 0.15915494309189533576888376337251 + 0.5;\ngl_FragColor = texture2D( tEquirect, sampleUV );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:[THREE.ShaderChunk.logdepthbuf_pars_fragment,"vec4 pack_depth( const in float depth ) {\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {",THREE.ShaderChunk.logdepthbuf_fragment,"\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n\t#else\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n\t#endif\n}"].join("\n")}},THREE.WebGLRenderer=function(t){function c(t){var e=t.geometry;t=t.material;var i=e.vertices.length;if(t.attributes)for(var r in void 0===e.__webglCustomAttributesList&&(e.__webglCustomAttributesList=[]),t.attributes){var n=t.attributes[r];if(!n.__webglInitialized||n.createUniqueBuffers){n.__webglInitialized=!0;var a=1;"v2"===n.type?a=2:"v3"===n.type?a=3:"v4"===n.type?a=4:"c"===n.type&&(a=3),n.size=a,n.array=new Float32Array(i*a),n.buffer=je.createBuffer(),n.buffer.belongsToAttribute=r,n.needsUpdate=!0}e.__webglCustomAttributesList.push(n)}}function ze(t,e){var i=e.geometry,r=3*(o=t.faces3).length,n=1*o.length,a=3*o.length,o=Ue(e,t);t.__vertexArray=new Float32Array(3*r),t.__normalArray=new Float32Array(3*r),t.__colorArray=new Float32Array(3*r),t.__uvArray=new Float32Array(2*r),1<i.faceVertexUvs.length&&(t.__uv2Array=new Float32Array(2*r)),i.hasTangents&&(t.__tangentArray=new Float32Array(4*r)),e.geometry.skinWeights.length&&e.geometry.skinIndices.length&&(t.__skinIndexArray=new Float32Array(4*r),t.__skinWeightArray=new Float32Array(4*r)),i=null!==st.get("OES_element_index_uint")&&21845<n?Uint32Array:Uint16Array,t.__typeArray=i,t.__faceArray=new i(3*n),t.__lineArray=new i(2*a);var s=t.numMorphTargets;if(s)for(t.__morphTargetsArrays=[],i=0;i<s;i++)t.__morphTargetsArrays.push(new Float32Array(3*r));if(s=t.numMorphNormals)for(t.__morphNormalsArrays=[],i=0;i<s;i++)t.__morphNormalsArrays.push(new Float32Array(3*r));if(t.__webglFaceCount=3*n,t.__webglLineCount=2*a,o.attributes)for(var l in void 0===t.__webglCustomAttributesList&&(t.__webglCustomAttributesList=[]),o.attributes){var h;n=o.attributes[l],a={};for(h in n)a[h]=n[h];a.__webglInitialized&&!a.createUniqueBuffers||(a.__webglInitialized=!0,i=1,"v2"===a.type?i=2:"v3"===a.type?i=3:"v4"===a.type?i=4:"c"===a.type&&(i=3),a.size=i,a.array=new Float32Array(r*i),a.buffer=je.createBuffer(),a.buffer.belongsToAttribute=l,n.needsUpdate=!0,a.__original=n),t.__webglCustomAttributesList.push(a)}t.__inittedArrays=!0}function Ue(t,e){return t.material instanceof THREE.MeshFaceMaterial?t.material.materials[e.materialIndex]:t.material}function d(t,e,i,r){i=i.attributes;for(var n=e.attributes,a=0,o=(e=e.attributesKeys).length;a<o;a++){var s=e[a],l=n[s];if(0<=l){var h=i[s];void 0!==h?(s=h.itemSize,je.bindBuffer(je.ARRAY_BUFFER,h.buffer),f(l),je.vertexAttribPointer(l,s,je.FLOAT,!1,0,r*s*4)):void 0!==t.defaultAttributeValues&&(2===t.defaultAttributeValues[s].length?je.vertexAttrib2fv(l,t.defaultAttributeValues[s]):3===t.defaultAttributeValues[s].length&&je.vertexAttrib3fv(l,t.defaultAttributeValues[s]))}}m()}function p(){for(var t=0,e=it.length;t<e;t++)it[t]=0}function f(t){it[t]=1,0===rt[t]&&(je.enableVertexAttribArray(t),rt[t]=1)}function m(){for(var t=0,e=rt.length;t<e;t++)rt[t]!==it[t]&&(je.disableVertexAttribArray(t),rt[t]=0)}function u(t,e){return t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function g(t,e){return t.z!==e.z?e.z-t.z:t.id-e.id}function E(t,e){return e[0]-t[0]}function v(t,e,i,r,n,a){for(var o,s=0,l=t.length;s<l;s++){var h=(o=t[s]).object,c=o.buffer;if(R(h,e),a)o=a;else{if(!(o=o.material))continue;n&&be.setBlending(o.blending,o.blendEquation,o.blendSrc,o.blendDst),be.setDepthTest(o.depthTest),be.setDepthWrite(o.depthWrite),H(o.polygonOffset,o.polygonOffsetFactor,o.polygonOffsetUnits)}be.setMaterialFaces(o),c instanceof THREE.BufferGeometry?be.renderBufferDirect(e,i,r,o,c,h):be.renderBuffer(e,i,r,o,c,h)}}function y(t,e,i,r,n,a,o){for(var s,l=0,h=t.length;l<h;l++){var c=(s=t[l]).object;if(c.visible){if(o)s=o;else{if(!(s=s[e]))continue;a&&be.setBlending(s.blending,s.blendEquation,s.blendSrc,s.blendDst),be.setDepthTest(s.depthTest),be.setDepthWrite(s.depthWrite),H(s.polygonOffset,s.polygonOffsetFactor,s.polygonOffsetUnits)}be.renderImmediateObject(i,r,n,s,c)}}}function Ve(t,e){var i=t.material,r=!1;if(void 0===Xe[e.id]||!0===e.groupsNeedUpdate){delete A[t.id];for(var n,a,o=Xe,s=e.id,l=(i=i instanceof THREE.MeshFaceMaterial,st.get("OES_element_index_uint")?4294967296:65535),h=(r={},e.morphTargets.length),c=e.morphNormals.length,u={},d=[],p=0,f=e.faces.length;p<f;p++){n=e.faces[p];var m=i?n.materialIndex:0;m in r||(r[m]={hash:m,counter:0}),(n=r[m].hash+"_"+r[m].counter)in u||(a={id:Ct++,faces3:[],materialIndex:m,vertices:0,numMorphTargets:h,numMorphNormals:c},u[n]=a,d.push(a)),u[n].vertices+3>l&&(r[m].counter+=1,(n=r[m].hash+"_"+r[m].counter)in u||(a={id:Ct++,faces3:[],materialIndex:m,vertices:0,numMorphTargets:h,numMorphNormals:c},u[n]=a,d.push(a))),u[n].faces3.push(p),u[n].vertices+=3}o[s]=d,e.groupsNeedUpdate=!1}for(s=0,i=(o=Xe[e.id]).length;s<i;s++){if(void 0===(l=o[s]).__webglVertexBuffer){if((r=l).__webglVertexBuffer=je.createBuffer(),r.__webglNormalBuffer=je.createBuffer(),r.__webglTangentBuffer=je.createBuffer(),r.__webglColorBuffer=je.createBuffer(),r.__webglUVBuffer=je.createBuffer(),r.__webglUV2Buffer=je.createBuffer(),r.__webglSkinIndicesBuffer=je.createBuffer(),r.__webglSkinWeightsBuffer=je.createBuffer(),r.__webglFaceBuffer=je.createBuffer(),r.__webglLineBuffer=je.createBuffer(),c=r.numMorphTargets)for(r.__webglMorphTargetsBuffers=[],h=0;h<c;h++)r.__webglMorphTargetsBuffers.push(je.createBuffer());if(c=r.numMorphNormals)for(r.__webglMorphNormalsBuffers=[],h=0;h<c;h++)r.__webglMorphNormalsBuffers.push(je.createBuffer());be.info.memory.geometries++,ze(l,t),e.verticesNeedUpdate=!0,e.morphTargetsNeedUpdate=!0,e.elementsNeedUpdate=!0,e.uvsNeedUpdate=!0,e.normalsNeedUpdate=!0,e.tangentsNeedUpdate=!0,r=e.colorsNeedUpdate=!0}else r=!1;!r&&void 0!==t.__webglActive||T(A,l,t)}t.__webglActive=!0}function T(t,e,i){var r=i.id;t[r]=t[r]||[],t[r].push({id:r,buffer:e,object:i,material:null,z:0})}function x(t){var e=t.geometry;if(e instanceof THREE.BufferGeometry)for(var i=e.attributes,r=e.attributesKeys,n=0,a=r.length;n<a;n++){var o=r[n],s=i[o];if(void 0===s.buffer&&(s.buffer=je.createBuffer(),s.needsUpdate=!0),!0===s.needsUpdate){var l="index"===o?je.ELEMENT_ARRAY_BUFFER:je.ARRAY_BUFFER;je.bindBuffer(l,s.buffer),je.bufferData(l,s.array,je.STATIC_DRAW),s.needsUpdate=!1}}else if(t instanceof THREE.Mesh){!0===e.groupsNeedUpdate&&Ve(t,e);for(var h=Xe[e.id],c=(n=0,h.length);n<c;n++){var u=h[n],d=Ue(t,u);!0===e.groupsNeedUpdate&&ze(u,t);var p=d.attributes&&Ge(d);if(e.verticesNeedUpdate||e.morphTargetsNeedUpdate||e.elementsNeedUpdate||e.uvsNeedUpdate||e.normalsNeedUpdate||e.colorsNeedUpdate||e.tangentsNeedUpdate||p){var f=u,m=t,g=je.DYNAMIC_DRAW,E=!e.dynamic,v=d;if(f.__inittedArrays){var y=v&&void 0!==v.shading&&v.shading===THREE.SmoothShading,T=void 0,x=void 0,b=void 0,R=void 0,w=void 0,H=void 0,_=void 0,S=void 0,C=void 0,M=void 0,A=void 0,P=void 0,L=void 0,D=void 0,F=void 0,k=void 0,O=void 0,B=void 0,N=void 0,I=void 0,z=void 0,U=void 0,V=void 0,G=void 0,W=void 0,j=void 0,X=void 0,$=void 0,q=void 0,Y=void 0,K=void 0,Q=void 0,Z=void 0,J=void 0,tt=void 0,et=void 0,it=void 0,rt=void 0,nt=void 0,at=0,ot=0,st=0,lt=0,ht=0,ct=0,ut=0,dt=0,pt=0,ft=0,mt=0,gt=0,Et=void 0,vt=f.__vertexArray,yt=f.__uvArray,Tt=f.__uv2Array,xt=f.__normalArray,bt=f.__tangentArray,Rt=f.__colorArray,wt=f.__skinIndexArray,Ht=f.__skinWeightArray,_t=f.__morphTargetsArrays,St=f.__morphNormalsArrays,Ct=f.__webglCustomAttributesList,Mt=void 0,At=f.__faceArray,Pt=f.__lineArray,Lt=m.geometry,Dt=Lt.elementsNeedUpdate,Ft=Lt.uvsNeedUpdate,kt=Lt.normalsNeedUpdate,Ot=Lt.tangentsNeedUpdate,Bt=Lt.colorsNeedUpdate,Nt=Lt.morphTargetsNeedUpdate,It=Lt.vertices,zt=f.faces3,Ut=Lt.faces,Vt=Lt.faceVertexUvs[0],Gt=Lt.faceVertexUvs[1],Wt=Lt.skinIndices,jt=Lt.skinWeights,Xt=Lt.morphTargets,$t=Lt.morphNormals;if(Lt.verticesNeedUpdate){for(T=0,x=zt.length;T<x;T++)A=It[(b=Ut[zt[T]]).a],P=It[b.b],L=It[b.c],vt[ot]=A.x,vt[ot+1]=A.y,vt[ot+2]=A.z,vt[ot+3]=P.x,vt[ot+4]=P.y,vt[ot+5]=P.z,vt[ot+6]=L.x,vt[ot+7]=L.y,vt[ot+8]=L.z,ot+=9;je.bindBuffer(je.ARRAY_BUFFER,f.__webglVertexBuffer),je.bufferData(je.ARRAY_BUFFER,vt,g)}if(Nt)for(J=0,tt=Xt.length;J<tt;J++){for(T=mt=0,x=zt.length;T<x;T++)b=Ut[rt=zt[T]],A=Xt[J].vertices[b.a],P=Xt[J].vertices[b.b],L=Xt[J].vertices[b.c],(et=_t[J])[mt]=A.x,et[mt+1]=A.y,et[mt+2]=A.z,et[mt+3]=P.x,et[mt+4]=P.y,et[mt+5]=P.z,et[mt+6]=L.x,et[mt+7]=L.y,et[mt+8]=L.z,v.morphNormals&&(N=y?(O=(nt=$t[J].vertexNormals[rt]).a,B=nt.b,nt.c):B=O=$t[J].faceNormals[rt],(it=St[J])[mt]=O.x,it[mt+1]=O.y,it[mt+2]=O.z,it[mt+3]=B.x,it[mt+4]=B.y,it[mt+5]=B.z,it[mt+6]=N.x,it[mt+7]=N.y,it[mt+8]=N.z),mt+=9;je.bindBuffer(je.ARRAY_BUFFER,f.__webglMorphTargetsBuffers[J]),je.bufferData(je.ARRAY_BUFFER,_t[J],g),v.morphNormals&&(je.bindBuffer(je.ARRAY_BUFFER,f.__webglMorphNormalsBuffers[J]),je.bufferData(je.ARRAY_BUFFER,St[J],g))}if(jt.length){for(T=0,x=zt.length;T<x;T++)V=jt[(b=Ut[zt[T]]).a],G=jt[b.b],W=jt[b.c],Ht[ft]=V.x,Ht[ft+1]=V.y,Ht[ft+2]=V.z,Ht[ft+3]=V.w,Ht[ft+4]=G.x,Ht[ft+5]=G.y,Ht[ft+6]=G.z,Ht[ft+7]=G.w,Ht[ft+8]=W.x,Ht[ft+9]=W.y,Ht[ft+10]=W.z,Ht[ft+11]=W.w,j=Wt[b.a],X=Wt[b.b],$=Wt[b.c],wt[ft]=j.x,wt[ft+1]=j.y,wt[ft+2]=j.z,wt[ft+3]=j.w,wt[ft+4]=X.x,wt[ft+5]=X.y,wt[ft+6]=X.z,wt[ft+7]=X.w,wt[ft+8]=$.x,wt[ft+9]=$.y,wt[ft+10]=$.z,wt[ft+11]=$.w,ft+=12;0<ft&&(je.bindBuffer(je.ARRAY_BUFFER,f.__webglSkinIndicesBuffer),je.bufferData(je.ARRAY_BUFFER,wt,g),je.bindBuffer(je.ARRAY_BUFFER,f.__webglSkinWeightsBuffer),je.bufferData(je.ARRAY_BUFFER,Ht,g))}if(Bt){for(T=0,x=zt.length;T<x;T++)H=(b=Ut[zt[T]]).vertexColors,_=b.color,U=3===H.length&&v.vertexColors===THREE.VertexColors?(I=H[0],z=H[1],H[2]):z=I=_,Rt[pt]=I.r,Rt[pt+1]=I.g,Rt[pt+2]=I.b,Rt[pt+3]=z.r,Rt[pt+4]=z.g,Rt[pt+5]=z.b,Rt[pt+6]=U.r,Rt[pt+7]=U.g,Rt[pt+8]=U.b,pt+=9;0<pt&&(je.bindBuffer(je.ARRAY_BUFFER,f.__webglColorBuffer),je.bufferData(je.ARRAY_BUFFER,Rt,g))}if(Ot&&Lt.hasTangents){for(T=0,x=zt.length;T<x;T++)D=(S=(b=Ut[zt[T]]).vertexTangents)[0],F=S[1],k=S[2],bt[ut]=D.x,bt[ut+1]=D.y,bt[ut+2]=D.z,bt[ut+3]=D.w,bt[ut+4]=F.x,bt[ut+5]=F.y,bt[ut+6]=F.z,bt[ut+7]=F.w,bt[ut+8]=k.x,bt[ut+9]=k.y,bt[ut+10]=k.z,bt[ut+11]=k.w,ut+=12;je.bindBuffer(je.ARRAY_BUFFER,f.__webglTangentBuffer),je.bufferData(je.ARRAY_BUFFER,bt,g)}if(kt){for(T=0,x=zt.length;T<x;T++)if(R=(b=Ut[zt[T]]).vertexNormals,w=b.normal,3===R.length&&y)for(q=0;q<3;q++)K=R[q],xt[ct]=K.x,xt[ct+1]=K.y,xt[ct+2]=K.z,ct+=3;else for(q=0;q<3;q++)xt[ct]=w.x,xt[ct+1]=w.y,xt[ct+2]=w.z,ct+=3;je.bindBuffer(je.ARRAY_BUFFER,f.__webglNormalBuffer),je.bufferData(je.ARRAY_BUFFER,xt,g)}if(Ft&&Vt){for(T=0,x=zt.length;T<x;T++)if(void 0!==(C=Vt[zt[T]]))for(q=0;q<3;q++)Q=C[q],yt[st]=Q.x,yt[st+1]=Q.y,st+=2;0<st&&(je.bindBuffer(je.ARRAY_BUFFER,f.__webglUVBuffer),je.bufferData(je.ARRAY_BUFFER,yt,g))}if(Ft&&Gt){for(T=0,x=zt.length;T<x;T++)if(void 0!==(M=Gt[zt[T]]))for(q=0;q<3;q++)Z=M[q],Tt[lt]=Z.x,Tt[lt+1]=Z.y,lt+=2;0<lt&&(je.bindBuffer(je.ARRAY_BUFFER,f.__webglUV2Buffer),je.bufferData(je.ARRAY_BUFFER,Tt,g))}if(Dt){for(T=0,x=zt.length;T<x;T++)At[ht]=at,At[ht+1]=at+1,At[ht+2]=at+2,ht+=3,Pt[dt]=at,Pt[dt+1]=at+1,Pt[dt+2]=at,Pt[dt+3]=at+2,Pt[dt+4]=at+1,Pt[dt+5]=at+2,dt+=6,at+=3;je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,f.__webglFaceBuffer),je.bufferData(je.ELEMENT_ARRAY_BUFFER,At,g),je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,f.__webglLineBuffer),je.bufferData(je.ELEMENT_ARRAY_BUFFER,Pt,g)}if(Ct)for(q=0,Y=Ct.length;q<Y;q++)if((Mt=Ct[q]).__original.needsUpdate){if(gt=0,1===Mt.size){if(void 0===Mt.boundTo||"vertices"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)b=Ut[zt[T]],Mt.array[gt]=Mt.value[b.a],Mt.array[gt+1]=Mt.value[b.b],Mt.array[gt+2]=Mt.value[b.c],gt+=3;else if("faces"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)Et=Mt.value[zt[T]],Mt.array[gt]=Et,Mt.array[gt+1]=Et,Mt.array[gt+2]=Et,gt+=3}else if(2===Mt.size){if(void 0===Mt.boundTo||"vertices"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)b=Ut[zt[T]],A=Mt.value[b.a],P=Mt.value[b.b],L=Mt.value[b.c],Mt.array[gt]=A.x,Mt.array[gt+1]=A.y,Mt.array[gt+2]=P.x,Mt.array[gt+3]=P.y,Mt.array[gt+4]=L.x,Mt.array[gt+5]=L.y,gt+=6;else if("faces"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)L=P=A=Et=Mt.value[zt[T]],Mt.array[gt]=A.x,Mt.array[gt+1]=A.y,Mt.array[gt+2]=P.x,Mt.array[gt+3]=P.y,Mt.array[gt+4]=L.x,Mt.array[gt+5]=L.y,gt+=6}else if(3===Mt.size){var qt;if(qt="c"===Mt.type?["r","g","b"]:["x","y","z"],void 0===Mt.boundTo||"vertices"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)b=Ut[zt[T]],A=Mt.value[b.a],P=Mt.value[b.b],L=Mt.value[b.c],Mt.array[gt]=A[qt[0]],Mt.array[gt+1]=A[qt[1]],Mt.array[gt+2]=A[qt[2]],Mt.array[gt+3]=P[qt[0]],Mt.array[gt+4]=P[qt[1]],Mt.array[gt+5]=P[qt[2]],Mt.array[gt+6]=L[qt[0]],Mt.array[gt+7]=L[qt[1]],Mt.array[gt+8]=L[qt[2]],gt+=9;else if("faces"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)L=P=A=Et=Mt.value[zt[T]],Mt.array[gt]=A[qt[0]],Mt.array[gt+1]=A[qt[1]],Mt.array[gt+2]=A[qt[2]],Mt.array[gt+3]=P[qt[0]],Mt.array[gt+4]=P[qt[1]],Mt.array[gt+5]=P[qt[2]],Mt.array[gt+6]=L[qt[0]],Mt.array[gt+7]=L[qt[1]],Mt.array[gt+8]=L[qt[2]],gt+=9;else if("faceVertices"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)A=(Et=Mt.value[zt[T]])[0],P=Et[1],L=Et[2],Mt.array[gt]=A[qt[0]],Mt.array[gt+1]=A[qt[1]],Mt.array[gt+2]=A[qt[2]],Mt.array[gt+3]=P[qt[0]],Mt.array[gt+4]=P[qt[1]],Mt.array[gt+5]=P[qt[2]],Mt.array[gt+6]=L[qt[0]],Mt.array[gt+7]=L[qt[1]],Mt.array[gt+8]=L[qt[2]],gt+=9}else if(4===Mt.size)if(void 0===Mt.boundTo||"vertices"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)b=Ut[zt[T]],A=Mt.value[b.a],P=Mt.value[b.b],L=Mt.value[b.c],Mt.array[gt]=A.x,Mt.array[gt+1]=A.y,Mt.array[gt+2]=A.z,Mt.array[gt+3]=A.w,Mt.array[gt+4]=P.x,Mt.array[gt+5]=P.y,Mt.array[gt+6]=P.z,Mt.array[gt+7]=P.w,Mt.array[gt+8]=L.x,Mt.array[gt+9]=L.y,Mt.array[gt+10]=L.z,Mt.array[gt+11]=L.w,gt+=12;else if("faces"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)L=P=A=Et=Mt.value[zt[T]],Mt.array[gt]=A.x,Mt.array[gt+1]=A.y,Mt.array[gt+2]=A.z,Mt.array[gt+3]=A.w,Mt.array[gt+4]=P.x,Mt.array[gt+5]=P.y,Mt.array[gt+6]=P.z,Mt.array[gt+7]=P.w,Mt.array[gt+8]=L.x,Mt.array[gt+9]=L.y,Mt.array[gt+10]=L.z,Mt.array[gt+11]=L.w,gt+=12;else if("faceVertices"===Mt.boundTo)for(T=0,x=zt.length;T<x;T++)A=(Et=Mt.value[zt[T]])[0],P=Et[1],L=Et[2],Mt.array[gt]=A.x,Mt.array[gt+1]=A.y,Mt.array[gt+2]=A.z,Mt.array[gt+3]=A.w,Mt.array[gt+4]=P.x,Mt.array[gt+5]=P.y,Mt.array[gt+6]=P.z,Mt.array[gt+7]=P.w,Mt.array[gt+8]=L.x,Mt.array[gt+9]=L.y,Mt.array[gt+10]=L.z,Mt.array[gt+11]=L.w,gt+=12;je.bindBuffer(je.ARRAY_BUFFER,Mt.buffer),je.bufferData(je.ARRAY_BUFFER,Mt.array,g)}E&&(delete f.__inittedArrays,delete f.__colorArray,delete f.__normalArray,delete f.__tangentArray,delete f.__uvArray,delete f.__uv2Array,delete f.__faceArray,delete f.__vertexArray,delete f.__lineArray,delete f.__skinIndexArray,delete f.__skinWeightArray)}}}e.verticesNeedUpdate=!1,e.morphTargetsNeedUpdate=!1,e.elementsNeedUpdate=!1,e.uvsNeedUpdate=!1,e.normalsNeedUpdate=!1,e.colorsNeedUpdate=!1,e.tangentsNeedUpdate=!1,d.attributes&&We(d)}else if(t instanceof THREE.Line){if(p=(d=Ue(t,e)).attributes&&Ge(d),e.verticesNeedUpdate||e.colorsNeedUpdate||e.lineDistancesNeedUpdate||p){var Yt,Kt,Qt,Zt,Jt,te,ee,ie,re,ne,ae,oe,se=je.DYNAMIC_DRAW,le=e.vertices,he=e.colors,ce=e.lineDistances,ue=le.length,de=he.length,pe=ce.length,fe=e.__vertexArray,me=e.__colorArray,ge=e.__lineDistanceArray,Ee=e.colorsNeedUpdate,ve=e.lineDistancesNeedUpdate,ye=e.__webglCustomAttributesList;if(e.verticesNeedUpdate){for(Yt=0;Yt<ue;Yt++)Zt=le[Yt],fe[Jt=3*Yt]=Zt.x,fe[Jt+1]=Zt.y,fe[Jt+2]=Zt.z;je.bindBuffer(je.ARRAY_BUFFER,e.__webglVertexBuffer),je.bufferData(je.ARRAY_BUFFER,fe,se)}if(Ee){for(Kt=0;Kt<de;Kt++)te=he[Kt],me[Jt=3*Kt]=te.r,me[Jt+1]=te.g,me[Jt+2]=te.b;je.bindBuffer(je.ARRAY_BUFFER,e.__webglColorBuffer),je.bufferData(je.ARRAY_BUFFER,me,se)}if(ve){for(Qt=0;Qt<pe;Qt++)ge[Qt]=ce[Qt];je.bindBuffer(je.ARRAY_BUFFER,e.__webglLineDistanceBuffer),je.bufferData(je.ARRAY_BUFFER,ge,se)}if(ye)for(ee=0,ie=ye.length;ee<ie;ee++)if((oe=ye[ee]).needsUpdate&&(void 0===oe.boundTo||"vertices"===oe.boundTo)){if(Jt=0,ne=oe.value.length,1===oe.size)for(re=0;re<ne;re++)oe.array[re]=oe.value[re];else if(2===oe.size)for(re=0;re<ne;re++)ae=oe.value[re],oe.array[Jt]=ae.x,oe.array[Jt+1]=ae.y,Jt+=2;else if(3===oe.size)if("c"===oe.type)for(re=0;re<ne;re++)ae=oe.value[re],oe.array[Jt]=ae.r,oe.array[Jt+1]=ae.g,oe.array[Jt+2]=ae.b,Jt+=3;else for(re=0;re<ne;re++)ae=oe.value[re],oe.array[Jt]=ae.x,oe.array[Jt+1]=ae.y,oe.array[Jt+2]=ae.z,Jt+=3;else if(4===oe.size)for(re=0;re<ne;re++)ae=oe.value[re],oe.array[Jt]=ae.x,oe.array[Jt+1]=ae.y,oe.array[Jt+2]=ae.z,oe.array[Jt+3]=ae.w,Jt+=4;je.bindBuffer(je.ARRAY_BUFFER,oe.buffer),je.bufferData(je.ARRAY_BUFFER,oe.array,se),oe.needsUpdate=!1}}e.verticesNeedUpdate=!1,e.colorsNeedUpdate=!1,e.lineDistancesNeedUpdate=!1,d.attributes&&We(d)}else if(t instanceof THREE.PointCloud){if(p=(d=Ue(t,e)).attributes&&Ge(d),e.verticesNeedUpdate||e.colorsNeedUpdate||p){var Te,xe,be,Re,we,He,_e,Se,Ce,Me,Ae,Pe=je.DYNAMIC_DRAW,Le=e.vertices,De=Le.length,Fe=e.colors,ke=Fe.length,Oe=e.__vertexArray,Be=e.__colorArray,Ne=e.colorsNeedUpdate,Ie=e.__webglCustomAttributesList;if(e.verticesNeedUpdate){for(Te=0;Te<De;Te++)be=Le[Te],Oe[Re=3*Te]=be.x,Oe[Re+1]=be.y,Oe[Re+2]=be.z;je.bindBuffer(je.ARRAY_BUFFER,e.__webglVertexBuffer),je.bufferData(je.ARRAY_BUFFER,Oe,Pe)}if(Ne){for(xe=0;xe<ke;xe++)we=Fe[xe],Be[Re=3*xe]=we.r,Be[Re+1]=we.g,Be[Re+2]=we.b;je.bindBuffer(je.ARRAY_BUFFER,e.__webglColorBuffer),je.bufferData(je.ARRAY_BUFFER,Be,Pe)}if(Ie)for(He=0,_e=Ie.length;He<_e;He++){if((Ae=Ie[He]).needsUpdate&&(void 0===Ae.boundTo||"vertices"===Ae.boundTo))if(Ce=Ae.value.length,Re=0,1===Ae.size)for(Se=0;Se<Ce;Se++)Ae.array[Se]=Ae.value[Se];else if(2===Ae.size)for(Se=0;Se<Ce;Se++)Me=Ae.value[Se],Ae.array[Re]=Me.x,Ae.array[Re+1]=Me.y,Re+=2;else if(3===Ae.size)if("c"===Ae.type)for(Se=0;Se<Ce;Se++)Me=Ae.value[Se],Ae.array[Re]=Me.r,Ae.array[Re+1]=Me.g,Ae.array[Re+2]=Me.b,Re+=3;else for(Se=0;Se<Ce;Se++)Me=Ae.value[Se],Ae.array[Re]=Me.x,Ae.array[Re+1]=Me.y,Ae.array[Re+2]=Me.z,Re+=3;else if(4===Ae.size)for(Se=0;Se<Ce;Se++)Me=Ae.value[Se],Ae.array[Re]=Me.x,Ae.array[Re+1]=Me.y,Ae.array[Re+2]=Me.z,Ae.array[Re+3]=Me.w,Re+=4;je.bindBuffer(je.ARRAY_BUFFER,Ae.buffer),je.bufferData(je.ARRAY_BUFFER,Ae.array,Pe),Ae.needsUpdate=!1}}e.verticesNeedUpdate=!1,e.colorsNeedUpdate=!1,d.attributes&&We(d)}}function Ge(t){for(var e in t.attributes)if(t.attributes[e].needsUpdate)return!0;return!1}function We(t){for(var e in t.attributes)t.attributes[e].needsUpdate=!1}function b(t,e,i,r,n){var a,o,s,l;if(Se=0,r.needsUpdate){r.program&&Ne(r),r.addEventListener("dispose",Be);var h,c=Ie[r.type];if(c){var u=THREE.ShaderLib[c];r.__webglShader={uniforms:THREE.UniformsUtils.clone(u.uniforms),vertexShader:u.vertexShader,fragmentShader:u.fragmentShader}}else r.__webglShader={uniforms:r.uniforms,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader};for(var d=0,p=0,f=0,m=0,g=0,E=e.length;g<E;g++){var v=e[g];v.onlyShadow||!1===v.visible||(v instanceof THREE.DirectionalLight&&d++,v instanceof THREE.PointLight&&p++,v instanceof THREE.SpotLight&&f++,v instanceof THREE.HemisphereLight&&m++)}a=d,o=p,s=f,l=m;for(var y,T=0,x=0,b=e.length;x<b;x++){var R=e[x];R.castShadow&&(R instanceof THREE.SpotLight&&T++,R instanceof THREE.DirectionalLight&&!R.shadowCascade&&T++)}if(y=T,Fe&&n&&n.skeleton&&n.skeleton.useVertexTexture)h=1024;else{var w=je.getParameter(je.MAX_VERTEX_UNIFORM_VECTORS),H=Math.floor((w-20)/4);void 0!==n&&n instanceof THREE.SkinnedMesh&&((H=Math.min(n.skeleton.bones.length,H))<n.skeleton.bones.length&&console.warn("WebGLRenderer: too many bones - "+n.skeleton.bones.length+", this GPU supports just "+H+" (try OpenGL instead of ANGLE)")),h=H}var _={precision:Te,supportsVertexTextures:De,map:!!r.map,envMap:!!r.envMap,envMapMode:r.envMap&&r.envMap.mapping,lightMap:!!r.lightMap,bumpMap:!!r.bumpMap,normalMap:!!r.normalMap,specularMap:!!r.specularMap,alphaMap:!!r.alphaMap,combine:r.combine,vertexColors:r.vertexColors,fog:i,useFog:r.fog,fogExp:i instanceof THREE.FogExp2,sizeAttenuation:r.sizeAttenuation,logarithmicDepthBuffer:xe,skinning:r.skinning,maxBones:h,useVertexTexture:Fe&&n&&n.skeleton&&n.skeleton.useVertexTexture,morphTargets:r.morphTargets,morphNormals:r.morphNormals,maxMorphTargets:be.maxMorphTargets,maxMorphNormals:be.maxMorphNormals,maxDirLights:a,maxPointLights:o,maxSpotLights:s,maxHemiLights:l,maxShadows:y,shadowMapEnabled:be.shadowMapEnabled&&n.receiveShadow&&0<y,shadowMapType:be.shadowMapType,shadowMapDebug:be.shadowMapDebug,shadowMapCascade:be.shadowMapCascade,alphaTest:r.alphaTest,metal:r.metal,wrapAround:r.wrapAround,doubleSided:r.side===THREE.DoubleSide,flipSided:r.side===THREE.BackSide},S=[];if(c?S.push(c):(S.push(r.fragmentShader),S.push(r.vertexShader)),void 0!==r.defines)for(var C in r.defines)S.push(C),S.push(r.defines[C]);for(C in _)S.push(C),S.push(_[C]);for(var M,A=S.join(),P=0,L=Re.length;P<L;P++){var D=Re[P];if(D.code===A){(M=D).usedTimes++;break}}void 0===M&&(M=new THREE.WebGLProgram(be,A,r,_),Re.push(M),be.info.memory.programs=Re.length);var F=(r.program=M).attributes;if(r.morphTargets)for(var k="morphTarget",O=r.numSupportedMorphTargets=0;O<be.maxMorphTargets;O++)0<=F[k+O]&&r.numSupportedMorphTargets++;if(r.morphNormals)for(k="morphNormal",O=r.numSupportedMorphNormals=0;O<be.maxMorphNormals;O++)0<=F[k+O]&&r.numSupportedMorphNormals++;for(var B in r.uniformsList=[],r.__webglShader.uniforms){var N=r.program.uniforms[B];N&&r.uniformsList.push([r.__webglShader.uniforms[B],N])}r.needsUpdate=!1}r.morphTargets&&!n.__webglMorphTargetInfluences&&(n.__webglMorphTargetInfluences=new Float32Array(be.maxMorphTargets));var I=!1,z=!1,U=!1,V=r.program,G=V.uniforms,W=r.__webglShader.uniforms;if(V.id!==we&&(je.useProgram(V.program),we=V.id,U=z=I=!0),r.id!==He&&(-1===He&&(U=!0),He=r.id,z=!0),!I&&t===_e||(je.uniformMatrix4fv(G.projectionMatrix,!1,t.projectionMatrix.elements),xe&&je.uniform1f(G.logDepthBufFC,2/(Math.log(t.far+1)/Math.LN2)),t!==_e&&(_e=t),(r instanceof THREE.ShaderMaterial||r instanceof THREE.MeshPhongMaterial||r.envMap)&&null!==G.cameraPosition&&(Ce.setFromMatrixPosition(t.matrixWorld),je.uniform3f(G.cameraPosition,Ce.x,Ce.y,Ce.z)),(r instanceof THREE.MeshPhongMaterial||r instanceof THREE.MeshLambertMaterial||r instanceof THREE.MeshBasicMaterial||r instanceof THREE.ShaderMaterial||r.skinning)&&null!==G.viewMatrix&&je.uniformMatrix4fv(G.viewMatrix,!1,t.matrixWorldInverse.elements)),r.skinning)if(n.bindMatrix&&null!==G.bindMatrix&&je.uniformMatrix4fv(G.bindMatrix,!1,n.bindMatrix.elements),n.bindMatrixInverse&&null!==G.bindMatrixInverse&&je.uniformMatrix4fv(G.bindMatrixInverse,!1,n.bindMatrixInverse.elements),Fe&&n.skeleton&&n.skeleton.useVertexTexture){if(null!==G.boneTexture){var j=pe();je.uniform1i(G.boneTexture,j),be.setTexture(n.skeleton.boneTexture,j)}null!==G.boneTextureWidth&&je.uniform1i(G.boneTextureWidth,n.skeleton.boneTextureWidth),null!==G.boneTextureHeight&&je.uniform1i(G.boneTextureHeight,n.skeleton.boneTextureHeight)}else n.skeleton&&n.skeleton.boneMatrices&&null!==G.boneGlobalMatrices&&je.uniformMatrix4fv(G.boneGlobalMatrices,!1,n.skeleton.boneMatrices);if(z){if(i&&r.fog&&(W.fogColor.value=i.color,i instanceof THREE.Fog?(W.fogNear.value=i.near,W.fogFar.value=i.far):i instanceof THREE.FogExp2&&(W.fogDensity.value=i.density)),r instanceof THREE.MeshPhongMaterial||r instanceof THREE.MeshLambertMaterial||r.lights){if(Ae){U=!0;var X,$,q,Y,K,Q,Z,J,tt,et=0,it=0,rt=0,nt=Pe,at=nt.directional.colors,ot=nt.directional.positions,st=nt.point.colors,lt=nt.point.positions,ht=nt.point.distances,ct=nt.spot.colors,ut=nt.spot.positions,dt=nt.spot.distances,pt=nt.spot.directions,ft=nt.spot.anglesCos,mt=nt.spot.exponents,gt=nt.hemi.skyColors,Et=nt.hemi.groundColors,vt=nt.hemi.positions,yt=0,Tt=0,xt=0,bt=0,Rt=0,wt=0,Ht=0,_t=0,St=0,Ct=0,Mt=0,At=0;for(X=0,$=e.length;X<$;X++)(q=e[X]).onlyShadow||(Y=q.color,Z=q.intensity,tt=q.distance,q instanceof THREE.AmbientLight?q.visible&&(be.gammaInput?(et+=Y.r*Y.r,it+=Y.g*Y.g,rt+=Y.b*Y.b):(et+=Y.r,it+=Y.g,rt+=Y.b)):q instanceof THREE.DirectionalLight?(Rt+=1,q.visible&&(Me.setFromMatrixPosition(q.matrixWorld),Ce.setFromMatrixPosition(q.target.matrixWorld),Me.sub(Ce),Me.normalize(),ot[St=3*yt]=Me.x,ot[St+1]=Me.y,ot[St+2]=Me.z,be.gammaInput?fe(at,St,Y,Z*Z):me(at,St,Y,Z),yt+=1)):q instanceof THREE.PointLight?(wt+=1,q.visible&&(Ct=3*Tt,be.gammaInput?fe(st,Ct,Y,Z*Z):me(st,Ct,Y,Z),Ce.setFromMatrixPosition(q.matrixWorld),lt[Ct]=Ce.x,lt[Ct+1]=Ce.y,lt[Ct+2]=Ce.z,ht[Tt]=tt,Tt+=1)):q instanceof THREE.SpotLight?(Ht+=1,q.visible&&(Mt=3*xt,be.gammaInput?fe(ct,Mt,Y,Z*Z):me(ct,Mt,Y,Z),Me.setFromMatrixPosition(q.matrixWorld),ut[Mt]=Me.x,ut[Mt+1]=Me.y,ut[Mt+2]=Me.z,dt[xt]=tt,Ce.setFromMatrixPosition(q.target.matrixWorld),Me.sub(Ce),Me.normalize(),pt[Mt]=Me.x,pt[Mt+1]=Me.y,pt[Mt+2]=Me.z,ft[xt]=Math.cos(q.angle),mt[xt]=q.exponent,xt+=1)):q instanceof THREE.HemisphereLight&&(_t+=1,q.visible&&(Me.setFromMatrixPosition(q.matrixWorld),Me.normalize(),vt[At=3*bt]=Me.x,vt[At+1]=Me.y,vt[At+2]=Me.z,K=q.color,Q=q.groundColor,be.gammaInput?(fe(gt,At,K,J=Z*Z),fe(Et,At,Q,J)):(me(gt,At,K,Z),me(Et,At,Q,Z)),bt+=1)));for(X=3*yt,$=Math.max(at.length,3*Rt);X<$;X++)at[X]=0;for(X=3*Tt,$=Math.max(st.length,3*wt);X<$;X++)st[X]=0;for(X=3*xt,$=Math.max(ct.length,3*Ht);X<$;X++)ct[X]=0;for(X=3*bt,$=Math.max(gt.length,3*_t);X<$;X++)gt[X]=0;for(X=3*bt,$=Math.max(Et.length,3*_t);X<$;X++)Et[X]=0;nt.directional.length=yt,nt.point.length=Tt,nt.spot.length=xt,nt.hemi.length=bt,nt.ambient[0]=et,nt.ambient[1]=it,nt.ambient[2]=rt,Ae=!1}if(U){var Pt=Pe;W.ambientLightColor.value=Pt.ambient,W.directionalLightColor.value=Pt.directional.colors,W.directionalLightDirection.value=Pt.directional.positions,W.pointLightColor.value=Pt.point.colors,W.pointLightPosition.value=Pt.point.positions,W.pointLightDistance.value=Pt.point.distances,W.spotLightColor.value=Pt.spot.colors,W.spotLightPosition.value=Pt.spot.positions,W.spotLightDistance.value=Pt.spot.distances,W.spotLightDirection.value=Pt.spot.directions,W.spotLightAngleCos.value=Pt.spot.anglesCos,W.spotLightExponent.value=Pt.spot.exponents,W.hemisphereLightSkyColor.value=Pt.hemi.skyColors,W.hemisphereLightGroundColor.value=Pt.hemi.groundColors,W.hemisphereLightDirection.value=Pt.hemi.positions,de(W,!0)}else de(W,!1)}if(r instanceof THREE.MeshBasicMaterial||r instanceof THREE.MeshLambertMaterial||r instanceof THREE.MeshPhongMaterial){var Lt;if(W.opacity.value=r.opacity,be.gammaInput?W.diffuse.value.copyGammaToLinear(r.color):W.diffuse.value=r.color,W.map.value=r.map,W.lightMap.value=r.lightMap,W.specularMap.value=r.specularMap,W.alphaMap.value=r.alphaMap,r.bumpMap&&(W.bumpMap.value=r.bumpMap,W.bumpScale.value=r.bumpScale),r.normalMap&&(W.normalMap.value=r.normalMap,W.normalScale.value.copy(r.normalScale)),r.map?Lt=r.map:r.specularMap?Lt=r.specularMap:r.normalMap?Lt=r.normalMap:r.bumpMap?Lt=r.bumpMap:r.alphaMap&&(Lt=r.alphaMap),void 0!==Lt){var Dt=Lt.offset,Ft=Lt.repeat;W.offsetRepeat.value.set(Dt.x,Dt.y,Ft.x,Ft.y)}W.envMap.value=r.envMap,W.flipEnvMap.value=r.envMap instanceof THREE.WebGLRenderTargetCube?1:-1,W.reflectivity.value=r.reflectivity,W.refractionRatio.value=r.refractionRatio}if(r instanceof THREE.LineBasicMaterial?(W.diffuse.value=r.color,W.opacity.value=r.opacity):r instanceof THREE.LineDashedMaterial?(W.diffuse.value=r.color,W.opacity.value=r.opacity,W.dashSize.value=r.dashSize,W.totalSize.value=r.dashSize+r.gapSize,W.scale.value=r.scale):r instanceof THREE.PointCloudMaterial?(W.psColor.value=r.color,W.opacity.value=r.opacity,W.size.value=r.size,W.scale.value=ye.height/2,W.map.value=r.map):r instanceof THREE.MeshPhongMaterial?(W.shininess.value=r.shininess,be.gammaInput?(W.ambient.value.copyGammaToLinear(r.ambient),W.emissive.value.copyGammaToLinear(r.emissive),W.specular.value.copyGammaToLinear(r.specular)):(W.ambient.value=r.ambient,W.emissive.value=r.emissive,W.specular.value=r.specular),r.wrapAround&&W.wrapRGB.value.copy(r.wrapRGB)):r instanceof THREE.MeshLambertMaterial?(be.gammaInput?(W.ambient.value.copyGammaToLinear(r.ambient),W.emissive.value.copyGammaToLinear(r.emissive)):(W.ambient.value=r.ambient,W.emissive.value=r.emissive),r.wrapAround&&W.wrapRGB.value.copy(r.wrapRGB)):r instanceof THREE.MeshDepthMaterial?(W.mNear.value=t.near,W.mFar.value=t.far,W.opacity.value=r.opacity):r instanceof THREE.MeshNormalMaterial&&(W.opacity.value=r.opacity),n.receiveShadow&&!r._shadowPass&&W.shadowMatrix)for(var kt=0,Ot=0,Bt=e.length;Ot<Bt;Ot++){var Nt=e[Ot];Nt.castShadow&&(Nt instanceof THREE.SpotLight||Nt instanceof THREE.DirectionalLight&&!Nt.shadowCascade)&&(W.shadowMap.value[kt]=Nt.shadowMap,W.shadowMapSize.value[kt]=Nt.shadowMapSize,W.shadowMatrix.value[kt]=Nt.shadowMatrix,W.shadowDarkness.value[kt]=Nt.shadowDarkness,W.shadowBias.value[kt]=Nt.shadowBias,kt++)}for(var It,zt,Ut,Vt=r.uniformsList,Gt=0,Wt=Vt.length;Gt<Wt;Gt++){var jt=Vt[Gt][0];if(!1!==jt.needsUpdate){var Xt=jt.type,$t=jt.value,qt=Vt[Gt][1];switch(Xt){case"1i":je.uniform1i(qt,$t);break;case"1f":je.uniform1f(qt,$t);break;case"2f":je.uniform2f(qt,$t[0],$t[1]);break;case"3f":je.uniform3f(qt,$t[0],$t[1],$t[2]);break;case"4f":je.uniform4f(qt,$t[0],$t[1],$t[2],$t[3]);break;case"1iv":je.uniform1iv(qt,$t);break;case"3iv":je.uniform3iv(qt,$t);break;case"1fv":je.uniform1fv(qt,$t);break;case"2fv":je.uniform2fv(qt,$t);break;case"3fv":je.uniform3fv(qt,$t);break;case"4fv":je.uniform4fv(qt,$t);break;case"Matrix3fv":je.uniformMatrix3fv(qt,!1,$t);break;case"Matrix4fv":je.uniformMatrix4fv(qt,!1,$t);break;case"i":je.uniform1i(qt,$t);break;case"f":je.uniform1f(qt,$t);break;case"v2":je.uniform2f(qt,$t.x,$t.y);break;case"v3":je.uniform3f(qt,$t.x,$t.y,$t.z);break;case"v4":je.uniform4f(qt,$t.x,$t.y,$t.z,$t.w);break;case"c":je.uniform3f(qt,$t.r,$t.g,$t.b);break;case"iv1":je.uniform1iv(qt,$t);break;case"iv":je.uniform3iv(qt,$t);break;case"fv1":je.uniform1fv(qt,$t);break;case"fv":je.uniform3fv(qt,$t);break;case"v2v":void 0===jt._array&&(jt._array=new Float32Array(2*$t.length));for(var Yt=0,Kt=$t.length;Yt<Kt;Yt++)Ut=2*Yt,jt._array[Ut]=$t[Yt].x,jt._array[Ut+1]=$t[Yt].y;je.uniform2fv(qt,jt._array);break;case"v3v":for(void 0===jt._array&&(jt._array=new Float32Array(3*$t.length)),Yt=0,Kt=$t.length;Yt<Kt;Yt++)Ut=3*Yt,jt._array[Ut]=$t[Yt].x,jt._array[Ut+1]=$t[Yt].y,jt._array[Ut+2]=$t[Yt].z;je.uniform3fv(qt,jt._array);break;case"v4v":for(void 0===jt._array&&(jt._array=new Float32Array(4*$t.length)),Yt=0,Kt=$t.length;Yt<Kt;Yt++)Ut=4*Yt,jt._array[Ut]=$t[Yt].x,jt._array[Ut+1]=$t[Yt].y,jt._array[Ut+2]=$t[Yt].z,jt._array[Ut+3]=$t[Yt].w;je.uniform4fv(qt,jt._array);break;case"m3":je.uniformMatrix3fv(qt,!1,$t.elements);break;case"m3v":for(void 0===jt._array&&(jt._array=new Float32Array(9*$t.length)),Yt=0,Kt=$t.length;Yt<Kt;Yt++)$t[Yt].flattenToArrayOffset(jt._array,9*Yt);je.uniformMatrix3fv(qt,!1,jt._array);break;case"m4":je.uniformMatrix4fv(qt,!1,$t.elements);break;case"m4v":for(void 0===jt._array&&(jt._array=new Float32Array(16*$t.length)),Yt=0,Kt=$t.length;Yt<Kt;Yt++)$t[Yt].flattenToArrayOffset(jt._array,16*Yt);je.uniformMatrix4fv(qt,!1,jt._array);break;case"t":if(It=$t,zt=pe(),je.uniform1i(qt,zt),!It)continue;if(It instanceof THREE.CubeTexture||It.image instanceof Array&&6===It.image.length){var Qt=It,Zt=zt;if(6===Qt.image.length)if(Qt.needsUpdate){Qt.image.__webglTextureCube||(Qt.addEventListener("dispose",Oe),Qt.image.__webglTextureCube=je.createTexture(),be.info.memory.textures++),je.activeTexture(je.TEXTURE0+Zt),je.bindTexture(je.TEXTURE_CUBE_MAP,Qt.image.__webglTextureCube),je.pixelStorei(je.UNPACK_FLIP_Y_WEBGL,Qt.flipY);for(var Jt=Qt instanceof THREE.CompressedTexture,te=Qt.image[0]instanceof THREE.DataTexture,ee=[],ie=0;ie<6;ie++)ee[ie]=!be.autoScaleCubemaps||Jt||te?te?Qt.image[ie].image:Qt.image[ie]:Ee(Qt.image[ie],Le);var re=ee[0],ne=THREE.Math.isPowerOfTwo(re.width)&&THREE.Math.isPowerOfTwo(re.height),ae=ve(Qt.format),oe=ve(Qt.type);for(ge(je.TEXTURE_CUBE_MAP,Qt,ne),ie=0;ie<6;ie++)if(Jt)for(var se,le=ee[ie].mipmaps,he=0,ce=le.length;he<ce;he++)se=le[he],Qt.format!==THREE.RGBAFormat&&Qt.format!==THREE.RGBFormat?-1<ke().indexOf(ae)?je.compressedTexImage2D(je.TEXTURE_CUBE_MAP_POSITIVE_X+ie,he,ae,se.width,se.height,0,se.data):console.warn("Attempt to load unsupported compressed texture format"):je.texImage2D(je.TEXTURE_CUBE_MAP_POSITIVE_X+ie,he,ae,se.width,se.height,0,ae,oe,se.data);else te?je.texImage2D(je.TEXTURE_CUBE_MAP_POSITIVE_X+ie,0,ae,ee[ie].width,ee[ie].height,0,ae,oe,ee[ie].data):je.texImage2D(je.TEXTURE_CUBE_MAP_POSITIVE_X+ie,0,ae,ae,oe,ee[ie]);Qt.generateMipmaps&&ne&&je.generateMipmap(je.TEXTURE_CUBE_MAP),Qt.needsUpdate=!1,Qt.onUpdate&&Qt.onUpdate()}else je.activeTexture(je.TEXTURE0+Zt),je.bindTexture(je.TEXTURE_CUBE_MAP,Qt.image.__webglTextureCube)}else if(It instanceof THREE.WebGLRenderTargetCube){var ue=It;je.activeTexture(je.TEXTURE0+zt),je.bindTexture(je.TEXTURE_CUBE_MAP,ue.__webglTexture)}else be.setTexture(It,zt);break;case"tv":for(void 0===jt._array&&(jt._array=[]),Yt=0,Kt=jt.value.length;Yt<Kt;Yt++)jt._array[Yt]=pe();for(je.uniform1iv(qt,jt._array),Yt=0,Kt=jt.value.length;Yt<Kt;Yt++)It=jt.value[Yt],zt=jt._array[Yt],It&&be.setTexture(It,zt);break;default:console.warn("THREE.WebGLRenderer: Unknown uniform type: "+Xt)}}}}return je.uniformMatrix4fv(G.modelViewMatrix,!1,n._modelViewMatrix.elements),G.normalMatrix&&je.uniformMatrix3fv(G.normalMatrix,!1,n._normalMatrix.elements),null!==G.modelMatrix&&je.uniformMatrix4fv(G.modelMatrix,!1,n.matrixWorld.elements),V}function de(t,e){t.ambientLightColor.needsUpdate=e,t.directionalLightColor.needsUpdate=e,t.directionalLightDirection.needsUpdate=e,t.pointLightColor.needsUpdate=e,t.pointLightPosition.needsUpdate=e,t.pointLightDistance.needsUpdate=e,t.spotLightColor.needsUpdate=e,t.spotLightPosition.needsUpdate=e,t.spotLightDistance.needsUpdate=e,t.spotLightDirection.needsUpdate=e,t.spotLightAngleCos.needsUpdate=e,t.spotLightExponent.needsUpdate=e,t.hemisphereLightSkyColor.needsUpdate=e,t.hemisphereLightGroundColor.needsUpdate=e,t.hemisphereLightDirection.needsUpdate=e}function pe(){var t=Se;return ct<=t&&console.warn("WebGLRenderer: trying to use "+t+" texture units while this GPU supports only "+ct),Se+=1,t}function R(t,e){t._modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,t.matrixWorld),t._normalMatrix.getNormalMatrix(t._modelViewMatrix)}function fe(t,e,i,r){t[e]=i.r*i.r*r,t[e+1]=i.g*i.g*r,t[e+2]=i.b*i.b*r}function me(t,e,i,r){t[e]=i.r*r,t[e+1]=i.g*r,t[e+2]=i.b*r}function w(t){(t*=n)!==Y&&(je.lineWidth(t),Y=t)}function H(t,e,i){X!==t&&(t?je.enable(je.POLYGON_OFFSET_FILL):je.disable(je.POLYGON_OFFSET_FILL),X=t),!t||$===e&&q===i||(je.polygonOffset(e,i),$=e,q=i)}function ge(t,e,i){i?(je.texParameteri(t,je.TEXTURE_WRAP_S,ve(e.wrapS)),je.texParameteri(t,je.TEXTURE_WRAP_T,ve(e.wrapT)),je.texParameteri(t,je.TEXTURE_MAG_FILTER,ve(e.magFilter)),je.texParameteri(t,je.TEXTURE_MIN_FILTER,ve(e.minFilter))):(je.texParameteri(t,je.TEXTURE_WRAP_S,je.CLAMP_TO_EDGE),je.texParameteri(t,je.TEXTURE_WRAP_T,je.CLAMP_TO_EDGE),e.wrapS===THREE.ClampToEdgeWrapping&&e.wrapT===THREE.ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT is set to THREE.ClampToEdgeWrapping. ( "+e.sourceFile+" )"),je.texParameteri(t,je.TEXTURE_MAG_FILTER,r(e.magFilter)),je.texParameteri(t,je.TEXTURE_MIN_FILTER,r(e.minFilter)),e.minFilter!==THREE.NearestFilter&&e.minFilter!==THREE.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter is set to THREE.LinearFilter or THREE.NearestFilter. ( "+e.sourceFile+" )")),(i=st.get("EXT_texture_filter_anisotropic"))&&e.type!==THREE.FloatType&&(1<e.anisotropy||e.__oldAnisotropy)&&(je.texParameterf(t,i.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(e.anisotropy,be.getMaxAnisotropy())),e.__oldAnisotropy=e.anisotropy)}function Ee(t,e){if(t.width>e||t.height>e){var i=e/Math.max(t.width,t.height),r=document.createElement("canvas");return r.width=Math.floor(t.width*i),r.height=Math.floor(t.height*i),r.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,r.width,r.height),console.log("THREE.WebGLRenderer:",t,"is too big ("+t.width+"x"+t.height+"). Resized to "+r.width+"x"+r.height+"."),r}return t}function l(t,e){je.bindRenderbuffer(je.RENDERBUFFER,t),e.depthBuffer&&!e.stencilBuffer?(je.renderbufferStorage(je.RENDERBUFFER,je.DEPTH_COMPONENT16,e.width,e.height),je.framebufferRenderbuffer(je.FRAMEBUFFER,je.DEPTH_ATTACHMENT,je.RENDERBUFFER,t)):e.depthBuffer&&e.stencilBuffer?(je.renderbufferStorage(je.RENDERBUFFER,je.DEPTH_STENCIL,e.width,e.height),je.framebufferRenderbuffer(je.FRAMEBUFFER,je.DEPTH_STENCIL_ATTACHMENT,je.RENDERBUFFER,t)):je.renderbufferStorage(je.RENDERBUFFER,je.RGBA4,e.width,e.height)}function r(t){return t===THREE.NearestFilter||t===THREE.NearestMipMapNearestFilter||t===THREE.NearestMipMapLinearFilter?je.NEAREST:je.LINEAR}function ve(t){var e;if(t===THREE.RepeatWrapping)return je.REPEAT;if(t===THREE.ClampToEdgeWrapping)return je.CLAMP_TO_EDGE;if(t===THREE.MirroredRepeatWrapping)return je.MIRRORED_REPEAT;if(t===THREE.NearestFilter)return je.NEAREST;if(t===THREE.NearestMipMapNearestFilter)return je.NEAREST_MIPMAP_NEAREST;if(t===THREE.NearestMipMapLinearFilter)return je.NEAREST_MIPMAP_LINEAR;if(t===THREE.LinearFilter)return je.LINEAR;if(t===THREE.LinearMipMapNearestFilter)return je.LINEAR_MIPMAP_NEAREST;if(t===THREE.LinearMipMapLinearFilter)return je.LINEAR_MIPMAP_LINEAR;if(t===THREE.UnsignedByteType)return je.UNSIGNED_BYTE;if(t===THREE.UnsignedShort4444Type)return je.UNSIGNED_SHORT_4_4_4_4;if(t===THREE.UnsignedShort5551Type)return je.UNSIGNED_SHORT_5_5_5_1;if(t===THREE.UnsignedShort565Type)return je.UNSIGNED_SHORT_5_6_5;if(t===THREE.ByteType)return je.BYTE;if(t===THREE.ShortType)return je.SHORT;if(t===THREE.UnsignedShortType)return je.UNSIGNED_SHORT;if(t===THREE.IntType)return je.INT;if(t===THREE.UnsignedIntType)return je.UNSIGNED_INT;if(t===THREE.FloatType)return je.FLOAT;if(t===THREE.AlphaFormat)return je.ALPHA;if(t===THREE.RGBFormat)return je.RGB;if(t===THREE.RGBAFormat)return je.RGBA;if(t===THREE.LuminanceFormat)return je.LUMINANCE;if(t===THREE.LuminanceAlphaFormat)return je.LUMINANCE_ALPHA;if(t===THREE.AddEquation)return je.FUNC_ADD;if(t===THREE.SubtractEquation)return je.FUNC_SUBTRACT;if(t===THREE.ReverseSubtractEquation)return je.FUNC_REVERSE_SUBTRACT;if(t===THREE.ZeroFactor)return je.ZERO;if(t===THREE.OneFactor)return je.ONE;if(t===THREE.SrcColorFactor)return je.SRC_COLOR;if(t===THREE.OneMinusSrcColorFactor)return je.ONE_MINUS_SRC_COLOR;if(t===THREE.SrcAlphaFactor)return je.SRC_ALPHA;if(t===THREE.OneMinusSrcAlphaFactor)return je.ONE_MINUS_SRC_ALPHA;if(t===THREE.DstAlphaFactor)return je.DST_ALPHA;if(t===THREE.OneMinusDstAlphaFactor)return je.ONE_MINUS_DST_ALPHA;if(t===THREE.DstColorFactor)return je.DST_COLOR;if(t===THREE.OneMinusDstColorFactor)return je.ONE_MINUS_DST_COLOR;if(t===THREE.SrcAlphaSaturateFactor)return je.SRC_ALPHA_SATURATE;if(null!==(e=st.get("WEBGL_compressed_texture_s3tc"))){if(t===THREE.RGB_S3TC_DXT1_Format)return e.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===THREE.RGBA_S3TC_DXT1_Format)return e.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===THREE.RGBA_S3TC_DXT3_Format)return e.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===THREE.RGBA_S3TC_DXT5_Format)return e.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(null!==(e=st.get("WEBGL_compressed_texture_pvrtc"))){if(t===THREE.RGB_PVRTC_4BPPV1_Format)return e.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===THREE.RGB_PVRTC_2BPPV1_Format)return e.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===THREE.RGBA_PVRTC_4BPPV1_Format)return e.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===THREE.RGBA_PVRTC_2BPPV1_Format)return e.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(null!==(e=st.get("EXT_blend_minmax"))){if(t===THREE.MinEquation)return e.MIN_EXT;if(t===THREE.MaxEquation)return e.MAX_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);var ye=void 0!==(t=t||{}).canvas?t.canvas:document.createElement("canvas"),e=void 0!==t.context?t.context:null,n=1,Te=void 0!==t.precision?t.precision:"highp",i=void 0!==t.alpha&&t.alpha,a=void 0===t.depth||t.depth,o=void 0===t.stencil||t.stencil,s=void 0!==t.antialias&&t.antialias,h=void 0===t.premultipliedAlpha||t.premultipliedAlpha,_=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,xe=void 0!==t.logarithmicDepthBuffer&&t.logarithmicDepthBuffer,S=new THREE.Color(0),C=0,M=[],A={},P=[],L=[],D=[],F=[],k=[];this.domElement=ye,this.context=null,this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0,this.shadowMapEnabled=this.gammaOutput=this.gammaInput=!1,this.shadowMapType=THREE.PCFShadowMap,this.shadowMapCullFace=THREE.CullFaceFront,this.shadowMapCascade=this.shadowMapDebug=!1,this.maxMorphTargets=8,this.maxMorphNormals=4,this.autoScaleCubemaps=!0,this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var be=this,Re=[],we=null,O=null,He=-1,B="",_e=null,Se=0,N=-1,I=-1,z=-1,U=-1,V=-1,G=-1,W=-1,j=-1,X=null,$=null,q=null,Y=null,K=0,Q=0,Z=ye.width,J=ye.height,tt=0,et=0,it=new Uint8Array(16),rt=new Uint8Array(16),nt=new THREE.Frustum,at=new THREE.Matrix4;new THREE.Matrix4;var je,Ce=new THREE.Vector3,Me=new THREE.Vector3,Ae=!0,Pe={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]},spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}};try{var ot={alpha:i,depth:a,stencil:o,antialias:s,premultipliedAlpha:h,preserveDrawingBuffer:_};if(null===(je=e||ye.getContext("webgl",ot)||ye.getContext("experimental-webgl",ot))){if(null!==ye.getContext("webgl"))throw"Error creating WebGL context with your selected attributes.";throw"Error creating WebGL context."}ye.addEventListener("webglcontextlost",function(t){t.preventDefault(),ht(),lt(),A={}},!1)}catch(t){console.error(t)}void 0===je.getShaderPrecisionFormat&&(je.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}});var st=new THREE.WebGLExtensions(je);st.get("OES_texture_float"),st.get("OES_texture_float_linear"),st.get("OES_standard_derivatives"),xe&&st.get("EXT_frag_depth");var lt=function(){je.clearColor(0,0,0,1),je.clearDepth(1),je.clearStencil(0),je.enable(je.DEPTH_TEST),je.depthFunc(je.LEQUAL),je.frontFace(je.CCW),je.cullFace(je.BACK),je.enable(je.CULL_FACE),je.enable(je.BLEND),je.blendEquation(je.FUNC_ADD),je.blendFunc(je.SRC_ALPHA,je.ONE_MINUS_SRC_ALPHA),je.viewport(K,Q,Z,J),je.clearColor(S.r,S.g,S.b,C)},ht=function(){_e=we=null,I=N=j=W=z=-1,He=-1,Ae=!(B="");for(var t=0;t<rt.length;t++)rt[t]=0};lt();var ct=(this.context=je).getParameter(je.MAX_TEXTURE_IMAGE_UNITS),ut=je.getParameter(je.MAX_VERTEX_TEXTURE_IMAGE_UNITS),dt=je.getParameter(je.MAX_TEXTURE_SIZE),Le=je.getParameter(je.MAX_CUBE_MAP_TEXTURE_SIZE),De=0<ut,Fe=De&&st.get("OES_texture_float"),pt=je.getShaderPrecisionFormat(je.VERTEX_SHADER,je.HIGH_FLOAT),ft=je.getShaderPrecisionFormat(je.VERTEX_SHADER,je.MEDIUM_FLOAT);je.getShaderPrecisionFormat(je.VERTEX_SHADER,je.LOW_FLOAT);var mt=je.getShaderPrecisionFormat(je.FRAGMENT_SHADER,je.HIGH_FLOAT),gt=je.getShaderPrecisionFormat(je.FRAGMENT_SHADER,je.MEDIUM_FLOAT);je.getShaderPrecisionFormat(je.FRAGMENT_SHADER,je.LOW_FLOAT);var Et,ke=function(){if(void 0!==Et)return Et;if(Et=[],st.get("WEBGL_compressed_texture_pvrtc")||st.get("WEBGL_compressed_texture_s3tc"))for(var t=je.getParameter(je.COMPRESSED_TEXTURE_FORMATS),e=0;e<t.length;e++)Et.push(t[e]);return Et},vt=0<pt.precision&&0<mt.precision,yt=0<ft.precision&&0<gt.precision;"highp"!==Te||vt||(yt?(Te="mediump",console.warn("THREE.WebGLRenderer: highp not supported, using mediump.")):(Te="lowp",console.warn("THREE.WebGLRenderer: highp and mediump not supported, using lowp."))),"mediump"!==Te||yt||(Te="lowp",console.warn("THREE.WebGLRenderer: mediump not supported, using lowp."));var Tt,xt=new THREE.ShadowMapPlugin(this,M,A,P),bt=new THREE.SpritePlugin(this,F),Rt=new THREE.LensFlarePlugin(this,k);this.getContext=function(){return je},this.forceContextLoss=function(){st.get("WEBGL_lose_context").loseContext()},this.supportsVertexTextures=function(){return De},this.supportsFloatTextures=function(){return st.get("OES_texture_float")},this.supportsStandardDerivatives=function(){return st.get("OES_standard_derivatives")},this.supportsCompressedTextureS3TC=function(){return st.get("WEBGL_compressed_texture_s3tc")},this.supportsCompressedTexturePVRTC=function(){return st.get("WEBGL_compressed_texture_pvrtc")},this.supportsBlendMinMax=function(){return st.get("EXT_blend_minmax")},this.getMaxAnisotropy=function(){if(void 0!==Tt)return Tt;var t=st.get("EXT_texture_filter_anisotropic");return Tt=null!==t?je.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},this.getPrecision=function(){return Te},this.getPixelRatio=function(){return n},this.setPixelRatio=function(t){n=t},this.setSize=function(t,e,i){ye.width=t*n,ye.height=e*n,!1!==i&&(ye.style.width=t+"px",ye.style.height=e+"px"),this.setViewport(0,0,t,e)},this.setViewport=function(t,e,i,r){K=t*n,Q=e*n,Z=i*n,J=r*n,je.viewport(K,Q,Z,J)},this.setScissor=function(t,e,i,r){je.scissor(t*n,e*n,i*n,r*n)},this.enableScissorTest=function(t){t?je.enable(je.SCISSOR_TEST):je.disable(je.SCISSOR_TEST)},this.getClearColor=function(){return S},this.setClearColor=function(t,e){S.set(t),C=void 0!==e?e:1,je.clearColor(S.r,S.g,S.b,C)},this.getClearAlpha=function(){return C},this.setClearAlpha=function(t){C=t,je.clearColor(S.r,S.g,S.b,C)},this.clear=function(t,e,i){var r=0;void 0!==t&&!t||(r|=je.COLOR_BUFFER_BIT),void 0!==e&&!e||(r|=je.DEPTH_BUFFER_BIT),void 0!==i&&!i||(r|=je.STENCIL_BUFFER_BIT),je.clear(r)},this.clearColor=function(){je.clear(je.COLOR_BUFFER_BIT)},this.clearDepth=function(){je.clear(je.DEPTH_BUFFER_BIT)},this.clearStencil=function(){je.clear(je.STENCIL_BUFFER_BIT)},this.clearTarget=function(t,e,i,r){this.setRenderTarget(t),this.clear(e,i,r)},this.resetGLState=ht;var wt=function(t){t.target.traverse(function(t){if(t.removeEventListener("remove",wt),t instanceof THREE.Mesh||t instanceof THREE.PointCloud||t instanceof THREE.Line)delete A[t.id];else if(t instanceof THREE.ImmediateRenderObject||t.immediateRenderCallback)for(var e=P,i=e.length-1;0<=i;i--)e[i].object===t&&e.splice(i,1);delete t.__webglInit,delete t._modelViewMatrix,delete t._normalMatrix,delete t.__webglActive})},Ht=function(t){if((t=t.target).removeEventListener("dispose",Ht),delete t.__webglInit,t instanceof THREE.BufferGeometry){for(var e in t.attributes){void 0!==(i=t.attributes[e]).buffer&&(je.deleteBuffer(i.buffer),delete i.buffer)}be.info.memory.geometries--}else if(void 0!==(e=Xe[t.id])){for(var i=0,r=e.length;i<r;i++){var n=e[i];if(void 0!==n.numMorphTargets){for(var a=0,o=n.numMorphTargets;a<o;a++)je.deleteBuffer(n.__webglMorphTargetsBuffers[a]);delete n.__webglMorphTargetsBuffers}if(void 0!==n.numMorphNormals){for(a=0,o=n.numMorphNormals;a<o;a++)je.deleteBuffer(n.__webglMorphNormalsBuffers[a]);delete n.__webglMorphNormalsBuffers}St(n)}delete Xe[t.id]}else St(t);B=""},Oe=function(t){(t=t.target).removeEventListener("dispose",Oe),t.image&&t.image.__webglTextureCube?(je.deleteTexture(t.image.__webglTextureCube),delete t.image.__webglTextureCube):void 0!==t.__webglInit&&(je.deleteTexture(t.__webglTexture),delete t.__webglTexture,delete t.__webglInit),be.info.memory.textures--},_t=function(t){if((t=t.target).removeEventListener("dispose",_t),t&&void 0!==t.__webglTexture){if(je.deleteTexture(t.__webglTexture),delete t.__webglTexture,t instanceof THREE.WebGLRenderTargetCube)for(var e=0;e<6;e++)je.deleteFramebuffer(t.__webglFramebuffer[e]),je.deleteRenderbuffer(t.__webglRenderbuffer[e]);else je.deleteFramebuffer(t.__webglFramebuffer),je.deleteRenderbuffer(t.__webglRenderbuffer);delete t.__webglFramebuffer,delete t.__webglRenderbuffer}be.info.memory.textures--},Be=function(t){(t=t.target).removeEventListener("dispose",Be),Ne(t)},St=function(t){for(var e="__webglVertexBuffer __webglNormalBuffer __webglTangentBuffer __webglColorBuffer __webglUVBuffer __webglUV2Buffer __webglSkinIndicesBuffer __webglSkinWeightsBuffer __webglFaceBuffer __webglLineBuffer __webglLineDistanceBuffer".split(" "),i=0,r=e.length;i<r;i++){var n=e[i];void 0!==t[n]&&(je.deleteBuffer(t[n]),delete t[n])}if(void 0!==t.__webglCustomAttributesList){for(n in t.__webglCustomAttributesList)je.deleteBuffer(t.__webglCustomAttributesList[n].buffer);delete t.__webglCustomAttributesList}be.info.memory.geometries--},Ne=function(t){var e=t.program.program;if(void 0!==e){t.program=void 0;var i,r,n=!1;for(t=0,i=Re.length;t<i;t++)if((r=Re[t]).program===e){r.usedTimes--,0===r.usedTimes&&(n=!0);break}if(!0===n){for(n=[],t=0,i=Re.length;t<i;t++)(r=Re[t]).program!==e&&n.push(r);Re=n,je.deleteProgram(e),be.info.memory.programs--}}};this.renderBufferImmediate=function(t,e,i){if(p(),t.hasPositions&&!t.__webglVertexBuffer&&(t.__webglVertexBuffer=je.createBuffer()),t.hasNormals&&!t.__webglNormalBuffer&&(t.__webglNormalBuffer=je.createBuffer()),t.hasUvs&&!t.__webglUvBuffer&&(t.__webglUvBuffer=je.createBuffer()),t.hasColors&&!t.__webglColorBuffer&&(t.__webglColorBuffer=je.createBuffer()),t.hasPositions&&(je.bindBuffer(je.ARRAY_BUFFER,t.__webglVertexBuffer),je.bufferData(je.ARRAY_BUFFER,t.positionArray,je.DYNAMIC_DRAW),f(e.attributes.position),je.vertexAttribPointer(e.attributes.position,3,je.FLOAT,!1,0,0)),t.hasNormals){if(je.bindBuffer(je.ARRAY_BUFFER,t.__webglNormalBuffer),i.shading===THREE.FlatShading){var r,n,a,o,s,l,h,c,u=3*t.count;for(c=0;c<u;c+=9)r=(h=t.normalArray)[c],n=h[c+1],a=h[c+2],o=h[c+3],s=h[c+4],l=h[c+5],r=(r+o+h[c+6])/3,n=(n+s+h[c+7])/3,a=(a+l+h[c+8])/3,h[c]=r,h[c+1]=n,h[c+2]=a,h[c+3]=r,h[c+4]=n,h[c+5]=a,h[c+6]=r,h[c+7]=n,h[c+8]=a}je.bufferData(je.ARRAY_BUFFER,t.normalArray,je.DYNAMIC_DRAW),f(e.attributes.normal),je.vertexAttribPointer(e.attributes.normal,3,je.FLOAT,!1,0,0)}t.hasUvs&&i.map&&(je.bindBuffer(je.ARRAY_BUFFER,t.__webglUvBuffer),je.bufferData(je.ARRAY_BUFFER,t.uvArray,je.DYNAMIC_DRAW),f(e.attributes.uv),je.vertexAttribPointer(e.attributes.uv,2,je.FLOAT,!1,0,0)),t.hasColors&&i.vertexColors!==THREE.NoColors&&(je.bindBuffer(je.ARRAY_BUFFER,t.__webglColorBuffer),je.bufferData(je.ARRAY_BUFFER,t.colorArray,je.DYNAMIC_DRAW),f(e.attributes.color),je.vertexAttribPointer(e.attributes.color,3,je.FLOAT,!1,0,0)),m(),je.drawArrays(je.TRIANGLES,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,i,r,n,a){if(!1!==r.visible)if(x(a),t=b(t,e,i,r,a),e=!1,(i="direct_"+n.id+"_"+t.id+"_"+(r.wireframe?1:0))!==B&&(B=i,e=!0),e&&p(),a instanceof THREE.Mesh){a=!0===r.wireframe?je.LINES:je.TRIANGLES;var o,s,l=n.attributes.index;if(l)if(s=l.array instanceof Uint32Array&&st.get("OES_element_index_uint")?(o=je.UNSIGNED_INT,4):(o=je.UNSIGNED_SHORT,2),0===(i=n.offsets).length)e&&(d(r,t,n,0),je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,l.buffer)),je.drawElements(a,l.array.length,o,0),be.info.render.calls++,be.info.render.vertices+=l.array.length,be.info.render.faces+=l.array.length/3;else{e=!0;for(var h=0,c=i.length;h<c;h++){var u=i[h].index;e&&(d(r,t,n,u),je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,l.buffer)),je.drawElements(a,i[h].count,o,i[h].start*s),be.info.render.calls++,be.info.render.vertices+=i[h].count,be.info.render.faces+=i[h].count/3}}else e&&d(r,t,n,0),r=n.attributes.position,je.drawArrays(a,0,r.array.length/3),be.info.render.calls++,be.info.render.vertices+=r.array.length/3,be.info.render.faces+=r.array.length/9}else if(a instanceof THREE.PointCloud)if(a=je.POINTS,l=n.attributes.index)if(s=l.array instanceof Uint32Array&&st.get("OES_element_index_uint")?(o=je.UNSIGNED_INT,4):(o=je.UNSIGNED_SHORT,2),0===(i=n.offsets).length)e&&(d(r,t,n,0),je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,l.buffer)),je.drawElements(a,l.array.length,o,0),be.info.render.calls++,be.info.render.points+=l.array.length;else for(1<i.length&&(e=!0),h=0,c=i.length;h<c;h++)u=i[h].index,e&&(d(r,t,n,u),je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,l.buffer)),je.drawElements(a,i[h].count,o,i[h].start*s),be.info.render.calls++,be.info.render.points+=i[h].count;else if(e&&d(r,t,n,0),r=n.attributes.position,0===(i=n.offsets).length)je.drawArrays(a,0,r.array.length/3),be.info.render.calls++,be.info.render.points+=r.array.length/3;else for(h=0,c=i.length;h<c;h++)je.drawArrays(a,i[h].index,i[h].count),be.info.render.calls++,be.info.render.points+=i[h].count;else if(a instanceof THREE.Line)if(a=a.mode===THREE.LineStrip?je.LINE_STRIP:je.LINES,w(r.linewidth),l=n.attributes.index)if(s=l.array instanceof Uint32Array?(o=je.UNSIGNED_INT,4):(o=je.UNSIGNED_SHORT,2),0===(i=n.offsets).length)e&&(d(r,t,n,0),je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,l.buffer)),je.drawElements(a,l.array.length,o,0),be.info.render.calls++,be.info.render.vertices+=l.array.length;else for(1<i.length&&(e=!0),h=0,c=i.length;h<c;h++)u=i[h].index,e&&(d(r,t,n,u),je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,l.buffer)),je.drawElements(a,i[h].count,o,i[h].start*s),be.info.render.calls++,be.info.render.vertices+=i[h].count;else if(e&&d(r,t,n,0),r=n.attributes.position,0===(i=n.offsets).length)je.drawArrays(a,0,r.array.length/3),be.info.render.calls++,be.info.render.vertices+=r.array.length/3;else for(h=0,c=i.length;h<c;h++)je.drawArrays(a,i[h].index,i[h].count),be.info.render.calls++,be.info.render.vertices+=i[h].count},this.renderBuffer=function(t,e,i,r,n,a){if(!1!==r.visible){if(x(a),e=(i=b(t,e,i,r,a)).attributes,t=!1,(i=n.id+"_"+i.id+"_"+(r.wireframe?1:0))!==B&&(B=i,t=!0),t&&p(),!r.morphTargets&&0<=e.position)t&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglVertexBuffer),f(e.position),je.vertexAttribPointer(e.position,3,je.FLOAT,!1,0,0));else if(a.morphTargetBase){if(i=r.program.attributes,-1!==a.morphTargetBase&&0<=i.position?(je.bindBuffer(je.ARRAY_BUFFER,n.__webglMorphTargetsBuffers[a.morphTargetBase]),f(i.position),je.vertexAttribPointer(i.position,3,je.FLOAT,!1,0,0)):0<=i.position&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglVertexBuffer),f(i.position),je.vertexAttribPointer(i.position,3,je.FLOAT,!1,0,0)),a.morphTargetForcedOrder.length)for(var o,s=0,l=a.morphTargetForcedOrder,h=a.morphTargetInfluences;s<r.numSupportedMorphTargets&&s<l.length;)0<=(o=i["morphTarget"+s])&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglMorphTargetsBuffers[l[s]]),f(o),je.vertexAttribPointer(o,3,je.FLOAT,!1,0,0)),0<=(o=i["morphNormal"+s])&&r.morphNormals&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglMorphNormalsBuffers[l[s]]),f(o),je.vertexAttribPointer(o,3,je.FLOAT,!1,0,0)),a.__webglMorphTargetInfluences[s]=h[l[s]],s++;else{for(l=[],s=0,o=(h=a.morphTargetInfluences).length;s<o;s++)l.push([h[s],s]);l.length>r.numSupportedMorphTargets?(l.sort(E),l.length=r.numSupportedMorphTargets):l.length>r.numSupportedMorphNormals?l.sort(E):0===l.length&&l.push([0,0]);s=0;for(var c=r.numSupportedMorphTargets;s<c;s++)if(l[s]){var u=l[s][1];0<=(o=i["morphTarget"+s])&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglMorphTargetsBuffers[u]),f(o),je.vertexAttribPointer(o,3,je.FLOAT,!1,0,0)),0<=(o=i["morphNormal"+s])&&r.morphNormals&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglMorphNormalsBuffers[u]),f(o),je.vertexAttribPointer(o,3,je.FLOAT,!1,0,0)),a.__webglMorphTargetInfluences[s]=h[u]}else a.__webglMorphTargetInfluences[s]=0}null!==r.program.uniforms.morphTargetInfluences&&je.uniform1fv(r.program.uniforms.morphTargetInfluences,a.__webglMorphTargetInfluences)}if(t){if(n.__webglCustomAttributesList)for(i=0,h=n.__webglCustomAttributesList.length;i<h;i++)0<=e[(l=n.__webglCustomAttributesList[i]).buffer.belongsToAttribute]&&(je.bindBuffer(je.ARRAY_BUFFER,l.buffer),f(e[l.buffer.belongsToAttribute]),je.vertexAttribPointer(e[l.buffer.belongsToAttribute],l.size,je.FLOAT,!1,0,0));0<=e.color&&(0<a.geometry.colors.length||0<a.geometry.faces.length?(je.bindBuffer(je.ARRAY_BUFFER,n.__webglColorBuffer),f(e.color),je.vertexAttribPointer(e.color,3,je.FLOAT,!1,0,0)):void 0!==r.defaultAttributeValues&&je.vertexAttrib3fv(e.color,r.defaultAttributeValues.color)),0<=e.normal&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglNormalBuffer),f(e.normal),je.vertexAttribPointer(e.normal,3,je.FLOAT,!1,0,0)),0<=e.tangent&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglTangentBuffer),f(e.tangent),je.vertexAttribPointer(e.tangent,4,je.FLOAT,!1,0,0)),0<=e.uv&&(a.geometry.faceVertexUvs[0]?(je.bindBuffer(je.ARRAY_BUFFER,n.__webglUVBuffer),f(e.uv),je.vertexAttribPointer(e.uv,2,je.FLOAT,!1,0,0)):void 0!==r.defaultAttributeValues&&je.vertexAttrib2fv(e.uv,r.defaultAttributeValues.uv)),0<=e.uv2&&(a.geometry.faceVertexUvs[1]?(je.bindBuffer(je.ARRAY_BUFFER,n.__webglUV2Buffer),f(e.uv2),je.vertexAttribPointer(e.uv2,2,je.FLOAT,!1,0,0)):void 0!==r.defaultAttributeValues&&je.vertexAttrib2fv(e.uv2,r.defaultAttributeValues.uv2)),r.skinning&&0<=e.skinIndex&&0<=e.skinWeight&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglSkinIndicesBuffer),f(e.skinIndex),je.vertexAttribPointer(e.skinIndex,4,je.FLOAT,!1,0,0),je.bindBuffer(je.ARRAY_BUFFER,n.__webglSkinWeightsBuffer),f(e.skinWeight),je.vertexAttribPointer(e.skinWeight,4,je.FLOAT,!1,0,0)),0<=e.lineDistance&&(je.bindBuffer(je.ARRAY_BUFFER,n.__webglLineDistanceBuffer),f(e.lineDistance),je.vertexAttribPointer(e.lineDistance,1,je.FLOAT,!1,0,0))}m(),a instanceof THREE.Mesh?(a=n.__typeArray===Uint32Array?je.UNSIGNED_INT:je.UNSIGNED_SHORT,r.wireframe?(w(r.wireframeLinewidth),t&&je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,n.__webglLineBuffer),je.drawElements(je.LINES,n.__webglLineCount,a,0)):(t&&je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,n.__webglFaceBuffer),je.drawElements(je.TRIANGLES,n.__webglFaceCount,a,0)),be.info.render.calls++,be.info.render.vertices+=n.__webglFaceCount,be.info.render.faces+=n.__webglFaceCount/3):a instanceof THREE.Line?(a=a.mode===THREE.LineStrip?je.LINE_STRIP:je.LINES,w(r.linewidth),je.drawArrays(a,0,n.__webglLineCount),be.info.render.calls++):a instanceof THREE.PointCloud&&(je.drawArrays(je.POINTS,0,n.__webglParticleCount),be.info.render.calls++,be.info.render.points+=n.__webglParticleCount)}},this.render=function(t,e,i,r){if(!1==e instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var n=t.fog;B="",He=-1,(Ae=!(_e=null))===t.autoUpdate&&t.updateMatrixWorld(),void 0===e.parent&&e.updateMatrixWorld(),t.traverse(function(t){t instanceof THREE.SkinnedMesh&&t.skeleton.update()}),e.matrixWorldInverse.getInverse(e.matrixWorld),at.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),nt.setFromMatrix(at),M.length=0,L.length=0,D.length=0,F.length=0,k.length=0,function t(e){if(!1!==e.visible){if(!(e instanceof THREE.Scene||e instanceof THREE.Group)){if(void 0===e.__webglInit&&(e.__webglInit=!0,e._modelViewMatrix=new THREE.Matrix4,e._normalMatrix=new THREE.Matrix3,e.addEventListener("removed",wt)),void 0!==(r=e.geometry)&&void 0===r.__webglInit)if(r.__webglInit=!0,r.addEventListener("dispose",Ht),r instanceof THREE.BufferGeometry)be.info.memory.geometries++;else if(e instanceof THREE.Mesh)Ve(e,r);else if(e instanceof THREE.Line){if(void 0===r.__webglVertexBuffer){r.__webglVertexBuffer=je.createBuffer(),r.__webglColorBuffer=je.createBuffer(),r.__webglLineDistanceBuffer=je.createBuffer(),be.info.memory.geometries++;var i=r.vertices.length;r.__vertexArray=new Float32Array(3*i),r.__colorArray=new Float32Array(3*i),r.__lineDistanceArray=new Float32Array(1*i),r.__webglLineCount=i,c(e),r.verticesNeedUpdate=!0,r.colorsNeedUpdate=!0,r.lineDistancesNeedUpdate=!0}}else e instanceof THREE.PointCloud&&void 0===r.__webglVertexBuffer&&(r.__webglVertexBuffer=je.createBuffer(),r.__webglColorBuffer=je.createBuffer(),be.info.memory.geometries++,i=r.vertices.length,r.__vertexArray=new Float32Array(3*i),r.__colorArray=new Float32Array(3*i),r.__sortArray=[],r.__webglParticleCount=i,c(e),r.verticesNeedUpdate=!0,r.colorsNeedUpdate=!0);if(void 0===e.__webglActive)if(e.__webglActive=!0,e instanceof THREE.Mesh){if(r instanceof THREE.BufferGeometry)T(A,r,e);else if(r instanceof THREE.Geometry){i=0;for(var r,n=(r=Xe[r.id]).length;i<n;i++)T(A,r[i],e)}}else e instanceof THREE.Line||e instanceof THREE.PointCloud?T(A,r,e):(e instanceof THREE.ImmediateRenderObject||e.immediateRenderCallback)&&P.push({id:null,object:e,opaque:null,transparent:null,z:0});if(e instanceof THREE.Light)M.push(e);else if(e instanceof THREE.Sprite)F.push(e);else if(e instanceof THREE.LensFlare)k.push(e);else if((r=A[e.id])&&(!1===e.frustumCulled||!0===nt.intersectsObject(e)))for(i=0,n=r.length;i<n;i++){var a=r[i],o=a,s=o.object,l=o.buffer,h=s.geometry;(s=s.material)instanceof THREE.MeshFaceMaterial?(s=s.materials[h instanceof THREE.BufferGeometry?0:l.materialIndex],(o.material=s).transparent?D.push(o):L.push(o)):s&&((o.material=s).transparent?D.push(o):L.push(o)),(a.render=!0)===be.sortObjects&&(Ce.setFromMatrixPosition(e.matrixWorld),Ce.applyProjection(at),a.z=Ce.z)}}for(i=0,n=e.children.length;i<n;i++)t(e.children[i])}}(t),!0===be.sortObjects&&(L.sort(u),D.sort(g)),xt.render(t,e),be.info.render.calls=0,be.info.render.vertices=0,be.info.render.faces=0,be.info.render.points=0,this.setRenderTarget(i),(this.autoClear||r)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil),r=0;for(var a=P.length;r<a;r++){var o=P[r],s=o.object;s.visible&&(R(s,e),void 0,(h=(l=o).object.material).transparent?(l.transparent=h,l.opaque=null):(l.opaque=h,l.transparent=null))}t.overrideMaterial?(r=t.overrideMaterial,this.setBlending(r.blending,r.blendEquation,r.blendSrc,r.blendDst),this.setDepthTest(r.depthTest),this.setDepthWrite(r.depthWrite),H(r.polygonOffset,r.polygonOffsetFactor,r.polygonOffsetUnits),v(L,e,M,n,!0,r),v(D,e,M,n,!0,r),y(P,"",e,M,n,!1,r)):(r=null,this.setBlending(THREE.NoBlending),v(L,e,M,n,!1,r),y(P,"opaque",e,M,n,!1,r),v(D,e,M,n,!0,r),y(P,"transparent",e,M,n,!0,r)),bt.render(t,e),Rt.render(t,e,tt,et),i&&i.generateMipmaps&&i.minFilter!==THREE.NearestFilter&&i.minFilter!==THREE.LinearFilter&&function(t){t instanceof THREE.WebGLRenderTargetCube?(je.bindTexture(je.TEXTURE_CUBE_MAP,t.__webglTexture),je.generateMipmap(je.TEXTURE_CUBE_MAP),je.bindTexture(je.TEXTURE_CUBE_MAP,null)):(je.bindTexture(je.TEXTURE_2D,t.__webglTexture),je.generateMipmap(je.TEXTURE_2D),je.bindTexture(je.TEXTURE_2D,null))}(i),this.setDepthTest(!0),this.setDepthWrite(!0)}var l,h},this.renderImmediateObject=function(t,e,i,r,n){var a=b(t,e,i,r,n);B="",be.setMaterialFaces(r),n.immediateRenderCallback?n.immediateRenderCallback(a,je,nt):n.render(function(t){be.renderBufferImmediate(t,a,r)})};var Xe={},Ct=0,Ie={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointCloudMaterial:"particle_basic"};this.setFaceCulling=function(t,e){t===THREE.CullFaceNone?je.disable(je.CULL_FACE):(e===THREE.FrontFaceDirectionCW?je.frontFace(je.CW):je.frontFace(je.CCW),t===THREE.CullFaceBack?je.cullFace(je.BACK):t===THREE.CullFaceFront?je.cullFace(je.FRONT):je.cullFace(je.FRONT_AND_BACK),je.enable(je.CULL_FACE))},this.setMaterialFaces=function(t){var e=t.side===THREE.DoubleSide;t=t.side===THREE.BackSide,N!==e&&(e?je.disable(je.CULL_FACE):je.enable(je.CULL_FACE),N=e),I!==t&&(t?je.frontFace(je.CW):je.frontFace(je.CCW),I=t)},this.setDepthTest=function(t){W!==t&&(t?je.enable(je.DEPTH_TEST):je.disable(je.DEPTH_TEST),W=t)},this.setDepthWrite=function(t){j!==t&&(je.depthMask(t),j=t)},this.setBlending=function(t,e,i,r){t!==z&&(t===THREE.NoBlending?je.disable(je.BLEND):t===THREE.AdditiveBlending?(je.enable(je.BLEND),je.blendEquation(je.FUNC_ADD),je.blendFunc(je.SRC_ALPHA,je.ONE)):t===THREE.SubtractiveBlending?(je.enable(je.BLEND),je.blendEquation(je.FUNC_ADD),je.blendFunc(je.ZERO,je.ONE_MINUS_SRC_COLOR)):t===THREE.MultiplyBlending?(je.enable(je.BLEND),je.blendEquation(je.FUNC_ADD),je.blendFunc(je.ZERO,je.SRC_COLOR)):t===THREE.CustomBlending?je.enable(je.BLEND):(je.enable(je.BLEND),je.blendEquationSeparate(je.FUNC_ADD,je.FUNC_ADD),je.blendFuncSeparate(je.SRC_ALPHA,je.ONE_MINUS_SRC_ALPHA,je.ONE,je.ONE_MINUS_SRC_ALPHA)),z=t),t===THREE.CustomBlending?(e!==U&&(je.blendEquation(ve(e)),U=e),i===V&&r===G||(je.blendFunc(ve(i),ve(r)),V=i,G=r)):G=V=U=null},this.uploadTexture=function(t){void 0===t.__webglInit&&(t.__webglInit=!0,t.addEventListener("dispose",Oe),t.__webglTexture=je.createTexture(),be.info.memory.textures++),je.bindTexture(je.TEXTURE_2D,t.__webglTexture),je.pixelStorei(je.UNPACK_FLIP_Y_WEBGL,t.flipY),je.pixelStorei(je.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),je.pixelStorei(je.UNPACK_ALIGNMENT,t.unpackAlignment),t.image=Ee(t.image,dt);var e=t.image,i=THREE.Math.isPowerOfTwo(e.width)&&THREE.Math.isPowerOfTwo(e.height),r=ve(t.format),n=ve(t.type);ge(je.TEXTURE_2D,t,i);var a=t.mipmaps;if(t instanceof THREE.DataTexture)if(0<a.length&&i){for(var o=0,s=a.length;o<s;o++)e=a[o],je.texImage2D(je.TEXTURE_2D,o,r,e.width,e.height,0,r,n,e.data);t.generateMipmaps=!1}else je.texImage2D(je.TEXTURE_2D,0,r,e.width,e.height,0,r,n,e.data);else if(t instanceof THREE.CompressedTexture)for(o=0,s=a.length;o<s;o++)e=a[o],t.format!==THREE.RGBAFormat&&t.format!==THREE.RGBFormat?-1<ke().indexOf(r)?je.compressedTexImage2D(je.TEXTURE_2D,o,r,e.width,e.height,0,e.data):console.warn("Attempt to load unsupported compressed texture format"):je.texImage2D(je.TEXTURE_2D,o,r,e.width,e.height,0,r,n,e.data);else if(0<a.length&&i){for(o=0,s=a.length;o<s;o++)e=a[o],je.texImage2D(je.TEXTURE_2D,o,r,r,n,e);t.generateMipmaps=!1}else je.texImage2D(je.TEXTURE_2D,0,r,r,n,t.image);t.generateMipmaps&&i&&je.generateMipmap(je.TEXTURE_2D),t.needsUpdate=!1,t.onUpdate&&t.onUpdate()},this.setTexture=function(t,e){je.activeTexture(je.TEXTURE0+e),t.needsUpdate?be.uploadTexture(t):je.bindTexture(je.TEXTURE_2D,t.__webglTexture)},this.setRenderTarget=function(t){var e=t instanceof THREE.WebGLRenderTargetCube;if(t&&void 0===t.__webglFramebuffer){void 0===t.depthBuffer&&(t.depthBuffer=!0),void 0===t.stencilBuffer&&(t.stencilBuffer=!0),t.addEventListener("dispose",_t),t.__webglTexture=je.createTexture(),be.info.memory.textures++;var i=THREE.Math.isPowerOfTwo(t.width)&&THREE.Math.isPowerOfTwo(t.height),r=ve(t.format),n=ve(t.type);if(e){t.__webglFramebuffer=[],t.__webglRenderbuffer=[],je.bindTexture(je.TEXTURE_CUBE_MAP,t.__webglTexture),ge(je.TEXTURE_CUBE_MAP,t,i);for(var a=0;a<6;a++){t.__webglFramebuffer[a]=je.createFramebuffer(),t.__webglRenderbuffer[a]=je.createRenderbuffer(),je.texImage2D(je.TEXTURE_CUBE_MAP_POSITIVE_X+a,0,r,t.width,t.height,0,r,n,null);var o=t,s=je.TEXTURE_CUBE_MAP_POSITIVE_X+a;je.bindFramebuffer(je.FRAMEBUFFER,t.__webglFramebuffer[a]),je.framebufferTexture2D(je.FRAMEBUFFER,je.COLOR_ATTACHMENT0,s,o.__webglTexture,0),l(t.__webglRenderbuffer[a],t)}i&&je.generateMipmap(je.TEXTURE_CUBE_MAP)}else t.__webglFramebuffer=je.createFramebuffer(),t.__webglRenderbuffer=t.shareDepthFrom?t.shareDepthFrom.__webglRenderbuffer:je.createRenderbuffer(),je.bindTexture(je.TEXTURE_2D,t.__webglTexture),ge(je.TEXTURE_2D,t,i),je.texImage2D(je.TEXTURE_2D,0,r,t.width,t.height,0,r,n,null),r=je.TEXTURE_2D,je.bindFramebuffer(je.FRAMEBUFFER,t.__webglFramebuffer),je.framebufferTexture2D(je.FRAMEBUFFER,je.COLOR_ATTACHMENT0,r,t.__webglTexture,0),t.shareDepthFrom?t.depthBuffer&&!t.stencilBuffer?je.framebufferRenderbuffer(je.FRAMEBUFFER,je.DEPTH_ATTACHMENT,je.RENDERBUFFER,t.__webglRenderbuffer):t.depthBuffer&&t.stencilBuffer&&je.framebufferRenderbuffer(je.FRAMEBUFFER,je.DEPTH_STENCIL_ATTACHMENT,je.RENDERBUFFER,t.__webglRenderbuffer):l(t.__webglRenderbuffer,t),i&&je.generateMipmap(je.TEXTURE_2D);e?je.bindTexture(je.TEXTURE_CUBE_MAP,null):je.bindTexture(je.TEXTURE_2D,null),je.bindRenderbuffer(je.RENDERBUFFER,null),je.bindFramebuffer(je.FRAMEBUFFER,null)}n=t?(e=e?t.__webglFramebuffer[t.activeCubeFace]:t.__webglFramebuffer,i=t.width,t=t.height,r=0):(e=null,i=Z,t=J,r=K,Q),e!==O&&(je.bindFramebuffer(je.FRAMEBUFFER,e),je.viewport(r,n,i,t),O=e),tt=i,et=t},this.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},this.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},this.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},this.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}},THREE.WebGLRenderTarget=function(t,e,i){this.width=t,this.height=e,i=i||{},this.wrapS=void 0!==i.wrapS?i.wrapS:THREE.ClampToEdgeWrapping,this.wrapT=void 0!==i.wrapT?i.wrapT:THREE.ClampToEdgeWrapping,this.magFilter=void 0!==i.magFilter?i.magFilter:THREE.LinearFilter,this.minFilter=void 0!==i.minFilter?i.minFilter:THREE.LinearMipMapLinearFilter,this.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,this.offset=new THREE.Vector2(0,0),this.repeat=new THREE.Vector2(1,1),this.format=void 0!==i.format?i.format:THREE.RGBAFormat,this.type=void 0!==i.type?i.type:THREE.UnsignedByteType,this.depthBuffer=void 0===i.depthBuffer||i.depthBuffer,this.stencilBuffer=void 0===i.stencilBuffer||i.stencilBuffer,this.generateMipmaps=!0,this.shareDepthFrom=null},THREE.WebGLRenderTarget.prototype={constructor:THREE.WebGLRenderTarget,setSize:function(t,e){this.width=t,this.height=e},clone:function(){var t=new THREE.WebGLRenderTarget(this.width,this.height);return t.wrapS=this.wrapS,t.wrapT=this.wrapT,t.magFilter=this.magFilter,t.minFilter=this.minFilter,t.anisotropy=this.anisotropy,t.offset.copy(this.offset),t.repeat.copy(this.repeat),t.format=this.format,t.type=this.type,t.depthBuffer=this.depthBuffer,t.stencilBuffer=this.stencilBuffer,t.generateMipmaps=this.generateMipmaps,t.shareDepthFrom=this.shareDepthFrom,t},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype),THREE.WebGLRenderTargetCube=function(t,e,i){THREE.WebGLRenderTarget.call(this,t,e,i),this.activeCubeFace=0},THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype),THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube,THREE.WebGLExtensions=function(i){var r={};this.get=function(t){if(void 0!==r[t])return r[t];var e;switch(t){case"EXT_texture_filter_anisotropic":e=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":e=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":e=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:e=i.getExtension(t)}return null===e&&console.log("THREE.WebGLRenderer: "+t+" extension not supported."),r[t]=e}},THREE.WebGLProgram=function(){var T=0;return function(t,e,i,r){var n=t.context,a=i.defines,o=i.__webglShader.uniforms,s=i.attributes,l=i.__webglShader.vertexShader,h=i.__webglShader.fragmentShader,c=i.index0AttributeName;void 0===c&&!0===r.morphTargets&&(c="position");var u="SHADOWMAP_TYPE_BASIC";r.shadowMapType===THREE.PCFShadowMap?u="SHADOWMAP_TYPE_PCF":r.shadowMapType===THREE.PCFSoftShadowMap&&(u="SHADOWMAP_TYPE_PCF_SOFT");var d,p,f="ENVMAP_TYPE_CUBE",m="ENVMAP_MODE_REFLECTION",g="ENVMAP_BLENDING_MULTIPLY";if(r.envMap){switch(i.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:f="ENVMAP_TYPE_CUBE";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:f="ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:f="ENVMAP_TYPE_SPHERE"}switch(i.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:m="ENVMAP_MODE_REFRACTION"}switch(i.combine){case THREE.MultiplyOperation:g="ENVMAP_BLENDING_MULTIPLY";break;case THREE.MixOperation:g="ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:g="ENVMAP_BLENDING_ADD"}}for(var E in d=[],a)!1!==(p=a[E])&&(p="#define "+E+" "+p,d.push(p));for(var v in d=d.join("\n"),a=n.createProgram(),t=i instanceof THREE.RawShaderMaterial?i="":(i=["precision "+r.precision+" float;","precision "+r.precision+" int;",d,r.supportsVertexTextures?"#define VERTEX_TEXTURES":"",t.gammaInput?"#define GAMMA_INPUT":"",t.gammaOutput?"#define GAMMA_OUTPUT":"","#define MAX_DIR_LIGHTS "+r.maxDirLights,"#define MAX_POINT_LIGHTS "+r.maxPointLights,"#define MAX_SPOT_LIGHTS "+r.maxSpotLights,"#define MAX_HEMI_LIGHTS "+r.maxHemiLights,"#define MAX_SHADOWS "+r.maxShadows,"#define MAX_BONES "+r.maxBones,r.map?"#define USE_MAP":"",r.envMap?"#define USE_ENVMAP":"",r.envMap?"#define "+m:"",r.lightMap?"#define USE_LIGHTMAP":"",r.bumpMap?"#define USE_BUMPMAP":"",r.normalMap?"#define USE_NORMALMAP":"",r.specularMap?"#define USE_SPECULARMAP":"",r.alphaMap?"#define USE_ALPHAMAP":"",r.vertexColors?"#define USE_COLOR":"",r.skinning?"#define USE_SKINNING":"",r.useVertexTexture?"#define BONE_TEXTURE":"",r.morphTargets?"#define USE_MORPHTARGETS":"",r.morphNormals?"#define USE_MORPHNORMALS":"",r.wrapAround?"#define WRAP_AROUND":"",r.doubleSided?"#define DOUBLE_SIDED":"",r.flipSided?"#define FLIP_SIDED":"",r.shadowMapEnabled?"#define USE_SHADOWMAP":"",r.shadowMapEnabled?"#define "+u:"",r.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",r.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",r.sizeAttenuation?"#define USE_SIZEATTENUATION":"",r.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n"].join("\n"),["precision "+r.precision+" float;","precision "+r.precision+" int;",r.bumpMap||r.normalMap?"#extension GL_OES_standard_derivatives : enable":"",d,"#define MAX_DIR_LIGHTS "+r.maxDirLights,"#define MAX_POINT_LIGHTS "+r.maxPointLights,"#define MAX_SPOT_LIGHTS "+r.maxSpotLights,"#define MAX_HEMI_LIGHTS "+r.maxHemiLights,"#define MAX_SHADOWS "+r.maxShadows,r.alphaTest?"#define ALPHATEST "+r.alphaTest:"",t.gammaInput?"#define GAMMA_INPUT":"",t.gammaOutput?"#define GAMMA_OUTPUT":"",r.useFog&&r.fog?"#define USE_FOG":"",r.useFog&&r.fogExp?"#define FOG_EXP2":"",r.map?"#define USE_MAP":"",r.envMap?"#define USE_ENVMAP":"",r.envMap?"#define "+f:"",r.envMap?"#define "+m:"",r.envMap?"#define "+g:"",r.lightMap?"#define USE_LIGHTMAP":"",r.bumpMap?"#define USE_BUMPMAP":"",r.normalMap?"#define USE_NORMALMAP":"",r.specularMap?"#define USE_SPECULARMAP":"",r.alphaMap?"#define USE_ALPHAMAP":"",r.vertexColors?"#define USE_COLOR":"",r.metal?"#define METAL":"",r.wrapAround?"#define WRAP_AROUND":"",r.doubleSided?"#define DOUBLE_SIDED":"",r.flipSided?"#define FLIP_SIDED":"",r.shadowMapEnabled?"#define USE_SHADOWMAP":"",r.shadowMapEnabled?"#define "+u:"",r.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",r.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",r.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n")),l=new THREE.WebGLShader(n,n.VERTEX_SHADER,i+l),h=new THREE.WebGLShader(n,n.FRAGMENT_SHADER,t+h),n.attachShader(a,l),n.attachShader(a,h),void 0!==c&&n.bindAttribLocation(a,0,c),n.linkProgram(a),!1===n.getProgramParameter(a,n.LINK_STATUS)&&(console.error("THREE.WebGLProgram: Could not initialise shader."),console.error("gl.VALIDATE_STATUS",n.getProgramParameter(a,n.VALIDATE_STATUS)),console.error("gl.getError()",n.getError())),""!==n.getProgramInfoLog(a)&&console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",n.getProgramInfoLog(a)),n.deleteShader(l),n.deleteShader(h),c="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences bindMatrix bindMatrixInverse".split(" "),r.useVertexTexture?(c.push("boneTexture"),c.push("boneTextureWidth"),c.push("boneTextureHeight")):c.push("boneGlobalMatrices"),r.logarithmicDepthBuffer&&c.push("logDepthBufFC"),o)c.push(v);for(o=c,v={},c=0,t=o.length;c<t;c++)v[u=o[c]]=n.getUniformLocation(a,u);for(this.uniforms=v,c="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" "),o=0;o<r.maxMorphTargets;o++)c.push("morphTarget"+o);for(o=0;o<r.maxMorphNormals;o++)c.push("morphNormal"+o);for(var y in s)c.push(y);for(s={},y=0,o=(r=c).length;y<o;y++)s[v=r[y]]=n.getAttribLocation(a,v);return this.attributes=s,this.attributesKeys=Object.keys(this.attributes),this.id=T++,this.code=e,this.usedTimes=1,this.program=a,this.vertexShader=l,this.fragmentShader=h,this}}(),THREE.WebGLShader=function(t,e,i){return e=t.createShader(e),t.shaderSource(e,i),t.compileShader(e),!1===t.getShaderParameter(e,t.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==t.getShaderInfoLog(e)&&(console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",t.getShaderInfoLog(e)),console.warn(function(t){t=t.split("\n");for(var e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}(i))),e},THREE.LensFlarePlugin=function(E,v){var y,T,x,b,R,w,H,_,S,C,M,A,P,L,D,F,k=E.context;this.render=function(t,e,i,r){if(0!==v.length){t=new THREE.Vector3;var n=r/i,a=.5*i,o=.5*r,s=16/r,l=new THREE.Vector2(s*n,s),h=new THREE.Vector3(1,1,0),c=new THREE.Vector2(1,1);if(void 0===P){s=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]);var u=new Uint16Array([0,1,2,0,2,3]);M=k.createBuffer(),A=k.createBuffer(),k.bindBuffer(k.ARRAY_BUFFER,M),k.bufferData(k.ARRAY_BUFFER,s,k.STATIC_DRAW),k.bindBuffer(k.ELEMENT_ARRAY_BUFFER,A),k.bufferData(k.ELEMENT_ARRAY_BUFFER,u,k.STATIC_DRAW),D=k.createTexture(),F=k.createTexture(),k.bindTexture(k.TEXTURE_2D,D),k.texImage2D(k.TEXTURE_2D,0,k.RGB,16,16,0,k.RGB,k.UNSIGNED_BYTE,null),k.texParameteri(k.TEXTURE_2D,k.TEXTURE_WRAP_S,k.CLAMP_TO_EDGE),k.texParameteri(k.TEXTURE_2D,k.TEXTURE_WRAP_T,k.CLAMP_TO_EDGE),k.texParameteri(k.TEXTURE_2D,k.TEXTURE_MAG_FILTER,k.NEAREST),k.texParameteri(k.TEXTURE_2D,k.TEXTURE_MIN_FILTER,k.NEAREST),k.bindTexture(k.TEXTURE_2D,F),k.texImage2D(k.TEXTURE_2D,0,k.RGBA,16,16,0,k.RGBA,k.UNSIGNED_BYTE,null),k.texParameteri(k.TEXTURE_2D,k.TEXTURE_WRAP_S,k.CLAMP_TO_EDGE),k.texParameteri(k.TEXTURE_2D,k.TEXTURE_WRAP_T,k.CLAMP_TO_EDGE),k.texParameteri(k.TEXTURE_2D,k.TEXTURE_MAG_FILTER,k.NEAREST),k.texParameteri(k.TEXTURE_2D,k.TEXTURE_MIN_FILTER,k.NEAREST);s=(L=0<k.getParameter(k.MAX_VERTEX_TEXTURE_IMAGE_UNITS))?{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},u=k.createProgram();var d=k.createShader(k.FRAGMENT_SHADER),p=k.createShader(k.VERTEX_SHADER),f="precision "+E.getPrecision()+" float;\n";k.shaderSource(d,f+s.fragmentShader),k.shaderSource(p,f+s.vertexShader),k.compileShader(d),k.compileShader(p),k.attachShader(u,d),k.attachShader(u,p),k.linkProgram(u),P=u,S=k.getAttribLocation(P,"position"),C=k.getAttribLocation(P,"uv"),y=k.getUniformLocation(P,"renderType"),T=k.getUniformLocation(P,"map"),x=k.getUniformLocation(P,"occlusionMap"),b=k.getUniformLocation(P,"opacity"),R=k.getUniformLocation(P,"color"),w=k.getUniformLocation(P,"scale"),H=k.getUniformLocation(P,"rotation"),_=k.getUniformLocation(P,"screenPosition")}for(k.useProgram(P),k.enableVertexAttribArray(S),k.enableVertexAttribArray(C),k.uniform1i(x,0),k.uniform1i(T,1),k.bindBuffer(k.ARRAY_BUFFER,M),k.vertexAttribPointer(S,2,k.FLOAT,!1,16,0),k.vertexAttribPointer(C,2,k.FLOAT,!1,16,8),k.bindBuffer(k.ELEMENT_ARRAY_BUFFER,A),k.disable(k.CULL_FACE),k.depthMask(!1),u=0,d=v.length;u<d;u++)if(s=16/r,l.set(s*n,s),p=v[u],t.set(p.matrixWorld.elements[12],p.matrixWorld.elements[13],p.matrixWorld.elements[14]),t.applyMatrix4(e.matrixWorldInverse),t.applyProjection(e.projectionMatrix),h.copy(t),c.x=h.x*a+a,c.y=h.y*o+o,L||0<c.x&&c.x<i&&0<c.y&&c.y<r){k.activeTexture(k.TEXTURE1),k.bindTexture(k.TEXTURE_2D,D),k.copyTexImage2D(k.TEXTURE_2D,0,k.RGB,c.x-8,c.y-8,16,16,0),k.uniform1i(y,0),k.uniform2f(w,l.x,l.y),k.uniform3f(_,h.x,h.y,h.z),k.disable(k.BLEND),k.enable(k.DEPTH_TEST),k.drawElements(k.TRIANGLES,6,k.UNSIGNED_SHORT,0),k.activeTexture(k.TEXTURE0),k.bindTexture(k.TEXTURE_2D,F),k.copyTexImage2D(k.TEXTURE_2D,0,k.RGBA,c.x-8,c.y-8,16,16,0),k.uniform1i(y,1),k.disable(k.DEPTH_TEST),k.activeTexture(k.TEXTURE1),k.bindTexture(k.TEXTURE_2D,D),k.drawElements(k.TRIANGLES,6,k.UNSIGNED_SHORT,0),p.positionScreen.copy(h),p.customUpdateCallback?p.customUpdateCallback(p):p.updateLensFlares(),k.uniform1i(y,2),k.enable(k.BLEND);f=0;for(var m=p.lensFlares.length;f<m;f++){var g=p.lensFlares[f];.001<g.opacity&&.001<g.scale&&(h.x=g.x,h.y=g.y,h.z=g.z,s=g.size*g.scale/r,l.x=s*n,l.y=s,k.uniform3f(_,h.x,h.y,h.z),k.uniform2f(w,l.x,l.y),k.uniform1f(H,g.rotation),k.uniform1f(b,g.opacity),k.uniform3f(R,g.color.r,g.color.g,g.color.b),E.setBlending(g.blending,g.blendEquation,g.blendSrc,g.blendDst),E.setTexture(g.texture,1),k.drawElements(k.TRIANGLES,6,k.UNSIGNED_SHORT,0))}}k.enable(k.CULL_FACE),k.enable(k.DEPTH_TEST),k.depthMask(!0),E.resetGLState()}}},THREE.ShadowMapPlugin=function(f,m,s,g){function E(t,e,i){if(e.visible){var r=s[e.id];if(r&&e.castShadow&&(!1===e.frustumCulled||!0===R.intersectsObject(e)))for(var n=0,a=r.length;n<a;n++){var o=r[n];e._modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,e.matrixWorld),C.push(o)}for(n=0,a=e.children.length;n<a;n++)E(t,e.children[n],i)}}var v,y,T,x,b=f.context,R=new THREE.Frustum,w=new THREE.Matrix4,H=new THREE.Vector3,_=new THREE.Vector3,S=new THREE.Vector3,C=[],t=THREE.ShaderLib.depthRGBA,e=THREE.UniformsUtils.clone(t.uniforms);v=new THREE.ShaderMaterial({uniforms:e,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader}),y=new THREE.ShaderMaterial({uniforms:e,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader,morphTargets:!0}),T=new THREE.ShaderMaterial({uniforms:e,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader,skinning:!0}),x=new THREE.ShaderMaterial({uniforms:e,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader,morphTargets:!0,skinning:!0}),v._shadowPass=!0,y._shadowPass=!0,T._shadowPass=!0,x._shadowPass=!0,this.render=function(t,e){if(!1!==f.shadowMapEnabled){var i,r,n,a,o,s,l,h,c=[];for(a=0,b.clearColor(1,1,1,1),b.disable(b.BLEND),b.enable(b.CULL_FACE),b.frontFace(b.CCW),f.shadowMapCullFace===THREE.CullFaceFront?b.cullFace(b.FRONT):b.cullFace(b.BACK),f.setDepthTest(!0),i=0,r=m.length;i<r;i++)if((n=m[i]).castShadow)if(n instanceof THREE.DirectionalLight&&n.shadowCascade)for(o=0;o<n.shadowCascadeCount;o++){var u;if(n.shadowCascadeArray[o])u=n.shadowCascadeArray[o];else{l=n;var d=o;(u=new THREE.DirectionalLight).isVirtual=!0,u.onlyShadow=!0,u.castShadow=!0,u.shadowCameraNear=l.shadowCameraNear,u.shadowCameraFar=l.shadowCameraFar,u.shadowCameraLeft=l.shadowCameraLeft,u.shadowCameraRight=l.shadowCameraRight,u.shadowCameraBottom=l.shadowCameraBottom,u.shadowCameraTop=l.shadowCameraTop,u.shadowCameraVisible=l.shadowCameraVisible,u.shadowDarkness=l.shadowDarkness,u.shadowBias=l.shadowCascadeBias[d],u.shadowMapWidth=l.shadowCascadeWidth[d],u.shadowMapHeight=l.shadowCascadeHeight[d],u.pointsWorld=[],u.pointsFrustum=[],h=u.pointsWorld,s=u.pointsFrustum;for(var p=0;p<8;p++)h[p]=new THREE.Vector3,s[p]=new THREE.Vector3;h=l.shadowCascadeNearZ[d],l=l.shadowCascadeFarZ[d],s[0].set(-1,-1,h),s[1].set(1,-1,h),s[2].set(-1,1,h),s[3].set(1,1,h),s[4].set(-1,-1,l),s[5].set(1,-1,l),s[6].set(-1,1,l),s[7].set(1,1,l),u.originalCamera=e,(s=new THREE.Gyroscope).position.copy(n.shadowCascadeOffset),s.add(u),s.add(u.target),e.add(s),n.shadowCascadeArray[o]=u,console.log("Created virtualLight",u)}h=o,(l=(d=n).shadowCascadeArray[h]).position.copy(d.position),l.target.position.copy(d.target.position),l.lookAt(l.target),l.shadowCameraVisible=d.shadowCameraVisible,l.shadowDarkness=d.shadowDarkness,l.shadowBias=d.shadowCascadeBias[h],s=d.shadowCascadeNearZ[h],d=d.shadowCascadeFarZ[h],(l=l.pointsFrustum)[0].z=s,l[1].z=s,l[2].z=s,l[3].z=s,l[4].z=d,l[5].z=d,l[6].z=d,l[7].z=d,c[a]=u,a++}else c[a]=n,a++;for(i=0,r=c.length;i<r;i++){if((n=c[i]).shadowMap||(o=THREE.LinearFilter,f.shadowMapType===THREE.PCFSoftShadowMap&&(o=THREE.NearestFilter),n.shadowMap=new THREE.WebGLRenderTarget(n.shadowMapWidth,n.shadowMapHeight,{minFilter:o,magFilter:o,format:THREE.RGBAFormat}),n.shadowMapSize=new THREE.Vector2(n.shadowMapWidth,n.shadowMapHeight),n.shadowMatrix=new THREE.Matrix4),!n.shadowCamera){if(n instanceof THREE.SpotLight)n.shadowCamera=new THREE.PerspectiveCamera(n.shadowCameraFov,n.shadowMapWidth/n.shadowMapHeight,n.shadowCameraNear,n.shadowCameraFar);else{if(!(n instanceof THREE.DirectionalLight)){console.error("Unsupported light type for shadow");continue}n.shadowCamera=new THREE.OrthographicCamera(n.shadowCameraLeft,n.shadowCameraRight,n.shadowCameraTop,n.shadowCameraBottom,n.shadowCameraNear,n.shadowCameraFar)}t.add(n.shadowCamera),!0===t.autoUpdate&&t.updateMatrixWorld()}if(n.shadowCameraVisible&&!n.cameraHelper&&(n.cameraHelper=new THREE.CameraHelper(n.shadowCamera),t.add(n.cameraHelper)),n.isVirtual&&u.originalCamera==e){for(o=e,a=n.shadowCamera,s=n.pointsFrustum,l=n.pointsWorld,H.set(1/0,1/0,1/0),_.set(-1/0,-1/0,-1/0),d=0;d<8;d++)(h=l[d]).copy(s[d]),h.unproject(o),h.applyMatrix4(a.matrixWorldInverse),h.x<H.x&&(H.x=h.x),h.x>_.x&&(_.x=h.x),h.y<H.y&&(H.y=h.y),h.y>_.y&&(_.y=h.y),h.z<H.z&&(H.z=h.z),h.z>_.z&&(_.z=h.z);a.left=H.x,a.right=_.x,a.top=_.y,a.bottom=H.y,a.updateProjectionMatrix()}for(a=n.shadowMap,s=n.shadowMatrix,(o=n.shadowCamera).position.setFromMatrixPosition(n.matrixWorld),S.setFromMatrixPosition(n.target.matrixWorld),o.lookAt(S),o.updateMatrixWorld(),o.matrixWorldInverse.getInverse(o.matrixWorld),n.cameraHelper&&(n.cameraHelper.visible=n.shadowCameraVisible),n.shadowCameraVisible&&n.cameraHelper.update(),s.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),s.multiply(o.projectionMatrix),s.multiply(o.matrixWorldInverse),w.multiplyMatrices(o.projectionMatrix,o.matrixWorldInverse),R.setFromMatrix(w),f.setRenderTarget(a),f.clear(),C.length=0,E(t,t,o),n=0,a=C.length;n<a;n++)s=(l=C[n]).object,l=l.buffer,d=s.material instanceof THREE.MeshFaceMaterial?s.material.materials[0]:s.material,h=void 0!==s.geometry.morphTargets&&0<s.geometry.morphTargets.length&&d.morphTargets,p=s instanceof THREE.SkinnedMesh&&d.skinning,h=s.customDepthMaterial?s.customDepthMaterial:p?h?x:T:h?y:v,f.setMaterialFaces(d),l instanceof THREE.BufferGeometry?f.renderBufferDirect(o,m,null,h,l,s):f.renderBuffer(o,m,null,h,l,s);for(n=0,a=g.length;n<a;n++)(s=(l=g[n]).object).visible&&s.castShadow&&(s._modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,s.matrixWorld),f.renderImmediateObject(o,m,null,v,s))}i=f.getClearColor(),r=f.getClearAlpha(),b.clearColor(i.r,i.g,i.b,r),b.enable(b.BLEND),f.shadowMapCullFace===THREE.CullFaceFront&&b.cullFace(b.BACK),f.resetGLState()}}},THREE.SpritePlugin=function(h,c){var u,d,p,f,m,g,E,v,y,T,x,b,R,w,H,_,S;function C(t,e){return t.z!==e.z?e.z-t.z:e.id-t.id}var M,A,P,L,D=h.context,F=new THREE.Vector3,k=new THREE.Quaternion,O=new THREE.Vector3;this.render=function(t,e){if(0!==c.length){if(void 0===P){var i=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),r=new Uint16Array([0,1,2,0,2,3]);M=D.createBuffer(),A=D.createBuffer(),D.bindBuffer(D.ARRAY_BUFFER,M),D.bufferData(D.ARRAY_BUFFER,i,D.STATIC_DRAW),D.bindBuffer(D.ELEMENT_ARRAY_BUFFER,A),D.bufferData(D.ELEMENT_ARRAY_BUFFER,r,D.STATIC_DRAW);i=D.createProgram(),r=D.createShader(D.VERTEX_SHADER);var n=D.createShader(D.FRAGMENT_SHADER);D.shaderSource(r,["precision "+h.getPrecision()+" float;","uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n")),D.shaderSource(n,["precision "+h.getPrecision()+" float;","uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n")),D.compileShader(r),D.compileShader(n),D.attachShader(i,r),D.attachShader(i,n),D.linkProgram(i),P=i,_=D.getAttribLocation(P,"position"),S=D.getAttribLocation(P,"uv"),u=D.getUniformLocation(P,"uvOffset"),d=D.getUniformLocation(P,"uvScale"),p=D.getUniformLocation(P,"rotation"),f=D.getUniformLocation(P,"scale"),m=D.getUniformLocation(P,"color"),g=D.getUniformLocation(P,"map"),E=D.getUniformLocation(P,"opacity"),v=D.getUniformLocation(P,"modelViewMatrix"),y=D.getUniformLocation(P,"projectionMatrix"),T=D.getUniformLocation(P,"fogType"),x=D.getUniformLocation(P,"fogDensity"),b=D.getUniformLocation(P,"fogNear"),R=D.getUniformLocation(P,"fogFar"),w=D.getUniformLocation(P,"fogColor"),H=D.getUniformLocation(P,"alphaTest"),(i=document.createElement("canvas")).width=8,i.height=8,(r=i.getContext("2d")).fillStyle="white",r.fillRect(0,0,8,8),(L=new THREE.Texture(i)).needsUpdate=!0}D.useProgram(P),D.enableVertexAttribArray(_),D.enableVertexAttribArray(S),D.disable(D.CULL_FACE),D.enable(D.BLEND),D.bindBuffer(D.ARRAY_BUFFER,M),D.vertexAttribPointer(_,2,D.FLOAT,!1,16,0),D.vertexAttribPointer(S,2,D.FLOAT,!1,16,8),D.bindBuffer(D.ELEMENT_ARRAY_BUFFER,A),D.uniformMatrix4fv(y,!1,e.projectionMatrix.elements),D.activeTexture(D.TEXTURE0),D.uniform1i(g,0),r=i=0,(n=t.fog)?(D.uniform3f(w,n.color.r,n.color.g,n.color.b),n instanceof THREE.Fog?(D.uniform1f(b,n.near),D.uniform1f(R,n.far),D.uniform1i(T,1),r=i=1):n instanceof THREE.FogExp2&&(D.uniform1f(x,n.density),D.uniform1i(T,2),r=i=2)):(D.uniform1i(T,0),r=i=0);n=0;for(var a=c.length;n<a;n++){(s=c[n])._modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,s.matrixWorld),s.z=-s._modelViewMatrix.elements[14]}c.sort(C);var o=[];for(n=0,a=c.length;n<a;n++){var s,l=(s=c[n]).material;D.uniform1f(H,l.alphaTest),D.uniformMatrix4fv(v,!1,s._modelViewMatrix.elements),s.matrixWorld.decompose(F,k,O),o[0]=O.x,o[1]=O.y,s=0,t.fog&&l.fog&&(s=r),i!==s&&(D.uniform1i(T,s),i=s),null!==l.map?(D.uniform2f(u,l.map.offset.x,l.map.offset.y),D.uniform2f(d,l.map.repeat.x,l.map.repeat.y)):(D.uniform2f(u,0,0),D.uniform2f(d,1,1)),D.uniform1f(E,l.opacity),D.uniform3f(m,l.color.r,l.color.g,l.color.b),D.uniform1f(p,l.rotation),D.uniform2fv(f,o),h.setBlending(l.blending,l.blendEquation,l.blendSrc,l.blendDst),h.setDepthTest(l.depthTest),h.setDepthWrite(l.depthWrite),l.map&&l.map.image&&l.map.image.width?h.setTexture(l.map,0):h.setTexture(L,0),D.drawElements(D.TRIANGLES,6,D.UNSIGNED_SHORT,0)}D.enable(D.CULL_FACE),h.resetGLState()}}},THREE.GeometryUtils={merge:function(t,e,i){var r;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),e instanceof THREE.Mesh&&(e.matrixAutoUpdate&&e.updateMatrix(),r=e.matrix,e=e.geometry),t.merge(e,r,i)},center:function(t){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),t.center()}},THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(t,e,i,r){var n=new THREE.ImageLoader;n.crossOrigin=this.crossOrigin;var a=new THREE.Texture(void 0,e);return n.load(t,function(t){a.image=t,a.needsUpdate=!0,i&&i(a)},void 0,function(t){r&&r(t)}),a.sourceFile=t,a},loadTextureCube:function(t,e,i,r){var n=new THREE.ImageLoader;n.crossOrigin=this.crossOrigin;var a=new THREE.CubeTexture([],e);a.flipY=!1;var o=0;e=function(e){n.load(t[e],function(t){a.images[e]=t,6===(o+=1)&&(a.needsUpdate=!0,i&&i(a))},void 0,r)};for(var s=0,l=t.length;s<l;++s)e(s);return a},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},getNormalMap:function(t,e){e|=1;var i=t.width,r=t.height,n=document.createElement("canvas");n.width=i,n.height=r;var a,o,s=n.getContext("2d");s.drawImage(t,0,0);for(var l=s.getImageData(0,0,i,r).data,h=s.createImageData(i,r),c=h.data,u=0;u<i;u++)for(var d=0;d<r;d++){var p=d-1<0?0:d-1,f=r-1<d+1?r-1:d+1,m=u-1<0?0:u-1,g=i-1<u+1?i-1:u+1,E=[],v=[0,0,l[4*(d*i+u)]/255*e];for(E.push([-1,0,l[4*(d*i+m)]/255*e]),E.push([-1,-1,l[4*(p*i+m)]/255*e]),E.push([0,-1,l[4*(p*i+u)]/255*e]),E.push([1,-1,l[4*(p*i+g)]/255*e]),E.push([1,0,l[4*(d*i+g)]/255*e]),E.push([1,1,l[4*(f*i+g)]/255*e]),E.push([0,1,l[4*(f*i+u)]/255*e]),E.push([-1,1,l[4*(f*i+m)]/255*e]),p=[],m=E.length,f=0;f<m;f++){g=E[f];var y=E[(f+1)%m];g=[g[0]-v[0],g[1]-v[1],g[2]-v[2]],y=[y[0]-v[0],y[1]-v[1],y[2]-v[2]];p.push((a=[g[1]*y[2]-g[2]*y[1],g[2]*y[0]-g[0]*y[2],g[0]*y[1]-g[1]*y[0]],void 0,o=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]),[a[0]/o,a[1]/o,a[2]/o]))}for(E=[0,0,0],f=0;f<p.length;f++)E[0]+=p[f][0],E[1]+=p[f][1],E[2]+=p[f][2];E[0]/=p.length,E[1]/=p.length,E[2]/=p.length,c[v=4*(d*i+u)]=(E[0]+1)/2*255|0,c[v+1]=(E[1]+1)/2*255|0,c[v+2]=255*E[2]|0,c[v+3]=255}return s.putImageData(h,0,0),n},generateDataTexture:function(t,e,i){var r=t*e,n=new Uint8Array(3*r),a=Math.floor(255*i.r),o=Math.floor(255*i.g);i=Math.floor(255*i.b);for(var s=0;s<r;s++)n[3*s]=a,n[3*s+1]=o,n[3*s+2]=i;return(t=new THREE.DataTexture(n,t,e,THREE.RGBFormat)).needsUpdate=!0,t}},THREE.SceneUtils={createMultiMaterialObject:function(t,e){for(var i=new THREE.Object3D,r=0,n=e.length;r<n;r++)i.add(new THREE.Mesh(t,e[r]));return i},detach:function(t,e,i){t.applyMatrix(e.matrixWorld),e.remove(t),i.add(t)},attach:function(t,e,i){var r=new THREE.Matrix4;r.getInverse(i.matrixWorld),t.applyMatrix(r),e.remove(t),i.add(t)}},THREE.FontUtils={faces:{},face:"helvetiker",weight:"normal",style:"normal",size:150,divisions:10,getFace:function(){try{return this.faces[this.face][this.weight][this.style]}catch(t){throw"The font "+this.face+" with "+this.weight+" weight and "+this.style+" style is missing."}},loadFace:function(t){var e=t.familyName.toLowerCase();return this.faces[e]=this.faces[e]||{},this.faces[e][t.cssFontWeight]=this.faces[e][t.cssFontWeight]||{},this.faces[e][t.cssFontWeight][t.cssFontStyle]=t,this.faces[e][t.cssFontWeight][t.cssFontStyle]=t},drawText:function(t){var e=this.getFace(),i=this.size/e.resolution,r=0,n=String(t).split(""),a=n.length,o=[];for(t=0;t<a;t++){var s=new THREE.Path;r=r+(s=this.extractGlyphPoints(n[t],e,i,r,s)).offset;o.push(s.path)}return{paths:o,offset:r/2}},extractGlyphPoints:function(t,e,i,r,n){var a,o,s,l,h,c,u,d,p,f,m,g=[],E=e.glyphs[t]||e.glyphs["?"];if(E){if(E.o)for(l=(e=E._cachedOutline||(E._cachedOutline=E.o.split(" "))).length,t=0;t<l;)switch(s=e[t++],s){case"m":s=e[t++]*i+r,h=e[t++]*i,n.moveTo(s,h);break;case"l":s=e[t++]*i+r,h=e[t++]*i,n.lineTo(s,h);break;case"q":if(s=e[t++]*i+r,h=e[t++]*i,d=e[t++]*i+r,p=e[t++]*i,n.quadraticCurveTo(d,p,s,h),a=g[g.length-1])for(c=a.x,u=a.y,a=1,o=this.divisions;a<=o;a++){var v=a/o;THREE.Shape.Utils.b2(v,c,d,s),THREE.Shape.Utils.b2(v,u,p,h)}break;case"b":if(s=e[t++]*i+r,h=e[t++]*i,d=e[t++]*i+r,p=e[t++]*i,f=e[t++]*i+r,m=e[t++]*i,n.bezierCurveTo(d,p,f,m,s,h),a=g[g.length-1])for(c=a.x,u=a.y,a=1,o=this.divisions;a<=o;a++)v=a/o,THREE.Shape.Utils.b3(v,c,d,f,s),THREE.Shape.Utils.b3(v,u,p,m,h)}return{offset:E.ha*i,path:n}}}},THREE.FontUtils.generateShapes=function(t,e){var i=void 0!==(e=e||{}).curveSegments?e.curveSegments:4,r=void 0!==e.font?e.font:"helvetiker",n=void 0!==e.weight?e.weight:"normal",a=void 0!==e.style?e.style:"normal";for(THREE.FontUtils.size=void 0!==e.size?e.size:100,THREE.FontUtils.divisions=i,THREE.FontUtils.face=r,THREE.FontUtils.weight=n,THREE.FontUtils.style=a,r=[],n=0,a=(i=THREE.FontUtils.drawText(t).paths).length;n<a;n++)Array.prototype.push.apply(r,i[n].toShapes());return r},function(t){function M(t){for(var e=t.length,i=0,r=e-1,n=0;n<e;r=n++)i+=t[r].x*t[n].y-t[n].x*t[r].y;return.5*i}t.Triangulate=function(t,e){var i=t.length;if(i<3)return null;var r,n,a,o=[],s=[],l=[];if(0<M(t))for(n=0;n<i;n++)s[n]=n;else for(n=0;n<i;n++)s[n]=i-1-n;var h=2*i;for(n=i-1;2<i;){if(h--<=0){console.log("Warning, unable to triangulate polygon!");break}var c;i<=(r=n)&&(r=0),i<=(n=r+1)&&(n=0),i<=(a=n+1)&&(a=0);t:{var u=c=void 0,d=void 0,p=void 0,f=void 0,m=(u=t[s[r]].x,t[s[r]].y),g=t[s[n]].x,E=t[s[n]].y,v=t[s[a]].x;if((g-u)*((d=t[s[a]].y)-m)-(E-m)*(v-u)<1e-10)c=!1;else{var y=void 0,T=void 0,x=void 0,b=void 0,R=(x=T=y=f=p=void 0,v-g),w=d-E,H=u-v,_=m-d,S=g-u,C=E-m;for(c=0;c<i;c++)if(p=t[s[c]].x,f=t[s[c]].y,!(p===u&&f===m||p===g&&f===E||p===v&&f===d)&&(x=p-g,b=f-E,y=S*(T=f-m)-C*(y=p-u),T=H*(f-=d)-_*(p-=v),-1e-10<=(x=R*b-w*x)&&-1e-10<=T&&-1e-10<=y)){c=!1;break t}c=!0}}if(c){for(o.push([t[s[r]],t[s[n]],t[s[a]]]),l.push([s[r],s[n],s[a]]),a=(r=n)+1;a<i;r++,a++)s[r]=s[a];h=2*--i}}return e?l:o},t.Triangulate.area=M}(THREE.FontUtils),self._typeface_js={faces:THREE.FontUtils.faces,loadFace:THREE.FontUtils.loadFace},THREE.typeface_js=self._typeface_js,THREE.Audio=function(t){THREE.Object3D.call(this),this.type="Audio",this.context=t.context,this.source=this.context.createBufferSource(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.panner=this.context.createPanner(),this.panner.connect(this.gain)},THREE.Audio.prototype=Object.create(THREE.Object3D.prototype),THREE.Audio.prototype.constructor=THREE.Audio,THREE.Audio.prototype.load=function(t){var e=this,i=new XMLHttpRequest;return i.open("GET",t,!0),i.responseType="arraybuffer",i.onload=function(t){e.context.decodeAudioData(this.response,function(t){e.source.buffer=t,e.source.connect(e.panner),e.source.start(0)})},i.send(),this},THREE.Audio.prototype.setLoop=function(t){this.source.loop=t},THREE.Audio.prototype.setRefDistance=function(t){this.panner.refDistance=t},THREE.Audio.prototype.setRolloffFactor=function(t){this.panner.rolloffFactor=t},THREE.Audio.prototype.updateMatrixWorld=function(){var e=new THREE.Vector3;return function(t){THREE.Object3D.prototype.updateMatrixWorld.call(this,t),e.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(e.x,e.y,e.z)}}(),THREE.AudioListener=function(){THREE.Object3D.call(this),this.type="AudioListener",this.context=new(window.AudioContext||window.webkitAudioContext)},THREE.AudioListener.prototype=Object.create(THREE.Object3D.prototype),THREE.AudioListener.prototype.constructor=THREE.AudioListener,THREE.AudioListener.prototype.updateMatrixWorld=function(){var i=new THREE.Vector3,r=new THREE.Quaternion,n=new THREE.Vector3,a=new THREE.Vector3,o=new THREE.Vector3,s=new THREE.Vector3;return function(t){THREE.Object3D.prototype.updateMatrixWorld.call(this,t),t=this.context.listener;var e=this.up;this.matrixWorld.decompose(i,r,n),a.set(0,0,-1).applyQuaternion(r),o.subVectors(i,s),t.setPosition(i.x,i.y,i.z),t.setOrientation(a.x,a.y,a.z,e.x,e.y,e.z),t.setVelocity(o.x,o.y,o.z),s.copy(i)}}(),THREE.Curve=function(){},THREE.Curve.prototype.getPoint=function(t){return console.log("Warning, getPoint() not implemented!"),null},THREE.Curve.prototype.getPointAt=function(t){return t=this.getUtoTmapping(t),this.getPoint(t)},THREE.Curve.prototype.getPoints=function(t){t=t||5;var e,i=[];for(e=0;e<=t;e++)i.push(this.getPoint(e/t));return i},THREE.Curve.prototype.getSpacedPoints=function(t){t=t||5;var e,i=[];for(e=0;e<=t;e++)i.push(this.getPointAt(e/t));return i},THREE.Curve.prototype.getLength=function(){var t=this.getLengths();return t[t.length-1]},THREE.Curve.prototype.getLengths=function(t){if(t=t||(this.__arcLengthDivisions?this.__arcLengthDivisions:200),this.cacheArcLengths&&this.cacheArcLengths.length==t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,i,r=[],n=this.getPoint(0),a=0;for(r.push(0),i=1;i<=t;i++)a+=(e=this.getPoint(i/t)).distanceTo(n),r.push(a),n=e;return this.cacheArcLengths=r},THREE.Curve.prototype.updateArcLengths=function(){this.needsUpdate=!0,this.getLengths()},THREE.Curve.prototype.getUtoTmapping=function(t,e){var i,r=this.getLengths(),n=0,a=r.length;i=e||t*r[a-1];for(var o,s=0,l=a-1;s<=l;)if((o=r[n=Math.floor(s+(l-s)/2)]-i)<0)s=n+1;else{if(!(0<o)){l=n;break}l=n-1}return r[n=l]==i?n/(a-1):(n+(i-(s=r[n]))/(r[n+1]-s))/(a-1)},THREE.Curve.prototype.getTangent=function(t){var e=t-1e-4;return e<0&&(e=0),1<(t+=1e-4)&&(t=1),e=this.getPoint(e),this.getPoint(t).clone().sub(e).normalize()},THREE.Curve.prototype.getTangentAt=function(t){return t=this.getUtoTmapping(t),this.getTangent(t)},THREE.Curve.Utils={tangentQuadraticBezier:function(t,e,i,r){return 2*(1-t)*(i-e)+2*t*(r-i)},tangentCubicBezier:function(t,e,i,r,n){return-3*e*(1-t)*(1-t)+3*i*(1-t)*(1-t)-6*t*i*(1-t)+6*t*r*(1-t)-3*t*t*r+3*t*t*n},tangentSpline:function(t,e,i,r,n){return 6*t*t-6*t+(3*t*t-4*t+1)+(-6*t*t+6*t)+(3*t*t-2*t)},interpolate:function(t,e,i,r,n){var a=n*n;return(2*e-2*i+(t=.5*(i-t))+(r=.5*(r-e)))*n*a+(-3*e+3*i-2*t-r)*a+t*n+e}},THREE.Curve.create=function(t,e){return t.prototype=Object.create(THREE.Curve.prototype),(t.prototype.constructor=t).prototype.getPoint=e,t},THREE.CurvePath=function(){this.curves=[],this.bends=[],this.autoClose=!1},THREE.CurvePath.prototype=Object.create(THREE.Curve.prototype),THREE.CurvePath.prototype.constructor=THREE.CurvePath,THREE.CurvePath.prototype.add=function(t){this.curves.push(t)},THREE.CurvePath.prototype.checkConnection=function(){},THREE.CurvePath.prototype.closePath=function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new THREE.LineCurve(e,t))},THREE.CurvePath.prototype.getPoint=function(t){var e=t*this.getLength(),i=this.getCurveLengths();for(t=0;t<i.length;){if(i[t]>=e)return e=1-(e=i[t]-e)/(t=this.curves[t]).getLength(),t.getPointAt(e);t++}return null},THREE.CurvePath.prototype.getLength=function(){var t=this.getCurveLengths();return t[t.length-1]},THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length==this.curves.length)return this.cacheLengths;var t,e=[],i=0,r=this.curves.length;for(t=0;t<r;t++)i+=this.curves[t].getLength(),e.push(i);return this.cacheLengths=e},THREE.CurvePath.prototype.getBoundingBox=function(){var t,e,i,r,n,a,o=this.getPoints();t=e=Number.NEGATIVE_INFINITY,r=n=Number.POSITIVE_INFINITY;var s,l,h,c,u=o[0]instanceof THREE.Vector3;for(c=u?new THREE.Vector3:new THREE.Vector2,l=0,h=o.length;l<h;l++)(s=o[l]).x>t?t=s.x:s.x<r&&(r=s.x),s.y>e?e=s.y:s.y<n&&(n=s.y),u&&(s.z>i?i=s.z:s.z<a&&(a=s.z)),c.add(s);return o={minX:r,minY:n,maxX:t,maxY:e},u&&(o.maxZ=i,o.minZ=a),o},THREE.CurvePath.prototype.createPointsGeometry=function(t){return t=this.getPoints(t,!0),this.createGeometry(t)},THREE.CurvePath.prototype.createSpacedPointsGeometry=function(t){return t=this.getSpacedPoints(t,!0),this.createGeometry(t)},THREE.CurvePath.prototype.createGeometry=function(t){for(var e=new THREE.Geometry,i=0;i<t.length;i++)e.vertices.push(new THREE.Vector3(t[i].x,t[i].y,t[i].z||0));return e},THREE.CurvePath.prototype.addWrapPath=function(t){this.bends.push(t)},THREE.CurvePath.prototype.getTransformedPoints=function(t,e){var i,r,n=this.getPoints(t);for(i=0,r=(e=e||this.bends).length;i<r;i++)n=this.getWrapPoints(n,e[i]);return n},THREE.CurvePath.prototype.getTransformedSpacedPoints=function(t,e){var i,r,n=this.getSpacedPoints(t);for(i=0,r=(e=e||this.bends).length;i<r;i++)n=this.getWrapPoints(n,e[i]);return n},THREE.CurvePath.prototype.getWrapPoints=function(t,e){var i,r,n,a,o,s,l=this.getBoundingBox();for(i=0,r=t.length;i<r;i++)a=(n=t[i]).x,o=n.y,s=a/l.maxX,s=e.getUtoTmapping(s,a),a=e.getPoint(s),(s=e.getTangent(s)).set(-s.y,s.x).multiplyScalar(o),n.x=a.x+s.x,n.y=a.y+s.y;return t},THREE.Gyroscope=function(){THREE.Object3D.call(this)},THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype),THREE.Gyroscope.prototype.constructor=THREE.Gyroscope,THREE.Gyroscope.prototype.updateMatrixWorld=function(){var r=new THREE.Vector3,n=new THREE.Quaternion,a=new THREE.Vector3,o=new THREE.Vector3,s=new THREE.Quaternion,l=new THREE.Vector3;return function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(o,s,l),this.matrix.decompose(r,n,a),this.matrixWorld.compose(o,n,l)):this.matrixWorld.copy(this.matrix),t=!(this.matrixWorldNeedsUpdate=!1));for(var e=0,i=this.children.length;e<i;e++)this.children[e].updateMatrixWorld(t)}}(),THREE.Path=function(t){THREE.CurvePath.call(this),this.actions=[],t&&this.fromPoints(t)},THREE.Path.prototype=Object.create(THREE.CurvePath.prototype),THREE.Path.prototype.constructor=THREE.Path,THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc",ELLIPSE:"ellipse"},THREE.Path.prototype.fromPoints=function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y)},THREE.Path.prototype.moveTo=function(t,e){var i=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:i})},THREE.Path.prototype.lineTo=function(t,e){var i=Array.prototype.slice.call(arguments),r=this.actions[this.actions.length-1].args;r=new THREE.LineCurve(new THREE.Vector2(r[r.length-2],r[r.length-1]),new THREE.Vector2(t,e));this.curves.push(r),this.actions.push({action:THREE.PathActions.LINE_TO,args:i})},THREE.Path.prototype.quadraticCurveTo=function(t,e,i,r){var n=Array.prototype.slice.call(arguments),a=this.actions[this.actions.length-1].args;a=new THREE.QuadraticBezierCurve(new THREE.Vector2(a[a.length-2],a[a.length-1]),new THREE.Vector2(t,e),new THREE.Vector2(i,r));this.curves.push(a),this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:n})},THREE.Path.prototype.bezierCurveTo=function(t,e,i,r,n,a){var o=Array.prototype.slice.call(arguments),s=this.actions[this.actions.length-1].args;s=new THREE.CubicBezierCurve(new THREE.Vector2(s[s.length-2],s[s.length-1]),new THREE.Vector2(t,e),new THREE.Vector2(i,r),new THREE.Vector2(n,a));this.curves.push(s),this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:o})},THREE.Path.prototype.splineThru=function(t){var e=Array.prototype.slice.call(arguments),i=this.actions[this.actions.length-1].args;i=[new THREE.Vector2(i[i.length-2],i[i.length-1])];Array.prototype.push.apply(i,t),i=new THREE.SplineCurve(i),this.curves.push(i),this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:e})},THREE.Path.prototype.arc=function(t,e,i,r,n,a){var o=this.actions[this.actions.length-1].args;this.absarc(t+o[o.length-2],e+o[o.length-1],i,r,n,a)},THREE.Path.prototype.absarc=function(t,e,i,r,n,a){this.absellipse(t,e,i,i,r,n,a)},THREE.Path.prototype.ellipse=function(t,e,i,r,n,a,o){var s=this.actions[this.actions.length-1].args;this.absellipse(t+s[s.length-2],e+s[s.length-1],i,r,n,a,o)},THREE.Path.prototype.absellipse=function(t,e,i,r,n,a,o){var s=Array.prototype.slice.call(arguments),l=new THREE.EllipseCurve(t,e,i,r,n,a,o);this.curves.push(l),l=l.getPoint(1),s.push(l.x),s.push(l.y),this.actions.push({action:THREE.PathActions.ELLIPSE,args:s})},THREE.Path.prototype.getSpacedPoints=function(t,e){t=t||40;for(var i=[],r=0;r<t;r++)i.push(this.getPoint(r/t));return i},THREE.Path.prototype.getPoints=function(t,e){if(this.useSpacedPoints)return console.log("tata"),this.getSpacedPoints(t,e);t=t||12;var i,r,n,a,o,s,l,h,c,u,d,p,f,m=[];for(i=0,r=this.actions.length;i<r;i++)switch(n=this.actions[i],a=n.action,n=n.args,a){case THREE.PathActions.MOVE_TO:case THREE.PathActions.LINE_TO:m.push(new THREE.Vector2(n[0],n[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:for(o=n[2],s=n[3],c=n[0],u=n[1],p=0<m.length?(d=(a=m[m.length-1]).x,a.y):(d=(a=this.actions[i-1].args)[a.length-2],a[a.length-1]),n=1;n<=t;n++)f=n/t,a=THREE.Shape.Utils.b2(f,d,c,o),f=THREE.Shape.Utils.b2(f,p,u,s),m.push(new THREE.Vector2(a,f));break;case THREE.PathActions.BEZIER_CURVE_TO:for(o=n[4],s=n[5],c=n[0],u=n[1],l=n[2],h=n[3],p=0<m.length?(d=(a=m[m.length-1]).x,a.y):(d=(a=this.actions[i-1].args)[a.length-2],a[a.length-1]),n=1;n<=t;n++)f=n/t,a=THREE.Shape.Utils.b3(f,d,c,l,o),f=THREE.Shape.Utils.b3(f,p,u,h,s),m.push(new THREE.Vector2(a,f));break;case THREE.PathActions.CSPLINE_THRU:for(a=this.actions[i-1].args,f=[new THREE.Vector2(a[a.length-2],a[a.length-1])],a=t*n[0].length,f=f.concat(n[0]),f=new THREE.SplineCurve(f),n=1;n<=a;n++)m.push(f.getPointAt(n/a));break;case THREE.PathActions.ARC:for(o=n[0],s=n[1],u=n[2],l=n[3],a=n[4],c=!!n[5],d=a-l,p=2*t,n=1;n<=p;n++)f=n/p,c||(f=1-f),f=l+f*d,a=o+u*Math.cos(f),f=s+u*Math.sin(f),m.push(new THREE.Vector2(a,f));break;case THREE.PathActions.ELLIPSE:for(o=n[0],s=n[1],u=n[2],h=n[3],l=n[4],a=n[5],c=!!n[6],d=a-l,p=2*t,n=1;n<=p;n++)f=n/p,c||(f=1-f),f=l+f*d,a=o+u*Math.cos(f),f=s+h*Math.sin(f),m.push(new THREE.Vector2(a,f))}return i=m[m.length-1],Math.abs(i.x-m[0].x)<1e-10&&Math.abs(i.y-m[0].y)<1e-10&&m.splice(m.length-1,1),e&&m.push(m[0]),m},THREE.Path.prototype.toShapes=function(t,e){function i(t){for(var e=[],i=0,r=t.length;i<r;i++){var n=t[i],a=new THREE.Shape;a.actions=n.actions,a.curves=n.curves,e.push(a)}return e}function r(t,e){for(var i=e.length,r=!1,n=i-1,a=0;a<i;n=a++){var o=e[n],s=e[a],l=s.x-o.x,h=s.y-o.y;if(1e-10<Math.abs(h)){if(h<0&&(o=e[a],l=-l,s=e[n],h=-h),!(t.y<o.y||t.y>s.y))if(t.y==o.y){if(t.x==o.x)return!0}else{if(0==(n=h*(t.x-o.x)-l*(t.y-o.y)))return!0;n<0||(r=!r)}}else if(t.y==o.y&&(s.x<=t.x&&t.x<=o.x||o.x<=t.x&&t.x<=s.x))return!0}return r}var n=function(t){var e,i,r,n,a=[],o=new THREE.Path;for(e=0,i=t.length;e<i;e++)n=(r=t[e]).args,(r=r.action)==THREE.PathActions.MOVE_TO&&0!=o.actions.length&&(a.push(o),o=new THREE.Path),o[r].apply(o,n);return 0!=o.actions.length&&a.push(o),a}(this.actions);if(0==n.length)return[];if(!0===e)return i(n);var a,o,s,l=[];if(1==n.length)return o=n[0],(s=new THREE.Shape).actions=o.actions,s.curves=o.curves,l.push(s),l;var h=!THREE.Shape.Utils.isClockWise(n[0].getPoints());h=t?!h:h;s=[];var c,u,d,p=[],f=[],m=0;for(p[m]=void 0,f[m]=[],u=0,d=n.length;u<d;u++)c=(o=n[u]).getPoints(),a=THREE.Shape.Utils.isClockWise(c),(a=t?!a:a)?(!h&&p[m]&&m++,p[m]={s:new THREE.Shape,p:c},p[m].s.actions=o.actions,p[m].s.curves=o.curves,h&&m++,f[m]=[]):f[m].push({h:o,p:c[0]});if(!p[0])return i(n);if(1<p.length){for(u=!1,d=[],o=0,n=p.length;o<n;o++)s[o]=[];for(o=0,n=p.length;o<n;o++)for(a=f[o],h=0;h<a.length;h++){m=a[h],c=!0;for(var g=0;g<p.length;g++)r(m.p,p[g].p)&&(o!=g&&d.push({froms:o,tos:g,hole:h}),c?(c=!1,s[g].push(m)):u=!0);c&&s[o].push(m)}0<d.length&&(u||(f=s))}for(u=0,d=p.length;u<d;u++)for(s=p[u].s,l.push(s),n=0,a=(o=f[u]).length;n<a;n++)s.holes.push(o[n].h);return l},THREE.Shape=function(){THREE.Path.apply(this,arguments),this.holes=[]},THREE.Shape.prototype=Object.create(THREE.Path.prototype),THREE.Shape.prototype.constructor=THREE.Shape,THREE.Shape.prototype.extrude=function(t){return new THREE.ExtrudeGeometry(this,t)},THREE.Shape.prototype.makeGeometry=function(t){return new THREE.ShapeGeometry(this,t)},THREE.Shape.prototype.getPointsHoles=function(t){var e,i=this.holes.length,r=[];for(e=0;e<i;e++)r[e]=this.holes[e].getTransformedPoints(t,this.bends);return r},THREE.Shape.prototype.getSpacedPointsHoles=function(t){var e,i=this.holes.length,r=[];for(e=0;e<i;e++)r[e]=this.holes[e].getTransformedSpacedPoints(t,this.bends);return r},THREE.Shape.prototype.extractAllPoints=function(t){return{shape:this.getTransformedPoints(t),holes:this.getPointsHoles(t)}},THREE.Shape.prototype.extractPoints=function(t){return this.useSpacedPoints?this.extractAllSpacedPoints(t):this.extractAllPoints(t)},THREE.Shape.prototype.extractAllSpacedPoints=function(t){return{shape:this.getTransformedSpacedPoints(t),holes:this.getSpacedPointsHoles(t)}},THREE.Shape.Utils={triangulateShape:function(y,t){function p(t,e,i){return t.x!=e.x?t.x<e.x?t.x<=i.x&&i.x<=e.x:e.x<=i.x&&i.x<=t.x:t.y<e.y?t.y<=i.y&&i.y<=e.y:e.y<=i.y&&i.y<=t.y}function T(t,e,i,r,n){var a=e.x-t.x,o=e.y-t.y,s=r.x-i.x,l=r.y-i.y,h=t.x-i.x,c=t.y-i.y,u=o*s-a*l,d=o*h-a*c;if(1e-10<Math.abs(u)){if(0<u){if(d<0||u<d)return[];if((s=l*h-s*c)<0||u<s)return[]}else{if(0<d||d<u)return[];if(0<(s=l*h-s*c)||s<u)return[]}return 0==s?!n||0!=d&&d!=u?[t]:[]:s==u?!n||0!=d&&d!=u?[e]:[]:0==d?[i]:d==u?[r]:(n=s/u,[{x:t.x+n*a,y:t.y+n*o}])}return 0!=d||l*h!=s*c?[]:(s=0==s&&0==l,(o=0==a&&0==o)&&s?t.x!=i.x||t.y!=i.y?[]:[t]:o?p(i,r,t)?[t]:[]:s?p(t,e,i)?[i]:[]:(i=0!=a?(t=t.x<e.x?(s=(a=t).x,(o=e).x):(s=(a=e).x,(o=t).x),i.x<r.x?(u=(e=i).x,(l=r).x):(u=(e=r).x,(l=i).x)):(t=t.y<e.y?(s=(a=t).y,(o=e).y):(s=(a=e).y,(o=t).y),i.y<r.y?(u=(e=i).y,(l=r).y):(u=(e=r).y,(l=i).y)),s<=u?t<u?[]:t==u?n?[]:[e]:t<=i?[e,o]:[e,l]:i<s?[]:s==i?n?[]:[a]:t<=i?[a,o]:[a,l]))}function x(t,e,i,r){var n=e.x-t.x,a=e.y-t.y;e=i.x-t.x,i=i.y-t.y;var o=r.x-t.x;return r=r.y-t.y,t=n*i-a*e,n=n*r-a*o,1e-10<Math.abs(t)?(e=o*i-r*e,0<t?0<=n&&0<=e:0<=n||0<=e):0<n}var e,i,r,n,a,o={};for(r=y.concat(),e=0,i=t.length;e<i;e++)Array.prototype.push.apply(r,t[e]);for(e=0,i=r.length;e<i;e++)void 0!==o[a=r[e].x+":"+r[e].y]&&console.log("Duplicate point",a),o[a]=e;e=function(t,o){function e(t,e){var i=f.length-1,r=t-1;r<0&&(r=i);var n=t+1;return i<n&&(n=0),!!(i=x(f[t],f[r],f[n],a[e]))&&(i=a.length-1,(r=e-1)<0&&(r=i),i<(n=e+1)&&(n=0),!!(i=x(a[e],a[r],a[n],f[t])))}function i(t,e){var i,r;for(i=0;i<f.length;i++)if(r=i+1,r%=f.length,0<(r=T(t,e,f[i],f[r],!0)).length)return!0;return!1}function r(t,e){var i,r,n,a;for(i=0;i<m.length;i++)for(r=o[m[i]],n=0;n<r.length;n++)if(a=n+1,a%=r.length,0<(a=T(t,e,r[n],r[a],!0)).length)return!0;return!1}var a,n,s,l,h,c,u,d,p,f=y.concat(),m=[],g=[],E=0;for(n=o.length;E<n;E++)m.push(E);u=0;for(var v=2*m.length;0<m.length;){if(--v<0){console.log("Infinite Loop! Holes left:"+m.length+", Probably Hole outside Shape!");break}for(s=u;s<f.length;s++){for(l=f[s],n=-1,E=0;E<m.length;E++)if(h=m[E],void 0===g[c=l.x+":"+l.y+":"+h]){for(a=o[h],d=0;d<a.length;d++)if(h=a[d],e(s,d)&&!i(l,h)&&!r(l,h)){n=d,m.splice(E,1),u=f.slice(0,s+1),h=f.slice(s),d=a.slice(n),p=a.slice(0,n+1),f=u.concat(d).concat(p).concat(h),u=s;break}if(0<=n)break;g[c]=!0}if(0<=n)break}}return f}(0,t);var s=THREE.FontUtils.Triangulate(e,!1);for(e=0,i=s.length;e<i;e++)for(n=s[e],r=0;r<3;r++)void 0!==(a=o[a=n[r].x+":"+n[r].y])&&(n[r]=a);return s.concat()},isClockWise:function(t){return THREE.FontUtils.Triangulate.area(t)<0},b2p0:function(t,e){var i=1-t;return i*i*e},b2p1:function(t,e){return 2*(1-t)*t*e},b2p2:function(t,e){return t*t*e},b2:function(t,e,i,r){return this.b2p0(t,e)+this.b2p1(t,i)+this.b2p2(t,r)},b3p0:function(t,e){var i=1-t;return i*i*i*e},b3p1:function(t,e){var i=1-t;return 3*i*i*t*e},b3p2:function(t,e){return 3*(1-t)*t*t*e},b3p3:function(t,e){return t*t*t*e},b3:function(t,e,i,r,n){return this.b3p0(t,e)+this.b3p1(t,i)+this.b3p2(t,r)+this.b3p3(t,n)}},THREE.LineCurve=function(t,e){this.v1=t,this.v2=e},THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype),THREE.LineCurve.prototype.constructor=THREE.LineCurve,THREE.LineCurve.prototype.getPoint=function(t){var e=this.v2.clone().sub(this.v1);return e.multiplyScalar(t).add(this.v1),e},THREE.LineCurve.prototype.getPointAt=function(t){return this.getPoint(t)},THREE.LineCurve.prototype.getTangent=function(t){return this.v2.clone().sub(this.v1).normalize()},THREE.QuadraticBezierCurve=function(t,e,i){this.v0=t,this.v1=e,this.v2=i},THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype),THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve,THREE.QuadraticBezierCurve.prototype.getPoint=function(t){var e=new THREE.Vector2;return e.x=THREE.Shape.Utils.b2(t,this.v0.x,this.v1.x,this.v2.x),e.y=THREE.Shape.Utils.b2(t,this.v0.y,this.v1.y,this.v2.y),e},THREE.QuadraticBezierCurve.prototype.getTangent=function(t){var e=new THREE.Vector2;return e.x=THREE.Curve.Utils.tangentQuadraticBezier(t,this.v0.x,this.v1.x,this.v2.x),e.y=THREE.Curve.Utils.tangentQuadraticBezier(t,this.v0.y,this.v1.y,this.v2.y),e.normalize()},THREE.CubicBezierCurve=function(t,e,i,r){this.v0=t,this.v1=e,this.v2=i,this.v3=r},THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype),THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve,THREE.CubicBezierCurve.prototype.getPoint=function(t){var e;return e=THREE.Shape.Utils.b3(t,this.v0.x,this.v1.x,this.v2.x,this.v3.x),t=THREE.Shape.Utils.b3(t,this.v0.y,this.v1.y,this.v2.y,this.v3.y),new THREE.Vector2(e,t)},THREE.CubicBezierCurve.prototype.getTangent=function(t){var e;return e=THREE.Curve.Utils.tangentCubicBezier(t,this.v0.x,this.v1.x,this.v2.x,this.v3.x),t=THREE.Curve.Utils.tangentCubicBezier(t,this.v0.y,this.v1.y,this.v2.y,this.v3.y),(e=new THREE.Vector2(e,t)).normalize(),e},THREE.SplineCurve=function(t){this.points=null==t?[]:t},THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype),THREE.SplineCurve.prototype.constructor=THREE.SplineCurve,THREE.SplineCurve.prototype.getPoint=function(t){t*=(a=this.points).length-1,t-=e=Math.floor(t);var e,i=a[0==e?e:e-1],r=a[e],n=a[e>a.length-2?a.length-1:e+1],a=a[e>a.length-3?a.length-1:e+2];return(e=new THREE.Vector2).x=THREE.Curve.Utils.interpolate(i.x,r.x,n.x,a.x,t),e.y=THREE.Curve.Utils.interpolate(i.y,r.y,n.y,a.y,t),e},THREE.EllipseCurve=function(t,e,i,r,n,a,o){this.aX=t,this.aY=e,this.xRadius=i,this.yRadius=r,this.aStartAngle=n,this.aEndAngle=a,this.aClockwise=o},THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype),THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve,THREE.EllipseCurve.prototype.getPoint=function(t){var e=this.aEndAngle-this.aStartAngle;return e<0&&(e+=2*Math.PI),e>2*Math.PI&&(e-=2*Math.PI),t=!0===this.aClockwise?this.aEndAngle+(1-t)*(2*Math.PI-e):this.aStartAngle+t*e,(e=new THREE.Vector2).x=this.aX+this.xRadius*Math.cos(t),e.y=this.aY+this.yRadius*Math.sin(t),e},THREE.ArcCurve=function(t,e,i,r,n,a){THREE.EllipseCurve.call(this,t,e,i,i,r,n,a)},THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype),THREE.ArcCurve.prototype.constructor=THREE.ArcCurve,THREE.LineCurve3=THREE.Curve.create(function(t,e){this.v1=t,this.v2=e},function(t){var e=new THREE.Vector3;return e.subVectors(this.v2,this.v1),e.multiplyScalar(t),e.add(this.v1),e}),THREE.QuadraticBezierCurve3=THREE.Curve.create(function(t,e,i){this.v0=t,this.v1=e,this.v2=i},function(t){var e=new THREE.Vector3;return e.x=THREE.Shape.Utils.b2(t,this.v0.x,this.v1.x,this.v2.x),e.y=THREE.Shape.Utils.b2(t,this.v0.y,this.v1.y,this.v2.y),e.z=THREE.Shape.Utils.b2(t,this.v0.z,this.v1.z,this.v2.z),e}),THREE.CubicBezierCurve3=THREE.Curve.create(function(t,e,i,r){this.v0=t,this.v1=e,this.v2=i,this.v3=r},function(t){var e=new THREE.Vector3;return e.x=THREE.Shape.Utils.b3(t,this.v0.x,this.v1.x,this.v2.x,this.v3.x),e.y=THREE.Shape.Utils.b3(t,this.v0.y,this.v1.y,this.v2.y,this.v3.y),e.z=THREE.Shape.Utils.b3(t,this.v0.z,this.v1.z,this.v2.z,this.v3.z),e}),THREE.SplineCurve3=THREE.Curve.create(function(t){this.points=null==t?[]:t},function(t){t*=(a=this.points).length-1,t-=e=Math.floor(t);var e,i=a[0==e?e:e-1],r=a[e],n=a[e>a.length-2?a.length-1:e+1],a=a[e>a.length-3?a.length-1:e+2];return(e=new THREE.Vector3).x=THREE.Curve.Utils.interpolate(i.x,r.x,n.x,a.x,t),e.y=THREE.Curve.Utils.interpolate(i.y,r.y,n.y,a.y,t),e.z=THREE.Curve.Utils.interpolate(i.z,r.z,n.z,a.z,t),e}),THREE.ClosedSplineCurve3=THREE.Curve.create(function(t){this.points=null==t?[]:t},function(t){t*=(a=this.points).length-0,t-=e=Math.floor(t);var e,i=a[((e=e+(0<e?0:(Math.floor(Math.abs(e)/a.length)+1)*a.length))-1)%a.length],r=a[e%a.length],n=a[(e+1)%a.length],a=a[(e+2)%a.length];return(e=new THREE.Vector3).x=THREE.Curve.Utils.interpolate(i.x,r.x,n.x,a.x,t),e.y=THREE.Curve.Utils.interpolate(i.y,r.y,n.y,a.y,t),e.z=THREE.Curve.Utils.interpolate(i.z,r.z,n.z,a.z,t),e}),THREE.AnimationHandler={LINEAR:0,CATMULLROM:1,CATMULLROM_FORWARD:2,add:function(){console.warn("THREE.AnimationHandler.add() has been deprecated.")},get:function(){console.warn("THREE.AnimationHandler.get() has been deprecated.")},remove:function(){console.warn("THREE.AnimationHandler.remove() has been deprecated.")},animations:[],init:function(t){if(!0===t.initialized)return t;for(var e=0;e<t.hierarchy.length;e++){for(var i=0;i<t.hierarchy[e].keys.length;i++)if(t.hierarchy[e].keys[i].time<0&&(t.hierarchy[e].keys[i].time=0),void 0!==t.hierarchy[e].keys[i].rot&&!(t.hierarchy[e].keys[i].rot instanceof THREE.Quaternion)){var r=t.hierarchy[e].keys[i].rot;t.hierarchy[e].keys[i].rot=(new THREE.Quaternion).fromArray(r)}if(t.hierarchy[e].keys.length&&void 0!==t.hierarchy[e].keys[0].morphTargets){for(r={},i=0;i<t.hierarchy[e].keys.length;i++)for(var n=0;n<t.hierarchy[e].keys[i].morphTargets.length;n++){var a=t.hierarchy[e].keys[i].morphTargets[n];r[a]=-1}for(t.hierarchy[e].usedMorphTargets=r,i=0;i<t.hierarchy[e].keys.length;i++){var o={};for(a in r){for(n=0;n<t.hierarchy[e].keys[i].morphTargets.length;n++)if(t.hierarchy[e].keys[i].morphTargets[n]===a){o[a]=t.hierarchy[e].keys[i].morphTargetsInfluences[n];break}n===t.hierarchy[e].keys[i].morphTargets.length&&(o[a]=0)}t.hierarchy[e].keys[i].morphTargetsInfluences=o}}for(i=1;i<t.hierarchy[e].keys.length;i++)t.hierarchy[e].keys[i].time===t.hierarchy[e].keys[i-1].time&&(t.hierarchy[e].keys.splice(i,1),i--);for(i=0;i<t.hierarchy[e].keys.length;i++)t.hierarchy[e].keys[i].index=i}return t.initialized=!0,t},parse:function(t){var r=function(t,e){e.push(t);for(var i=0;i<t.children.length;i++)r(t.children[i],e)},e=[];if(t instanceof THREE.SkinnedMesh)for(var i=0;i<t.skeleton.bones.length;i++)e.push(t.skeleton.bones[i]);else r(t,e);return e},play:function(t){-1===this.animations.indexOf(t)&&this.animations.push(t)},stop:function(t){-1!==(t=this.animations.indexOf(t))&&this.animations.splice(t,1)},update:function(t){for(var e=0;e<this.animations.length;e++)this.animations[e].resetBlendWeights();for(e=0;e<this.animations.length;e++)this.animations[e].update(t)}},THREE.Animation=function(t,e){this.root=t,this.data=THREE.AnimationHandler.init(e),this.hierarchy=THREE.AnimationHandler.parse(t),this.currentTime=0,this.timeScale=1,this.isPlaying=!1,this.loop=!0,this.weight=0,this.interpolationType=THREE.AnimationHandler.LINEAR},THREE.Animation.prototype.keyTypes=["pos","rot","scl"],THREE.Animation.prototype.play=function(t,e){this.currentTime=void 0!==t?t:0,this.weight=void 0!==e?e:1,this.isPlaying=!0,this.reset(),THREE.AnimationHandler.play(this)},THREE.Animation.prototype.stop=function(){this.isPlaying=!1,THREE.AnimationHandler.stop(this)},THREE.Animation.prototype.reset=function(){for(var t=0,e=this.hierarchy.length;t<e;t++){void 0===(i=this.hierarchy[t]).animationCache&&(i.animationCache={animations:{},blending:{positionWeight:0,quaternionWeight:0,scaleWeight:0}}),void 0===i.animationCache.animations[this.data.name]&&(i.animationCache.animations[this.data.name]={},i.animationCache.animations[this.data.name].prevKey={pos:0,rot:0,scl:0},i.animationCache.animations[this.data.name].nextKey={pos:0,rot:0,scl:0},i.animationCache.animations[this.data.name].originalMatrix=i.matrix);for(var i=i.animationCache.animations[this.data.name],r=0;r<3;r++){for(var n=this.keyTypes[r],a=this.data.hierarchy[t].keys[0],o=this.getNextKeyWith(n,t,1);o.time<this.currentTime&&o.index>a.index;)a=o,o=this.getNextKeyWith(n,t,o.index+1);i.prevKey[n]=a,i.nextKey[n]=o}}},THREE.Animation.prototype.resetBlendWeights=function(){for(var t=0,e=this.hierarchy.length;t<e;t++){var i=this.hierarchy[t];void 0!==i.animationCache&&(i.animationCache.blending.positionWeight=0,i.animationCache.blending.quaternionWeight=0,i.animationCache.blending.scaleWeight=0)}},THREE.Animation.prototype.update=function(){function d(t,e){var i,r,n,a,o,s,l=[],h=[];return i=(t.length-1)*e,i-=r=Math.floor(i),l[0]=0===r?r:r-1,l[1]=r,l[2]=r>t.length-2?r:r+1,l[3]=r>t.length-3?r:r+2,r=t[l[0]],a=t[l[1]],o=t[l[2]],s=t[l[3]],n=i*(l=i*i),h[0]=c(r[0],a[0],o[0],s[0],i,l,n),h[1]=c(r[1],a[1],o[1],s[1],i,l,n),h[2]=c(r[2],a[2],o[2],s[2],i,l,n),h}var p=[],f=new THREE.Vector3,m=new THREE.Vector3,g=new THREE.Quaternion,c=function(t,e,i,r,n,a,o){return(2*(e-i)+(t=.5*(i-t))+(r=.5*(r-e)))*o+(-3*(e-i)-2*t-r)*a+t*n+e};return function(t){if(!1!==this.isPlaying&&(this.currentTime+=t*this.timeScale,0!==this.weight)){t=this.data.length,(this.currentTime>t||this.currentTime<0)&&(this.loop?(this.currentTime%=t,this.currentTime<0&&(this.currentTime+=t),this.reset()):this.stop()),t=0;for(var e=this.hierarchy.length;t<e;t++)for(var i=this.hierarchy[t],r=i.animationCache.animations[this.data.name],n=i.animationCache.blending,a=0;a<3;a++){var o=this.keyTypes[a],s=r.prevKey[o],l=r.nextKey[o];if(0<this.timeScale&&l.time<=this.currentTime||this.timeScale<0&&s.time>=this.currentTime){for(s=this.data.hierarchy[t].keys[0],l=this.getNextKeyWith(o,t,1);l.time<this.currentTime&&l.index>s.index;)s=l,l=this.getNextKeyWith(o,t,l.index+1);r.prevKey[o]=s,r.nextKey[o]=l}var h=(this.currentTime-s.time)/(l.time-s.time),c=s[o],u=l[o];h<0&&(h=0),1<h&&(h=1),"pos"===o?this.interpolationType===THREE.AnimationHandler.LINEAR?(m.x=c[0]+(u[0]-c[0])*h,m.y=c[1]+(u[1]-c[1])*h,m.z=c[2]+(u[2]-c[2])*h,s=this.weight/(this.weight+n.positionWeight),i.position.lerp(m,s),n.positionWeight+=this.weight):this.interpolationType!==THREE.AnimationHandler.CATMULLROM&&this.interpolationType!==THREE.AnimationHandler.CATMULLROM_FORWARD||(p[0]=this.getPrevKeyWith("pos",t,s.index-1).pos,p[1]=c,p[2]=u,p[3]=this.getNextKeyWith("pos",t,l.index+1).pos,l=d(p,h=.33*h+.33),s=this.weight/(this.weight+n.positionWeight),n.positionWeight+=this.weight,(o=i.position).x+=(l[0]-o.x)*s,o.y+=(l[1]-o.y)*s,o.z+=(l[2]-o.z)*s,this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD&&(h=d(p,1.01*h),f.set(h[0],h[1],h[2]),f.sub(o),f.y=0,f.normalize(),h=Math.atan2(f.x,f.z),i.rotation.set(0,h,0))):"rot"===o?(THREE.Quaternion.slerp(c,u,g,h),0===n.quaternionWeight?(i.quaternion.copy(g),n.quaternionWeight=this.weight):(s=this.weight/(this.weight+n.quaternionWeight),THREE.Quaternion.slerp(i.quaternion,g,i.quaternion,s),n.quaternionWeight+=this.weight)):"scl"===o&&(m.x=c[0]+(u[0]-c[0])*h,m.y=c[1]+(u[1]-c[1])*h,m.z=c[2]+(u[2]-c[2])*h,s=this.weight/(this.weight+n.scaleWeight),i.scale.lerp(m,s),n.scaleWeight+=this.weight)}return!0}}}(),THREE.Animation.prototype.getNextKeyWith=function(t,e,i){var r=this.data.hierarchy[e].keys;for(i=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?i<r.length-1?i:r.length-1:i%r.length;i<r.length;i++)if(void 0!==r[i][t])return r[i];return this.data.hierarchy[e].keys[0]},THREE.Animation.prototype.getPrevKeyWith=function(t,e,i){var r=this.data.hierarchy[e].keys;for(i=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?0<i?i:0:0<=i?i:i+r.length;0<=i;i--)if(void 0!==r[i][t])return r[i];return this.data.hierarchy[e].keys[r.length-1]},THREE.KeyFrameAnimation=function(t){this.root=t.node,this.data=THREE.AnimationHandler.init(t),this.hierarchy=THREE.AnimationHandler.parse(this.root),this.currentTime=0,this.timeScale=.001,this.isPlaying=!1,this.loop=this.isPaused=!0,t=0;for(var e=this.hierarchy.length;t<e;t++){var i=this.data.hierarchy[t].sids,r=this.hierarchy[t];if(this.data.hierarchy[t].keys.length&&i){for(var n=0;n<i.length;n++){var a=i[n],o=this.getNextKeyWith(a,t,0);o&&o.apply(a)}r.matrixAutoUpdate=!1,this.data.hierarchy[t].node.updateMatrix(),r.matrixWorldNeedsUpdate=!0}}},THREE.KeyFrameAnimation.prototype.play=function(t){if(this.currentTime=void 0!==t?t:0,!1===this.isPlaying){this.isPlaying=!0;var e,i,r=this.hierarchy.length;for(t=0;t<r;t++)e=this.hierarchy[t],void 0===(i=this.data.hierarchy[t]).animationCache&&(i.animationCache={},i.animationCache.prevKey=null,i.animationCache.nextKey=null,i.animationCache.originalMatrix=e.matrix),(e=this.data.hierarchy[t].keys).length&&(i.animationCache.prevKey=e[0],i.animationCache.nextKey=e[1],this.startTime=Math.min(e[0].time,this.startTime),this.endTime=Math.max(e[e.length-1].time,this.endTime));this.update(0)}this.isPaused=!1,THREE.AnimationHandler.play(this)},THREE.KeyFrameAnimation.prototype.stop=function(){this.isPaused=this.isPlaying=!1,THREE.AnimationHandler.stop(this);for(var t=0;t<this.data.hierarchy.length;t++){var e=this.hierarchy[t],i=this.data.hierarchy[t];if(void 0!==i.animationCache){var r=i.animationCache.originalMatrix;r.copy(e.matrix),e.matrix=r,delete i.animationCache}}},THREE.KeyFrameAnimation.prototype.update=function(t){if(!1!==this.isPlaying){this.currentTime+=t*this.timeScale,t=this.data.length,!0===this.loop&&this.currentTime>t&&(this.currentTime%=t),this.currentTime=Math.min(this.currentTime,t),t=0;for(var e=this.hierarchy.length;t<e;t++){var i=this.hierarchy[t],r=(n=this.data.hierarchy[t]).keys,n=n.animationCache;if(r.length){var a=n.prevKey,o=n.nextKey;if(o.time<=this.currentTime){for(;o.time<this.currentTime&&o.index>a.index;)o=r[(a=o).index+1];n.prevKey=a,n.nextKey=o}o.time>=this.currentTime?a.interpolate(o,this.currentTime):a.interpolate(o,o.time),this.data.hierarchy[t].node.updateMatrix(),i.matrixWorldNeedsUpdate=!0}}}},THREE.KeyFrameAnimation.prototype.getNextKeyWith=function(t,e,i){for(i%=(e=this.data.hierarchy[e].keys).length;i<e.length;i++)if(e[i].hasTarget(t))return e[i];return e[0]},THREE.KeyFrameAnimation.prototype.getPrevKeyWith=function(t,e,i){for(e=this.data.hierarchy[e].keys,i=0<=i?i:i+e.length;0<=i;i--)if(e[i].hasTarget(t))return e[i];return e[e.length-1]},THREE.MorphAnimation=function(t){this.mesh=t,this.frames=t.morphTargetInfluences.length,this.currentTime=0,this.duration=1e3,this.loop=!0,this.currentFrame=this.lastFrame=0,this.isPlaying=!1},THREE.MorphAnimation.prototype={constructor:THREE.MorphAnimation,play:function(){this.isPlaying=!0},pause:function(){this.isPlaying=!1},update:function(t){if(!1!==this.isPlaying){this.currentTime+=t,!0===this.loop&&this.currentTime>this.duration&&(this.currentTime%=this.duration),this.currentTime=Math.min(this.currentTime,this.duration),t=this.duration/this.frames;var e=Math.floor(this.currentTime/t);e!=this.currentFrame&&(this.mesh.morphTargetInfluences[this.lastFrame]=0,this.mesh.morphTargetInfluences[this.currentFrame]=1,this.mesh.morphTargetInfluences[e]=0,this.lastFrame=this.currentFrame,this.currentFrame=e),this.mesh.morphTargetInfluences[e]=this.currentTime%t/t,this.mesh.morphTargetInfluences[this.lastFrame]=1-this.mesh.morphTargetInfluences[e]}}},THREE.BoxGeometry=function(t,e,i,r,n,a){function o(t,e,i,r,n,a,o,s){var l,h=T.widthSegments,c=T.heightSegments,u=n/2,d=a/2,p=T.vertices.length;"x"===t&&"y"===e||"y"===t&&"x"===e?l="z":"x"===t&&"z"===e||"z"===t&&"x"===e?(l="y",c=T.depthSegments):("z"===t&&"y"===e||"y"===t&&"z"===e)&&(l="x",h=T.depthSegments);var f=h+1,m=c+1,g=n/h,E=a/c,v=new THREE.Vector3;for(v[l]=0<o?1:-1,n=0;n<m;n++)for(a=0;a<f;a++){var y=new THREE.Vector3;y[t]=(a*g-u)*i,y[e]=(n*E-d)*r,y[l]=o,T.vertices.push(y)}for(n=0;n<c;n++)for(a=0;a<h;a++)d=a+f*n,t=a+f*(n+1),e=a+1+f*(n+1),i=a+1+f*n,r=new THREE.Vector2(a/h,1-n/c),o=new THREE.Vector2(a/h,1-(n+1)/c),l=new THREE.Vector2((a+1)/h,1-(n+1)/c),u=new THREE.Vector2((a+1)/h,1-n/c),(d=new THREE.Face3(d+p,t+p,i+p)).normal.copy(v),d.vertexNormals.push(v.clone(),v.clone(),v.clone()),d.materialIndex=s,T.faces.push(d),T.faceVertexUvs[0].push([r,o,u]),(d=new THREE.Face3(t+p,e+p,i+p)).normal.copy(v),d.vertexNormals.push(v.clone(),v.clone(),v.clone()),d.materialIndex=s,T.faces.push(d),T.faceVertexUvs[0].push([o.clone(),l,u.clone()])}THREE.Geometry.call(this),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:r,heightSegments:n,depthSegments:a},this.widthSegments=r||1,this.heightSegments=n||1,this.depthSegments=a||1;var T=this;n=e/2,a=i/2,o("z","y",-1,-1,i,e,r=t/2,0),o("z","y",1,-1,i,e,-r,1),o("x","z",1,1,t,i,n,2),o("x","z",1,-1,t,i,-n,3),o("x","y",1,-1,t,e,a,4),o("x","y",-1,-1,t,e,-a,5),this.mergeVertices()},THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry,THREE.CircleGeometry=function(t,e,i,r){THREE.Geometry.call(this),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:r},t=t||50,e=void 0!==e?Math.max(3,e):8,i=void 0!==i?i:0,r=void 0!==r?r:2*Math.PI;var n,a=[];n=new THREE.Vector3;var o=new THREE.Vector2(.5,.5);for(this.vertices.push(n),a.push(o),n=0;n<=e;n++){var s=new THREE.Vector3,l=i+n/e*r;s.x=t*Math.cos(l),s.y=t*Math.sin(l),this.vertices.push(s),a.push(new THREE.Vector2((s.x/t+1)/2,(s.y/t+1)/2))}for(i=new THREE.Vector3(0,0,1),n=1;n<=e;n++)this.faces.push(new THREE.Face3(n,n+1,0,[i.clone(),i.clone(),i.clone()])),this.faceVertexUvs[0].push([a[n].clone(),a[n+1].clone(),o.clone()]);this.computeFaceNormals(),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,t)},THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry,THREE.CubeGeometry=function(t,e,i,r,n,a){return console.warn("THREE.CubeGeometry has been renamed to THREE.BoxGeometry."),new THREE.BoxGeometry(t,e,i,r,n,a)},THREE.CylinderGeometry=function(t,e,i,r,n,a,o,s){THREE.Geometry.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:r,heightSegments:n,openEnded:a,thetaStart:o,thetaLength:s},t=void 0!==t?t:20,e=void 0!==e?e:20,i=void 0!==i?i:100,r=r||8,n=n||1,a=void 0!==a&&a,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var l,h,c=i/2,u=[],d=[];for(h=0;h<=n;h++){var p=[],f=[],m=(E=h/n)*(e-t)+t;for(l=0;l<=r;l++){var g=l/r;(v=new THREE.Vector3).x=m*Math.sin(g*s+o),v.y=-E*i+c,v.z=m*Math.cos(g*s+o),this.vertices.push(v),p.push(this.vertices.length-1),f.push(new THREE.Vector2(g,1-E))}u.push(p),d.push(f)}for(i=(e-t)/i,l=0;l<r;l++)for(s=0!==t?(o=this.vertices[u[0][l]].clone(),this.vertices[u[0][l+1]].clone()):(o=this.vertices[u[1][l]].clone(),this.vertices[u[1][l+1]].clone()),o.setY(Math.sqrt(o.x*o.x+o.z*o.z)*i).normalize(),s.setY(Math.sqrt(s.x*s.x+s.z*s.z)*i).normalize(),h=0;h<n;h++){p=u[h][l],f=u[h+1][l];var E=u[h+1][l+1],v=(m=u[h][l+1],g=o.clone(),o.clone()),y=s.clone(),T=s.clone(),x=d[h][l].clone(),b=d[h+1][l].clone(),R=d[h+1][l+1].clone(),w=d[h][l+1].clone();this.faces.push(new THREE.Face3(p,f,m,[g,v,T])),this.faceVertexUvs[0].push([x,b,w]),this.faces.push(new THREE.Face3(f,E,m,[v.clone(),y,T.clone()])),this.faceVertexUvs[0].push([b.clone(),R,w.clone()])}if(!1===a&&0<t)for(this.vertices.push(new THREE.Vector3(0,c,0)),l=0;l<r;l++)p=u[0][l],f=u[0][l+1],E=this.vertices.length-1,g=new THREE.Vector3(0,1,0),v=new THREE.Vector3(0,1,0),y=new THREE.Vector3(0,1,0),x=d[0][l].clone(),b=d[0][l+1].clone(),R=new THREE.Vector2(b.x,0),this.faces.push(new THREE.Face3(p,f,E,[g,v,y])),this.faceVertexUvs[0].push([x,b,R]);if(!1===a&&0<e)for(this.vertices.push(new THREE.Vector3(0,-c,0)),l=0;l<r;l++)p=u[n][l+1],f=u[n][l],E=this.vertices.length-1,g=new THREE.Vector3(0,-1,0),v=new THREE.Vector3(0,-1,0),y=new THREE.Vector3(0,-1,0),x=d[n][l+1].clone(),b=d[n][l].clone(),R=new THREE.Vector2(b.x,1),this.faces.push(new THREE.Face3(p,f,E,[g,v,y])),this.faceVertexUvs[0].push([x,b,R]);this.computeFaceNormals()},THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry,THREE.ExtrudeGeometry=function(t,e){void 0!==t&&(THREE.Geometry.call(this),this.type="ExtrudeGeometry",t=t instanceof Array?t:[t],this.addShapeList(t,e),this.computeFaceNormals())},THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry,THREE.ExtrudeGeometry.prototype.addShapeList=function(t,e){for(var i=t.length,r=0;r<i;r++)this.addShape(t[r],e)},THREE.ExtrudeGeometry.prototype.addShape=function(t,e){function i(t,e,i){return e||console.log("die"),e.clone().multiplyScalar(i).add(t)}function r(t,e,i){var r=1,n=(r=t.x-e.x,t.y-e.y),a=i.x-t.x,o=i.y-t.y,s=r*r+n*n;if(1e-10<Math.abs(r*o-n*a)){var l=Math.sqrt(s),h=Math.sqrt(a*a+o*o);s=e.x-n/l;if(e=e.y+r/l,(r=(i=s+r*(a=((i.x-o/h-s)*o-(i.y+a/h-e)*a)/(r*o-n*a))-t.x)*i+(t=e+n*a-t.y)*t)<=2)return new THREE.Vector2(i,t);r=Math.sqrt(r/2)}else t=!1,1e-10<r?1e-10<a&&(t=!0):r<-1e-10?a<-1e-10&&(t=!0):Math.sign(n)==Math.sign(o)&&(t=!0),r=t?(i=-n,t=r,Math.sqrt(s)):(i=r,t=n,Math.sqrt(s/2));return new THREE.Vector2(i/r,t/r)}function n(t,e){var i,r;for(z=t.length;0<=--z;){(r=(i=z)-1)<0&&(r=t.length-1);var n=0,a=v+2*m;for(n=0;n<a;n++){var o=(o=e+i+(s=N*n))+C,s=(s=e+r+s)+C,l=(l=e+r+(h=N*(n+1)))+C,h=(h=e+i+h)+C;S.faces.push(new THREE.Face3(o,s,h,null,null,b)),S.faces.push(new THREE.Face3(s,l,h,null,null,b)),o=R.generateSideWallUV(S,o,s,l,h),S.faceVertexUvs[0].push([o[0],o[1],o[3]]),S.faceVertexUvs[0].push([o[1],o[2],o[3]])}}}function a(t,e,i){S.vertices.push(new THREE.Vector3(t,e,i))}function o(t,e,i){t+=C,e+=C,i+=C,S.faces.push(new THREE.Face3(t,e,i,null,null,x)),t=R.generateTopUV(S,t,e,i),S.faceVertexUvs[0].push(t)}var s,l,h,c,u,d=void 0!==e.amount?e.amount:100,p=void 0!==e.bevelThickness?e.bevelThickness:6,f=void 0!==e.bevelSize?e.bevelSize:p-2,m=void 0!==e.bevelSegments?e.bevelSegments:3,g=void 0===e.bevelEnabled||e.bevelEnabled,E=void 0!==e.curveSegments?e.curveSegments:12,v=void 0!==e.steps?e.steps:1,y=e.extrudePath,T=!1,x=e.material,b=e.extrudeMaterial,R=void 0!==e.UVGenerator?e.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator;y&&(s=y.getSpacedPoints(v),g=!(T=!0),l=void 0!==e.frames?e.frames:new THREE.TubeGeometry.FrenetFrames(y,v,!1),h=new THREE.Vector3,c=new THREE.Vector3,u=new THREE.Vector3),g||(f=p=m=0);var w,H,_,S=this,C=this.vertices.length,M=(E=(y=t.extractPoints(E)).shape,y.holes);if(y=!THREE.Shape.Utils.isClockWise(E)){for(E=E.reverse(),H=0,_=M.length;H<_;H++)w=M[H],THREE.Shape.Utils.isClockWise(w)&&(M[H]=w.reverse());y=!1}var A=THREE.Shape.Utils.triangulateShape(E,M),P=E;for(H=0,_=M.length;H<_;H++)w=M[H],E=E.concat(w);var L,D,F,k,O,B,N=E.length,I=A.length,z=(y=[],0);for(L=(F=P.length)-1,D=z+1;z<F;z++,L++,D++)L===F&&(L=0),D===F&&(D=0),y[z]=r(P[z],P[L],P[D]);var U,V=[],G=y.concat();for(H=0,_=M.length;H<_;H++){for(w=M[H],U=[],z=0,L=(F=w.length)-1,D=z+1;z<F;z++,L++,D++)L===F&&(L=0),D===F&&(D=0),U[z]=r(w[z],w[L],w[D]);V.push(U),G=G.concat(U)}for(L=0;L<m;L++){for(k=p*(1-(F=L/m)),D=f*Math.sin(F*Math.PI/2),z=0,F=P.length;z<F;z++)a((O=i(P[z],y[z],D)).x,O.y,-k);for(H=0,_=M.length;H<_;H++)for(w=M[H],U=V[H],z=0,F=w.length;z<F;z++)a((O=i(w[z],U[z],D)).x,O.y,-k)}for(D=f,z=0;z<N;z++)O=g?i(E[z],G[z],D):E[z],T?(c.copy(l.normals[0]).multiplyScalar(O.x),h.copy(l.binormals[0]).multiplyScalar(O.y),u.copy(s[0]).add(c).add(h),a(u.x,u.y,u.z)):a(O.x,O.y,0);for(F=1;F<=v;F++)for(z=0;z<N;z++)O=g?i(E[z],G[z],D):E[z],T?(c.copy(l.normals[F]).multiplyScalar(O.x),h.copy(l.binormals[F]).multiplyScalar(O.y),u.copy(s[F]).add(c).add(h),a(u.x,u.y,u.z)):a(O.x,O.y,d/v*F);for(L=m-1;0<=L;L--){for(k=p*(1-(F=L/m)),D=f*Math.sin(F*Math.PI/2),z=0,F=P.length;z<F;z++)a((O=i(P[z],y[z],D)).x,O.y,d+k);for(H=0,_=M.length;H<_;H++)for(w=M[H],U=V[H],z=0,F=w.length;z<F;z++)O=i(w[z],U[z],D),T?a(O.x,O.y+s[v-1].y,s[v-1].x+k):a(O.x,O.y,d+k)}!function(){if(g){var t;for(t=0*N,z=0;z<I;z++)o((B=A[z])[2]+t,B[1]+t,B[0]+t);for(t=v+2*m,t*=N,z=0;z<I;z++)o((B=A[z])[0]+t,B[1]+t,B[2]+t)}else{for(z=0;z<I;z++)o((B=A[z])[2],B[1],B[0]);for(z=0;z<I;z++)o((B=A[z])[0]+N*v,B[1]+N*v,B[2]+N*v)}}(),function(){var t=0;for(n(P,t),t+=P.length,H=0,_=M.length;H<_;H++)n(w=M[H],t),t+=w.length}()},THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(t,e,i,r){return e=(t=t.vertices)[e],i=t[i],r=t[r],[new THREE.Vector2(e.x,e.y),new THREE.Vector2(i.x,i.y),new THREE.Vector2(r.x,r.y)]},generateSideWallUV:function(t,e,i,r,n){return e=(t=t.vertices)[e],i=t[i],r=t[r],n=t[n],Math.abs(e.y-i.y)<.01?[new THREE.Vector2(e.x,1-e.z),new THREE.Vector2(i.x,1-i.z),new THREE.Vector2(r.x,1-r.z),new THREE.Vector2(n.x,1-n.z)]:[new THREE.Vector2(e.y,1-e.z),new THREE.Vector2(i.y,1-i.z),new THREE.Vector2(r.y,1-r.z),new THREE.Vector2(n.y,1-n.z)]}},THREE.ShapeGeometry=function(t,e){THREE.Geometry.call(this),!(this.type="ShapeGeometry")==t instanceof Array&&(t=[t]),this.addShapeList(t,e),this.computeFaceNormals()},THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry,THREE.ShapeGeometry.prototype.addShapeList=function(t,e){for(var i=0,r=t.length;i<r;i++)this.addShape(t[i],e);return this},THREE.ShapeGeometry.prototype.addShape=function(t,e){void 0===e&&(e={});var i,r,n,a=e.material,o=void 0===e.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:e.UVGenerator,s=this.vertices.length,l=(i=t.extractPoints(void 0!==e.curveSegments?e.curveSegments:12)).shape,h=i.holes;if(!THREE.Shape.Utils.isClockWise(l))for(l=l.reverse(),i=0,r=h.length;i<r;i++)n=h[i],THREE.Shape.Utils.isClockWise(n)&&(h[i]=n.reverse());var c=THREE.Shape.Utils.triangulateShape(l,h);for(i=0,r=h.length;i<r;i++)n=h[i],l=l.concat(n);for(h=l.length,r=c.length,i=0;i<h;i++)n=l[i],this.vertices.push(new THREE.Vector3(n.x,n.y,0));for(i=0;i<r;i++)l=(h=c[i])[0]+s,n=h[1]+s,h=h[2]+s,this.faces.push(new THREE.Face3(l,n,h,null,null,a)),this.faceVertexUvs[0].push(o.generateTopUV(this,l,n,h))},THREE.LatheGeometry=function(t,e,i,r){THREE.Geometry.call(this),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:r},e=e||12,i=i||0,r=r||2*Math.PI;for(var n=1/(t.length-1),a=1/e,o=0,s=e;o<=s;o++)for(var l=i+o*a*r,h=Math.cos(l),c=Math.sin(l),u=(l=0,t.length);l<u;l++){var d=t[l];(p=new THREE.Vector3).x=h*d.x-c*d.y,p.y=c*d.x+h*d.y,p.z=d.z,this.vertices.push(p)}for(i=t.length,o=0,s=e;o<s;o++)for(l=0,u=t.length-1;l<u;l++){e=c=l+i*o,r=c+i;h=c+1+i,c=c+1;var p,f=(d=o*a)+a,m=(p=l*n)+n;this.faces.push(new THREE.Face3(e,r,c)),this.faceVertexUvs[0].push([new THREE.Vector2(d,p),new THREE.Vector2(f,p),new THREE.Vector2(d,m)]),this.faces.push(new THREE.Face3(r,h,c)),this.faceVertexUvs[0].push([new THREE.Vector2(f,p),new THREE.Vector2(f,m),new THREE.Vector2(d,m)])}this.mergeVertices(),this.computeFaceNormals(),this.computeVertexNormals()},THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry,THREE.PlaneGeometry=function(t,e,i,r){console.info("THREE.PlaneGeometry: Consider using THREE.PlaneBufferGeometry for lower memory footprint."),THREE.Geometry.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:r},this.fromBufferGeometry(new THREE.PlaneBufferGeometry(t,e,i,r))},THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry,THREE.PlaneBufferGeometry=function(t,e,i,r){THREE.BufferGeometry.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:r};var n=t/2,a=e/2,o=(i=i||1)+1,s=(r=r||1)+1,l=t/i,h=e/r;e=new Float32Array(o*s*3),t=new Float32Array(o*s*3);for(var c=new Float32Array(o*s*2),u=0,d=0,p=0;p<s;p++)for(var f=p*h-a,m=0;m<o;m++)e[u]=m*l-n,e[u+1]=-f,t[u+2]=1,c[d]=m/i,c[d+1]=1-p/r,u+=3,d+=2;for(u=0,n=new(65535<e.length/3?Uint32Array:Uint16Array)(i*r*6),p=0;p<r;p++)for(m=0;m<i;m++)a=m+o*(p+1),s=m+1+o*(p+1),l=m+1+o*p,n[u]=m+o*p,n[u+1]=a,n[u+2]=l,n[u+3]=a,n[u+4]=s,n[u+5]=l,u+=6;this.addAttribute("index",new THREE.BufferAttribute(n,1)),this.addAttribute("position",new THREE.BufferAttribute(e,3)),this.addAttribute("normal",new THREE.BufferAttribute(t,3)),this.addAttribute("uv",new THREE.BufferAttribute(c,2))},THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry,THREE.RingGeometry=function(t,e,i,r,n,a){THREE.Geometry.call(this),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:r,thetaStart:n,thetaLength:a},t=t||0,e=e||50,n=void 0!==n?n:0,a=void 0!==a?a:2*Math.PI,i=void 0!==i?Math.max(3,i):8;var o,s=[],l=t,h=(e-t)/(r=void 0!==r?Math.max(1,r):8);for(t=0;t<r+1;t++){for(o=0;o<i+1;o++){var c=new THREE.Vector3,u=n+o/i*a;c.x=l*Math.cos(u),c.y=l*Math.sin(u),this.vertices.push(c),s.push(new THREE.Vector2((c.x/e+1)/2,(c.y/e+1)/2))}l+=h}for(e=new THREE.Vector3(0,0,1),t=0;t<r;t++)for(n=t*(i+1),o=0;o<i;o++)a=u=o+n,h=u+i+1,c=u+i+2,this.faces.push(new THREE.Face3(a,h,c,[e.clone(),e.clone(),e.clone()])),this.faceVertexUvs[0].push([s[a].clone(),s[h].clone(),s[c].clone()]),h=(a=u)+i+2,c=u+1,this.faces.push(new THREE.Face3(a,h,c,[e.clone(),e.clone(),e.clone()])),this.faceVertexUvs[0].push([s[a].clone(),s[h].clone(),s[c].clone()]);this.computeFaceNormals(),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,l)},THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.RingGeometry.prototype.constructor=THREE.RingGeometry,THREE.SphereGeometry=function(t,e,i,r,n,a,o){THREE.Geometry.call(this),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:r,phiLength:n,thetaStart:a,thetaLength:o},t=t||50,e=Math.max(3,Math.floor(e)||8),i=Math.max(2,Math.floor(i)||6),r=void 0!==r?r:0,n=void 0!==n?n:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;var s,l,h=[],c=[];for(l=0;l<=i;l++){var u=[],d=[];for(s=0;s<=e;s++){var p=s/e,f=l/i;(m=new THREE.Vector3).x=-t*Math.cos(r+p*n)*Math.sin(a+f*o),m.y=t*Math.cos(a+f*o),m.z=t*Math.sin(r+p*n)*Math.sin(a+f*o),this.vertices.push(m),u.push(this.vertices.length-1),d.push(new THREE.Vector2(p,1-f))}h.push(u),c.push(d)}for(l=0;l<i;l++)for(s=0;s<e;s++){r=h[l][s+1],n=h[l][s],a=h[l+1][s],o=h[l+1][s+1];u=this.vertices[r].clone().normalize(),d=this.vertices[n].clone().normalize(),p=this.vertices[a].clone().normalize(),f=this.vertices[o].clone().normalize();var m=c[l][s+1].clone(),g=c[l][s].clone(),E=c[l+1][s].clone(),v=c[l+1][s+1].clone();Math.abs(this.vertices[r].y)===t?(m.x=(m.x+g.x)/2,this.faces.push(new THREE.Face3(r,a,o,[u,p,f])),this.faceVertexUvs[0].push([m,E,v])):Math.abs(this.vertices[a].y)===t?(E.x=(E.x+v.x)/2,this.faces.push(new THREE.Face3(r,n,a,[u,d,p])),this.faceVertexUvs[0].push([m,g,E])):(this.faces.push(new THREE.Face3(r,n,o,[u,d,f])),this.faceVertexUvs[0].push([m,g,v]),this.faces.push(new THREE.Face3(n,a,o,[d.clone(),p,f.clone()])),this.faceVertexUvs[0].push([g.clone(),E,v.clone()]))}this.computeFaceNormals(),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,t)},THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry,THREE.TextGeometry=function(t,e){e=e||{};var i=THREE.FontUtils.generateShapes(t,e);e.amount=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),THREE.ExtrudeGeometry.call(this,i,e),this.type="TextGeometry"},THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype),THREE.TextGeometry.prototype.constructor=THREE.TextGeometry,THREE.TorusGeometry=function(t,e,i,r,n){THREE.Geometry.call(this),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:r,arc:n},t=t||100,e=e||40,i=i||8,r=r||6,n=n||2*Math.PI;for(var a=new THREE.Vector3,o=[],s=[],l=0;l<=i;l++)for(var h=0;h<=r;h++){var c=h/r*n,u=l/i*Math.PI*2;a.x=t*Math.cos(c),a.y=t*Math.sin(c);var d=new THREE.Vector3;d.x=(t+e*Math.cos(u))*Math.cos(c),d.y=(t+e*Math.cos(u))*Math.sin(c),d.z=e*Math.sin(u),this.vertices.push(d),o.push(new THREE.Vector2(h/r,l/i)),s.push(d.clone().sub(a).normalize())}for(l=1;l<=i;l++)for(h=1;h<=r;h++)t=(r+1)*l+h-1,e=(r+1)*(l-1)+h-1,n=(r+1)*(l-1)+h,a=(r+1)*l+h,c=new THREE.Face3(t,e,a,[s[t].clone(),s[e].clone(),s[a].clone()]),this.faces.push(c),this.faceVertexUvs[0].push([o[t].clone(),o[e].clone(),o[a].clone()]),c=new THREE.Face3(e,n,a,[s[e].clone(),s[n].clone(),s[a].clone()]),this.faces.push(c),this.faceVertexUvs[0].push([o[e].clone(),o[n].clone(),o[a].clone()]);this.computeFaceNormals()},THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry,THREE.TorusKnotGeometry=function(t,e,i,r,n,a,o){function s(t,e,i,r,n){var a=Math.cos(t),o=Math.sin(t);return t*=e/i,a*=r*(2+(e=Math.cos(t)))*.5,o=r*(2+e)*o*.5,r=n*r*Math.sin(t)*.5,new THREE.Vector3(a,o,r)}THREE.Geometry.call(this),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:r,p:n,q:a,heightScale:o},t=t||100,e=e||40,i=i||64,r=r||8,n=n||2,a=a||3,o=o||1;for(var l=Array(i),h=new THREE.Vector3,c=new THREE.Vector3,u=new THREE.Vector3,d=0;d<i;++d){l[d]=Array(r);var p=s(f=d/i*2*n*Math.PI,a,n,t,o),f=s(f+.01,a,n,t,o);for(h.subVectors(f,p),c.addVectors(f,p),u.crossVectors(h,c),c.crossVectors(u,h),u.normalize(),c.normalize(),f=0;f<r;++f){var m=f/r*2*Math.PI,g=-e*Math.cos(m),E=(m=e*Math.sin(m),new THREE.Vector3);E.x=p.x+g*c.x+m*u.x,E.y=p.y+g*c.y+m*u.y,E.z=p.z+g*c.z+m*u.z,l[d][f]=this.vertices.push(E)-1}}for(d=0;d<i;++d)for(f=0;f<r;++f)n=(d+1)%i,a=(f+1)%r,t=l[d][f],e=l[n][f],n=l[n][a],a=l[d][a],o=new THREE.Vector2(d/i,f/r),h=new THREE.Vector2((d+1)/i,f/r),c=new THREE.Vector2((d+1)/i,(f+1)/r),u=new THREE.Vector2(d/i,(f+1)/r),this.faces.push(new THREE.Face3(t,e,a)),this.faceVertexUvs[0].push([o,h,u]),this.faces.push(new THREE.Face3(e,n,a)),this.faceVertexUvs[0].push([h.clone(),c,u.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry,THREE.TubeGeometry=function(t,e,i,r,n,a){THREE.Geometry.call(this),this.type="TubeGeometry",this.parameters={path:t,segments:e,radius:i,radialSegments:r,closed:n},e=e||64,i=i||1,r=r||8,n=n||!1,a=a||THREE.TubeGeometry.NoTaper;var o,s,l,h,c,u,d,p,f,m,g=[],E=e+1,v=new THREE.Vector3;for(f=(p=new THREE.TubeGeometry.FrenetFrames(t,e,n)).normals,m=p.binormals,this.tangents=p.tangents,this.normals=f,this.binormals=m,p=0;p<E;p++)for(g[p]=[],l=p/(E-1),d=t.getPointAt(l),o=f[p],s=m[p],c=i*a(l),l=0;l<r;l++)h=l/r*2*Math.PI,u=-c*Math.cos(h),h=c*Math.sin(h),v.copy(d),v.x+=u*o.x+h*s.x,v.y+=u*o.y+h*s.y,v.z+=u*o.z+h*s.z,g[p][l]=this.vertices.push(new THREE.Vector3(v.x,v.y,v.z))-1;for(p=0;p<e;p++)for(l=0;l<r;l++)a=n?(p+1)%e:p+1,E=(l+1)%r,t=g[p][l],i=g[a][l],a=g[a][E],E=g[p][E],v=new THREE.Vector2(p/e,l/r),f=new THREE.Vector2((p+1)/e,l/r),m=new THREE.Vector2((p+1)/e,(l+1)/r),o=new THREE.Vector2(p/e,(l+1)/r),this.faces.push(new THREE.Face3(t,i,E)),this.faceVertexUvs[0].push([v,f,o]),this.faces.push(new THREE.Face3(i,a,E)),this.faceVertexUvs[0].push([f.clone(),m,o.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry,THREE.TubeGeometry.NoTaper=function(t){return 1},THREE.TubeGeometry.SinusoidalTaper=function(t){return Math.sin(Math.PI*t)},THREE.TubeGeometry.FrenetFrames=function(t,e,i){new THREE.Vector3;var r=new THREE.Vector3;new THREE.Vector3;var n,a,o,s=[],l=[],h=[],c=new THREE.Vector3,u=new THREE.Matrix4;for(e+=1,this.tangents=s,this.normals=l,this.binormals=h,n=0;n<e;n++)a=n/(e-1),s[n]=t.getTangentAt(a),s[n].normalize();for(l[0]=new THREE.Vector3,h[0]=new THREE.Vector3,t=Number.MAX_VALUE,n=Math.abs(s[0].x),a=Math.abs(s[0].y),o=Math.abs(s[0].z),n<=t&&(t=n,r.set(1,0,0)),a<=t&&(t=a,r.set(0,1,0)),o<=t&&r.set(0,0,1),c.crossVectors(s[0],r).normalize(),l[0].crossVectors(s[0],c),h[0].crossVectors(s[0],l[0]),n=1;n<e;n++)l[n]=l[n-1].clone(),h[n]=h[n-1].clone(),c.crossVectors(s[n-1],s[n]),1e-4<c.length()&&(c.normalize(),r=Math.acos(THREE.Math.clamp(s[n-1].dot(s[n]),-1,1)),l[n].applyMatrix4(u.makeRotationAxis(c,r))),h[n].crossVectors(s[n],l[n]);if(i)for(r=Math.acos(THREE.Math.clamp(l[0].dot(l[e-1]),-1,1)),r/=e-1,0<s[0].dot(c.crossVectors(l[0],l[e-1]))&&(r=-r),n=1;n<e;n++)l[n].applyMatrix4(u.makeRotationAxis(s[n],r*n)),h[n].crossVectors(s[n],l[n])},THREE.PolyhedronGeometry=function(t,e,i,r){function d(t){var e=t.normalize().clone();e.index=f.vertices.push(e)-1;var i=Math.atan2(t.z,-t.x)/2/Math.PI+.5;return t=Math.atan2(-t.y,Math.sqrt(t.x*t.x+t.z*t.z))/Math.PI+.5,e.uv=new THREE.Vector2(i,1-t),e}function p(t,e,i){var r=new THREE.Face3(t.index,e.index,i.index,[t.clone(),e.clone(),i.clone()]);f.faces.push(r),g.copy(t).add(e).add(i).divideScalar(3),r=Math.atan2(g.z,-g.x),f.faceVertexUvs[0].push([a(t.uv,t,r),a(e.uv,e,r),a(i.uv,i,r)])}function n(t,e){var i=Math.pow(2,e);Math.pow(4,e);for(var r=d(f.vertices[t.a]),n=d(f.vertices[t.b]),a=d(f.vertices[t.c]),o=[],s=0;s<=i;s++){o[s]=[];for(var l=d(r.clone().lerp(a,s/i)),h=d(n.clone().lerp(a,s/i)),c=i-s,u=0;u<=c;u++)o[s][u]=0==u&&s==i?l:d(l.clone().lerp(h,u/c))}for(s=0;s<i;s++)for(u=0;u<2*(i-s)-1;u++)r=Math.floor(u/2),0==u%2?p(o[s][r+1],o[s+1][r],o[s][r]):p(o[s][r+1],o[s+1][r+1],o[s+1][r])}function a(t,e,i){return i<0&&1===t.x&&(t=new THREE.Vector2(t.x-1,t.y)),0===e.x&&0===e.z&&(t=new THREE.Vector2(i/2/Math.PI+.5,t.y)),t.clone()}THREE.Geometry.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:r},i=i||1,r=r||0;for(var f=this,o=0,s=t.length;o<s;o+=3)d(new THREE.Vector3(t[o],t[o+1],t[o+2]));t=this.vertices;var l=[],h=o=0;for(s=e.length;o<s;o+=3,h++){var c=t[e[o]],u=t[e[o+1]],m=t[e[o+2]];l[h]=new THREE.Face3(c.index,u.index,m.index,[c.clone(),u.clone(),m.clone()])}var g=new THREE.Vector3;for(o=0,s=l.length;o<s;o++)n(l[o],r);for(o=0,s=this.faceVertexUvs[0].length;o<s;o++)r=(e=this.faceVertexUvs[0][o])[0].x,t=e[1].x,l=e[2].x,h=Math.max(r,Math.max(t,l)),c=Math.min(r,Math.min(t,l)),.9<h&&c<.1&&(r<.2&&(e[0].x+=1),t<.2&&(e[1].x+=1),l<.2&&(e[2].x+=1));for(o=0,s=this.vertices.length;o<s;o++)this.vertices[o].multiplyScalar(i);this.mergeVertices(),this.computeFaceNormals(),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,i)},THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry,THREE.DodecahedronGeometry=function(t,e){this.parameters={radius:t,detail:e};var i=(1+Math.sqrt(5))/2,r=1/i;THREE.PolyhedronGeometry.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-i,0,-r,i,0,r,-i,0,r,i,-r,-i,0,-r,i,0,r,-i,0,r,i,0,-i,0,-r,i,0,-r,-i,0,r,i,0,r],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e)},THREE.DodecahedronGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry,THREE.IcosahedronGeometry=function(t,e){var i=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}},THREE.IcosahedronGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry,THREE.OctahedronGeometry=function(t,e){this.parameters={radius:t,detail:e},THREE.PolyhedronGeometry.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}},THREE.OctahedronGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry,THREE.TetrahedronGeometry=function(t,e){THREE.PolyhedronGeometry.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}},THREE.TetrahedronGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry,THREE.ParametricGeometry=function(t,e,i){THREE.Geometry.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:i};var r,n,a,o,s,l,h,c,u=this.vertices,d=this.faces,p=this.faceVertexUvs[0],f=e+1;for(r=0;r<=i;r++)for(o=r/i,n=0;n<=e;n++)a=t(a=n/e,o),u.push(a);for(r=0;r<i;r++)for(n=0;n<e;n++)u=(t=r*f+n)+1,o=(r+1)*f+n+1,a=(r+1)*f+n,s=new THREE.Vector2(n/e,r/i),l=new THREE.Vector2((n+1)/e,r/i),h=new THREE.Vector2((n+1)/e,(r+1)/i),c=new THREE.Vector2(n/e,(r+1)/i),d.push(new THREE.Face3(t,u,a)),p.push([s,l,c]),d.push(new THREE.Face3(u,o,a)),p.push([l.clone(),h,c.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry,THREE.AxisHelper=function(t){t=t||1;var e=new Float32Array([0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t]),i=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]);(t=new THREE.BufferGeometry).addAttribute("position",new THREE.BufferAttribute(e,3)),t.addAttribute("color",new THREE.BufferAttribute(i,3)),e=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors}),THREE.Line.call(this,t,e,THREE.LinePieces)},THREE.AxisHelper.prototype=Object.create(THREE.Line.prototype),THREE.AxisHelper.prototype.constructor=THREE.AxisHelper,THREE.ArrowHelper=function(){var o=new THREE.Geometry;o.vertices.push(new THREE.Vector3(0,0,0),new THREE.Vector3(0,1,0));var s=new THREE.CylinderGeometry(0,.5,1,5,1);return s.applyMatrix((new THREE.Matrix4).makeTranslation(0,-.5,0)),function(t,e,i,r,n,a){THREE.Object3D.call(this),void 0===r&&(r=16776960),void 0===i&&(i=1),void 0===n&&(n=.2*i),void 0===a&&(a=.2*n),this.position.copy(e),this.line=new THREE.Line(o,new THREE.LineBasicMaterial({color:r})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new THREE.Mesh(s,new THREE.MeshBasicMaterial({color:r})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,n,a)}}(),THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper,THREE.ArrowHelper.prototype.setDirection=function(){var e,i=new THREE.Vector3;return function(t){.99999<t.y?this.quaternion.set(0,0,0,1):t.y<-.99999?this.quaternion.set(1,0,0,0):(i.set(t.z,0,-t.x).normalize(),e=Math.acos(t.y),this.quaternion.setFromAxisAngle(i,e))}}(),THREE.ArrowHelper.prototype.setLength=function(t,e,i){void 0===e&&(e=.2*t),void 0===i&&(i=.2*e),this.line.scale.set(1,t-e,1),this.line.updateMatrix(),this.cone.scale.set(i,e,i),this.cone.position.y=t,this.cone.updateMatrix()},THREE.ArrowHelper.prototype.setColor=function(t){this.line.material.color.set(t),this.cone.material.color.set(t)},THREE.BoxHelper=function(t){var e=new THREE.BufferGeometry;e.addAttribute("position",new THREE.BufferAttribute(new Float32Array(72),3)),THREE.Line.call(this,e,new THREE.LineBasicMaterial({color:16776960}),THREE.LinePieces),void 0!==t&&this.update(t)},THREE.BoxHelper.prototype=Object.create(THREE.Line.prototype),THREE.BoxHelper.prototype.constructor=THREE.BoxHelper,THREE.BoxHelper.prototype.update=function(t){null===(i=t.geometry).boundingBox&&i.computeBoundingBox();var e=i.boundingBox.min,i=i.boundingBox.max,r=this.geometry.attributes.position.array;r[0]=i.x,r[1]=i.y,r[2]=i.z,r[3]=e.x,r[4]=i.y,r[5]=i.z,r[6]=e.x,r[7]=i.y,r[8]=i.z,r[9]=e.x,r[10]=e.y,r[11]=i.z,r[12]=e.x,r[13]=e.y,r[14]=i.z,r[15]=i.x,r[16]=e.y,r[17]=i.z,r[18]=i.x,r[19]=e.y,r[20]=i.z,r[21]=i.x,r[22]=i.y,r[23]=i.z,r[24]=i.x,r[25]=i.y,r[26]=e.z,r[27]=e.x,r[28]=i.y,r[29]=e.z,r[30]=e.x,r[31]=i.y,r[32]=e.z,r[33]=e.x,r[34]=e.y,r[35]=e.z,r[36]=e.x,r[37]=e.y,r[38]=e.z,r[39]=i.x,r[40]=e.y,r[41]=e.z,r[42]=i.x,r[43]=e.y,r[44]=e.z,r[45]=i.x,r[46]=i.y,r[47]=e.z,r[48]=i.x,r[49]=i.y,r[50]=i.z,r[51]=i.x,r[52]=i.y,r[53]=e.z,r[54]=e.x,r[55]=i.y,r[56]=i.z,r[57]=e.x,r[58]=i.y,r[59]=e.z,r[60]=e.x,r[61]=e.y,r[62]=i.z,r[63]=e.x,r[64]=e.y,r[65]=e.z,r[66]=i.x,r[67]=e.y,r[68]=i.z,r[69]=i.x,r[70]=e.y,r[71]=e.z,this.geometry.attributes.position.needsUpdate=!0,this.geometry.computeBoundingSphere(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1},THREE.BoundingBoxHelper=function(t,e){var i=void 0!==e?e:8947848;this.object=t,this.box=new THREE.Box3,THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:i,wireframe:!0}))},THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype),THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper,THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object),this.box.size(this.scale),this.box.center(this.position)},THREE.CameraHelper=function(t){function e(t,e,i){r(t,i),r(e,i)}function r(t,e){i.vertices.push(new THREE.Vector3),i.colors.push(new THREE.Color(e)),void 0===a[t]&&(a[t]=[]),a[t].push(i.vertices.length-1)}var i=new THREE.Geometry,n=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),a={};e("n1","n2",16755200),e("n2","n4",16755200),e("n4","n3",16755200),e("n3","n1",16755200),e("f1","f2",16755200),e("f2","f4",16755200),e("f4","f3",16755200),e("f3","f1",16755200),e("n1","f1",16755200),e("n2","f2",16755200),e("n3","f3",16755200),e("n4","f4",16755200),e("p","n1",16711680),e("p","n2",16711680),e("p","n3",16711680),e("p","n4",16711680),e("u1","u2",43775),e("u2","u3",43775),e("u3","u1",43775),e("c","t",16777215),e("p","c",3355443),e("cn1","cn2",3355443),e("cn3","cn4",3355443),e("cf1","cf2",3355443),e("cf3","cf4",3355443),THREE.Line.call(this,i,n,THREE.LinePieces),this.camera=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()},THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype),THREE.CameraHelper.prototype.constructor=THREE.CameraHelper,THREE.CameraHelper.prototype.update=function(){function t(t,e,i,r){if(o.set(e,i,r).unproject(s),void 0!==(t=a[t]))for(e=0,i=t.length;e<i;e++)n.vertices[t[e]].copy(o)}var n,a,o=new THREE.Vector3,s=new THREE.Camera;return function(){n=this.geometry,a=this.pointMap,s.projectionMatrix.copy(this.camera.projectionMatrix),t("c",0,0,-1),t("t",0,0,1),t("n1",-1,-1,-1),t("n2",1,-1,-1),t("n3",-1,1,-1),t("n4",1,1,-1),t("f1",-1,-1,1),t("f2",1,-1,1),t("f3",-1,1,1),t("f4",1,1,1),t("u1",.7,1.1,-1),t("u2",-.7,1.1,-1),t("u3",0,2,-1),t("cf1",-1,0,1),t("cf2",1,0,1),t("cf3",0,-1,1),t("cf4",0,1,1),t("cn1",-1,0,-1),t("cn2",1,0,-1),t("cn3",0,-1,-1),t("cn4",0,1,-1),n.verticesNeedUpdate=!0}}(),THREE.DirectionalLightHelper=function(t,e){THREE.Object3D.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,e=e||1;var i=new THREE.Geometry;i.vertices.push(new THREE.Vector3(-e,e,0),new THREE.Vector3(e,e,0),new THREE.Vector3(e,-e,0),new THREE.Vector3(-e,-e,0),new THREE.Vector3(-e,e,0));var r=new THREE.LineBasicMaterial({fog:!1});r.color.copy(this.light.color).multiplyScalar(this.light.intensity),this.lightPlane=new THREE.Line(i,r),this.add(this.lightPlane),(i=new THREE.Geometry).vertices.push(new THREE.Vector3,new THREE.Vector3),(r=new THREE.LineBasicMaterial({fog:!1})).color.copy(this.light.color).multiplyScalar(this.light.intensity),this.targetLine=new THREE.Line(i,r),this.add(this.targetLine),this.update()},THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper,THREE.DirectionalLightHelper.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},THREE.DirectionalLightHelper.prototype.update=function(){var t=new THREE.Vector3,e=new THREE.Vector3,i=new THREE.Vector3;return function(){t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),i.subVectors(e,t),this.lightPlane.lookAt(i),this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity),this.targetLine.geometry.vertices[1].copy(i),this.targetLine.geometry.verticesNeedUpdate=!0,this.targetLine.material.color.copy(this.lightPlane.material.color)}}(),THREE.EdgesHelper=function(t,e){var i=void 0!==e?e:16777215,r=[0,0],n={},a=function(t,e){return t-e},o=["a","b","c"],s=new THREE.BufferGeometry;(l=t.geometry.clone()).mergeVertices(),l.computeFaceNormals();for(var l,h=l.vertices,c=0,u=0,d=(l=l.faces).length;u<d;u++)for(var p=l[u],f=0;f<3;f++){r[0]=p[o[f]],r[1]=p[o[(f+1)%3]],r.sort(a);var m=r.toString();void 0===n[m]?(n[m]={vert1:r[0],vert2:r[1],face1:u,face2:void 0},c++):n[m].face2=u}for(m in r=new Float32Array(6*c),a=0,n)(void 0===(o=n[m]).face2||l[o.face1].normal.dot(l[o.face2].normal)<.9999)&&(c=h[o.vert1],r[a++]=c.x,r[a++]=c.y,r[a++]=c.z,c=h[o.vert2],r[a++]=c.x,r[a++]=c.y,r[a++]=c.z);s.addAttribute("position",new THREE.BufferAttribute(r,3)),THREE.Line.call(this,s,new THREE.LineBasicMaterial({color:i}),THREE.LinePieces),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1},THREE.EdgesHelper.prototype=Object.create(THREE.Line.prototype),THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper,THREE.FaceNormalsHelper=function(t,e,i,r){this.object=t,this.size=void 0!==e?e:1,t=void 0!==i?i:16776960,r=void 0!==r?r:1,e=new THREE.Geometry,i=0;for(var n=this.object.geometry.faces.length;i<n;i++)e.vertices.push(new THREE.Vector3,new THREE.Vector3);THREE.Line.call(this,e,new THREE.LineBasicMaterial({color:t,linewidth:r}),THREE.LinePieces),this.matrixAutoUpdate=!1,this.normalMatrix=new THREE.Matrix3,this.update()},THREE.FaceNormalsHelper.prototype=Object.create(THREE.Line.prototype),THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper,THREE.FaceNormalsHelper.prototype.update=function(){var t=this.geometry.vertices,e=this.object,i=e.geometry.vertices,r=e.geometry.faces,n=e.matrixWorld;e.updateMatrixWorld(!0),this.normalMatrix.getNormalMatrix(n);for(var a=e=0,o=r.length;e<o;e++,a+=2){var s=r[e];t[a].copy(i[s.a]).add(i[s.b]).add(i[s.c]).divideScalar(3).applyMatrix4(n),t[a+1].copy(s.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size).add(t[a])}return this.geometry.verticesNeedUpdate=!0,this},THREE.GridHelper=function(t,e){var i=new THREE.Geometry,r=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});this.color1=new THREE.Color(4473924),this.color2=new THREE.Color(8947848);for(var n=-t;n<=t;n+=e){i.vertices.push(new THREE.Vector3(-t,0,n),new THREE.Vector3(t,0,n),new THREE.Vector3(n,0,-t),new THREE.Vector3(n,0,t));var a=0===n?this.color1:this.color2;i.colors.push(a,a,a,a)}THREE.Line.call(this,i,r,THREE.LinePieces)},THREE.GridHelper.prototype=Object.create(THREE.Line.prototype),THREE.GridHelper.prototype.constructor=THREE.GridHelper,THREE.GridHelper.prototype.setColors=function(t,e){this.color1.set(t),this.color2.set(e),this.geometry.colorsNeedUpdate=!0},THREE.HemisphereLightHelper=function(t,e,i,r){for(THREE.Object3D.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.colors=[new THREE.Color,new THREE.Color],(t=new THREE.SphereGeometry(e,4,2)).applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2)),e=0;e<8;e++)t.faces[e].color=this.colors[e<4?0:1];e=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0}),this.lightSphere=new THREE.Mesh(t,e),this.add(this.lightSphere),this.update()},THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper,THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose(),this.lightSphere.material.dispose()},THREE.HemisphereLightHelper.prototype.update=function(){var t=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity),this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity),this.lightSphere.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate()),this.lightSphere.geometry.colorsNeedUpdate=!0}}(),THREE.PointLightHelper=function(t,e){this.light=t,this.light.updateMatrixWorld();var i=new THREE.SphereGeometry(e,4,2),r=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});r.color.copy(this.light.color).multiplyScalar(this.light.intensity),THREE.Mesh.call(this,i,r),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1},THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype),THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper,THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)},THREE.SkeletonHelper=function(t){this.bones=this.getBoneList(t);for(var e=new THREE.Geometry,i=0;i<this.bones.length;i++)this.bones[i].parent instanceof THREE.Bone&&(e.vertices.push(new THREE.Vector3),e.vertices.push(new THREE.Vector3),e.colors.push(new THREE.Color(0,0,1)),e.colors.push(new THREE.Color(0,1,0)));i=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0}),THREE.Line.call(this,e,i,THREE.LinePieces),this.root=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.update()},THREE.SkeletonHelper.prototype=Object.create(THREE.Line.prototype),THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper,THREE.SkeletonHelper.prototype.getBoneList=function(t){var e=[];t instanceof THREE.Bone&&e.push(t);for(var i=0;i<t.children.length;i++)e.push.apply(e,this.getBoneList(t.children[i]));return e},THREE.SkeletonHelper.prototype.update=function(){for(var t=this.geometry,e=(new THREE.Matrix4).getInverse(this.root.matrixWorld),i=new THREE.Matrix4,r=0,n=0;n<this.bones.length;n++){var a=this.bones[n];a.parent instanceof THREE.Bone&&(i.multiplyMatrices(e,a.matrixWorld),t.vertices[r].setFromMatrixPosition(i),i.multiplyMatrices(e,a.parent.matrixWorld),t.vertices[r+1].setFromMatrixPosition(i),r+=2)}t.verticesNeedUpdate=!0,t.computeBoundingSphere()},THREE.SpotLightHelper=function(t){THREE.Object3D.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,(t=new THREE.CylinderGeometry(0,1,1,8,1,!0)).applyMatrix((new THREE.Matrix4).makeTranslation(0,-.5,0)),t.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var e=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});this.cone=new THREE.Mesh(t,e),this.add(this.cone),this.update()},THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper,THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},THREE.SpotLightHelper.prototype.update=function(){var i=new THREE.Vector3,r=new THREE.Vector3;return function(){var t=this.light.distance?this.light.distance:1e4,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),i.setFromMatrixPosition(this.light.matrixWorld),r.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(r.sub(i)),this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}(),THREE.VertexNormalsHelper=function(t,e,i,r){this.object=t,this.size=void 0!==e?e:1,e=void 0!==i?i:16711680,r=void 0!==r?r:1,i=new THREE.Geometry;for(var n=0,a=(t=t.geometry.faces).length;n<a;n++)for(var o=0,s=t[n].vertexNormals.length;o<s;o++)i.vertices.push(new THREE.Vector3,new THREE.Vector3);THREE.Line.call(this,i,new THREE.LineBasicMaterial({color:e,linewidth:r}),THREE.LinePieces),this.matrixAutoUpdate=!1,this.normalMatrix=new THREE.Matrix3,this.update()},THREE.VertexNormalsHelper.prototype=Object.create(THREE.Line.prototype),THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper,THREE.VertexNormalsHelper.prototype.update=function(){var d=new THREE.Vector3;return function(t){t=["a","b","c","d"],this.object.updateMatrixWorld(!0),this.normalMatrix.getNormalMatrix(this.object.matrixWorld);for(var e=this.geometry.vertices,i=this.object.geometry.vertices,r=this.object.geometry.faces,n=this.object.matrixWorld,a=0,o=0,s=r.length;o<s;o++)for(var l=r[o],h=0,c=l.vertexNormals.length;h<c;h++){var u=l.vertexNormals[h];e[a].copy(i[l[t[h]]]).applyMatrix4(n),d.copy(u).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size),d.add(e[a]),e[a+=1].copy(d),a+=1}return this.geometry.verticesNeedUpdate=!0,this}}(),THREE.VertexTangentsHelper=function(t,e,i,r){this.object=t,this.size=void 0!==e?e:1,e=void 0!==i?i:255,r=void 0!==r?r:1,i=new THREE.Geometry;for(var n=0,a=(t=t.geometry.faces).length;n<a;n++)for(var o=0,s=t[n].vertexTangents.length;o<s;o++)i.vertices.push(new THREE.Vector3),i.vertices.push(new THREE.Vector3);THREE.Line.call(this,i,new THREE.LineBasicMaterial({color:e,linewidth:r}),THREE.LinePieces),this.matrixAutoUpdate=!1,this.update()},THREE.VertexTangentsHelper.prototype=Object.create(THREE.Line.prototype),THREE.VertexTangentsHelper.prototype.constructor=THREE.VertexTangentsHelper,THREE.VertexTangentsHelper.prototype.update=function(){var d=new THREE.Vector3;return function(t){t=["a","b","c","d"],this.object.updateMatrixWorld(!0);for(var e=this.geometry.vertices,i=this.object.geometry.vertices,r=this.object.geometry.faces,n=this.object.matrixWorld,a=0,o=0,s=r.length;o<s;o++)for(var l=r[o],h=0,c=l.vertexTangents.length;h<c;h++){var u=l.vertexTangents[h];e[a].copy(i[l[t[h]]]).applyMatrix4(n),d.copy(u).transformDirection(n).multiplyScalar(this.size),d.add(e[a]),e[a+=1].copy(d),a+=1}return this.geometry.verticesNeedUpdate=!0,this}}(),THREE.WireframeHelper=function(t,e){function i(t,e){return t-e}var r=void 0!==e?e:16777215,n=[0,0],a={},o=["a","b","c"],s=new THREE.BufferGeometry;if(t.geometry instanceof THREE.Geometry){for(var l=t.geometry.vertices,h=t.geometry.faces,c=0,u=new Uint32Array(6*h.length),d=0,p=h.length;d<p;d++)for(var f=h[d],m=0;m<3;m++){n[0]=f[o[m]],n[1]=f[o[(m+1)%3]],n.sort(i),void 0===a[E=n.toString()]&&(u[2*c]=n[0],u[2*c+1]=n[1],a[E]=!0,c++)}for(n=new Float32Array(6*c),d=0,p=c;d<p;d++)for(m=0;m<2;m++)c=l[u[2*d+m]],n[(o=6*d+3*m)+0]=c.x,n[o+1]=c.y,n[o+2]=c.z;s.addAttribute("position",new THREE.BufferAttribute(n,3))}else if(t.geometry instanceof THREE.BufferGeometry){if(void 0!==t.geometry.attributes.index){l=t.geometry.attributes.position.array,p=t.geometry.attributes.index.array,(c=0)===(h=t.geometry.drawcalls).length&&(h=[{count:p.length,index:0,start:0}]);u=new Uint32Array(2*p.length),f=0;for(var g=h.length;f<g;++f){m=h[f].start;for(var E=h[f].count,v=(o=h[f].index,d=m,m+E);d<v;d+=3)for(m=0;m<3;m++)n[0]=o+p[d+m],n[1]=o+p[d+(m+1)%3],n.sort(i),void 0===a[E=n.toString()]&&(u[2*c]=n[0],u[2*c+1]=n[1],a[E]=!0,c++)}for(n=new Float32Array(6*c),d=0,p=c;d<p;d++)for(m=0;m<2;m++)o=6*d+3*m,c=3*u[2*d+m],n[o+0]=l[c],n[o+1]=l[c+1],n[o+2]=l[c+2]}else for(u=(c=(l=t.geometry.attributes.position.array).length/3)/3,n=new Float32Array(6*c),d=0,p=u;d<p;d++)for(m=0;m<3;m++)u=9*d+3*m,n[(o=18*d+6*m)+0]=l[u],n[o+1]=l[u+1],n[o+2]=l[u+2],c=9*d+(m+1)%3*3,n[o+3]=l[c],n[o+4]=l[c+1],n[o+5]=l[c+2];s.addAttribute("position",new THREE.BufferAttribute(n,3))}THREE.Line.call(this,s,new THREE.LineBasicMaterial({color:r}),THREE.LinePieces),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1},THREE.WireframeHelper.prototype=Object.create(THREE.Line.prototype),THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper,THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this),this.render=function(t){}},THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype),THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject,THREE.MorphBlendMesh=function(t,e){THREE.Mesh.call(this,t,e),this.animationsMap={},this.animationsList=[];var i=this.geometry.morphTargets.length;this.createAnimation("__default",0,i-1,i/1),this.setAnimationWeight("__default",1)},THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype),THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh,THREE.MorphBlendMesh.prototype.createAnimation=function(t,e,i,r){e={startFrame:e,endFrame:i,length:i-e+1,fps:r,duration:(i-e)/r,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1},this.animationsMap[t]=e,this.animationsList.push(e)},THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(t){for(var e,i=/([a-z]+)_?(\d+)/,r={},n=this.geometry,a=0,o=n.morphTargets.length;a<o;a++){var s=n.morphTargets[a].name.match(i);if(s&&1<s.length){var l=s[1];r[l]||(r[l]={start:1/0,end:-1/0}),a<(s=r[l]).start&&(s.start=a),a>s.end&&(s.end=a),e=e||l}}for(l in r)s=r[l],this.createAnimation(l,s.start,s.end,t);this.firstAnimation=e},THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(t){(t=this.animationsMap[t])&&(t.direction=1,t.directionBackwards=!1)},THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(t){(t=this.animationsMap[t])&&(t.direction=-1,t.directionBackwards=!0)},THREE.MorphBlendMesh.prototype.setAnimationFPS=function(t,e){var i=this.animationsMap[t];i&&(i.fps=e,i.duration=(i.end-i.start)/i.fps)},THREE.MorphBlendMesh.prototype.setAnimationDuration=function(t,e){var i=this.animationsMap[t];i&&(i.duration=e,i.fps=(i.end-i.start)/i.duration)},THREE.MorphBlendMesh.prototype.setAnimationWeight=function(t,e){var i=this.animationsMap[t];i&&(i.weight=e)},THREE.MorphBlendMesh.prototype.setAnimationTime=function(t,e){var i=this.animationsMap[t];i&&(i.time=e)},THREE.MorphBlendMesh.prototype.getAnimationTime=function(t){var e=0;return(t=this.animationsMap[t])&&(e=t.time),e},THREE.MorphBlendMesh.prototype.getAnimationDuration=function(t){var e=-1;return(t=this.animationsMap[t])&&(e=t.duration),e},THREE.MorphBlendMesh.prototype.playAnimation=function(t){var e=this.animationsMap[t];e?(e.time=0,e.active=!0):console.warn("animation["+t+"] undefined")},THREE.MorphBlendMesh.prototype.stopAnimation=function(t){(t=this.animationsMap[t])&&(t.active=!1)},THREE.MorphBlendMesh.prototype.update=function(t){for(var e=0,i=this.animationsList.length;e<i;e++){var r=this.animationsList[e];if(r.active){var n=r.duration/r.length;r.time+=r.direction*t,r.mirroredLoop?(r.time>r.duration||r.time<0)&&(r.direction*=-1,r.time>r.duration&&(r.time=r.duration,r.directionBackwards=!0),r.time<0&&(r.time=0,r.directionBackwards=!1)):(r.time%=r.duration,r.time<0&&(r.time+=r.duration));var a=r.startFrame+THREE.Math.clamp(Math.floor(r.time/n),0,r.length-1),o=r.weight;a!==r.currentFrame&&(this.morphTargetInfluences[r.lastFrame]=0,this.morphTargetInfluences[r.currentFrame]=1*o,this.morphTargetInfluences[a]=0,r.lastFrame=r.currentFrame,r.currentFrame=a),n=r.time%n/n,r.directionBackwards&&(n=1-n),this.morphTargetInfluences[r.currentFrame]=n*o,this.morphTargetInfluences[r.lastFrame]=(1-n)*o}}},function(c,u){"use strict";c.MixItUp=function(){this._execAction("_constructor",0),c.extend(this,{selectors:{target:".mix",filter:".filter",sort:".sort"},animation:{enable:!0,effects:"fade scale",duration:600,easing:"ease",perspectiveDistance:"3000",perspectiveOrigin:"50% 50%",queue:!0,queueLimit:1,animateChangeLayout:!1,animateResizeContainer:!0,animateResizeTargets:!1,staggerSequence:!1,reverseOut:!1},callbacks:{onMixLoad:!1,onMixStart:!1,onMixBusy:!1,onMixEnd:!1,onMixFail:!1,_user:!1},controls:{enable:!0,live:!1,toggleFilterButtons:!1,toggleLogic:"or",activeClass:"active"},layout:{display:"inline-block",containerClass:"",containerClassFail:"fail"},load:{filter:"all",sort:!1},_$body:null,_$container:null,_$targets:null,_$parent:null,_$sortButtons:null,_$filterButtons:null,_suckMode:!1,_mixing:!1,_sorting:!1,_clicking:!1,_loading:!0,_changingLayout:!1,_changingClass:!1,_changingDisplay:!1,_origOrder:[],_startOrder:[],_newOrder:[],_activeFilter:null,_toggleArray:[],_toggleString:"",_activeSort:"default:asc",_newSort:null,_startHeight:null,_newHeight:null,_incPadding:!0,_newDisplay:null,_newClass:null,_targetsBound:0,_targetsDone:0,_queue:[],_$show:c(),_$hide:c()}),this._execAction("_constructor",1)},c.MixItUp.prototype={constructor:c.MixItUp,_instances:{},_handled:{_filter:{},_sort:{}},_bound:{_filter:{},_sort:{}},_actions:{},_filters:{},extend:function(t){for(var e in t)c.MixItUp.prototype[e]=t[e]},addAction:function(t,e,i,r){c.MixItUp.prototype._addHook("_actions",t,e,i,r)},addFilter:function(t,e,i,r){c.MixItUp.prototype._addHook("_filters",t,e,i,r)},_addHook:function(t,e,i,r,n){var a=c.MixItUp.prototype[t],o={};n=1===n||"post"===n?"post":"pre",o[e]={},o[e][n]={},o[e][n][i]=r,c.extend(!0,a,o)},_init:function(t,e){var i=this;if(i._execAction("_init",0,arguments),e&&c.extend(!0,i,e),i._$body=c("body"),i._domNode=t,i._$container=c(t),i._$container.addClass(i.layout.containerClass),i._id=t.id,i._platformDetect(),i._brake=i._getPrefixedCSS("transition","none"),i._refresh(!0),i._$parent=i._$targets.parent().length?i._$targets.parent():i._$container,i.load.sort&&(i._newSort=i._parseSort(i.load.sort),i._newSortString=i.load.sort,i._activeSort=i.load.sort,i._sort(),i._printSort()),i._activeFilter="all"===i.load.filter?i.selectors.target:"none"===i.load.filter?"":i.load.filter,i.controls.enable&&i._bindHandlers(),i.controls.toggleFilterButtons){i._buildToggleArray();for(var r=0;r<i._toggleArray.length;r++)i._updateControls({filter:i._toggleArray[r],sort:i._activeSort},!0)}else i.controls.enable&&i._updateControls({filter:i._activeFilter,sort:i._activeSort});i._filter(),i._init=!0,i._$container.data("mixItUp",i),i._execAction("_init",1,arguments),i._buildState(),i._$targets.css(i._brake),i._goMix(i.animation.enable)},_platformDetect:function(){var t=this,i=["Webkit","Moz","O","ms"],e=["webkit","moz"],r=window.navigator.appVersion.match(/Chrome\/(\d+)\./)||!1,n="undefined"!=typeof InstallTrigger,a=function(t){for(var e=0;e<i.length;e++)if(i[e]+"Transition"in t.style)return{prefix:"-"+i[e].toLowerCase()+"-",vendor:i[e]};return"transition"in t.style&&""}(t._domNode);t._execAction("_platformDetect",0),t._chrome=!!r&&parseInt(r[1],10),t._ff=n&&parseInt(window.navigator.userAgent.match(/rv:([^)]+)\)/)[1]),t._prefix=a.prefix,t._vendor=a.vendor,t._suckMode=!window.atob||!t._prefix,t._suckMode&&(t.animation.enable=!1),t._ff&&t._ff<=4&&(t.animation.enable=!1);for(var o=0;o<e.length&&!window.requestAnimationFrame;o++)window.requestAnimationFrame=window[e[o]+"RequestAnimationFrame"];"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"==typeof"test".__proto__?function(t){return t.__proto__}:function(t){return t.constructor.prototype}),t._domNode.nextElementSibling===u&&Object.defineProperty(Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),t._execAction("_platformDetect",1)},_refresh:function(t,e){var i=this;i._execAction("_refresh",0,arguments),i._$targets=i._$container.find(i.selectors.target);for(var r=0;r<i._$targets.length;r++){if((h=i._$targets[r]).dataset===u||e){h.dataset={};for(var n=0;n<h.attributes.length;n++){var a=h.attributes[n],o=a.name,s=a.value;if(-1<o.indexOf("data-")){var l=i._helpers._camelCase(o.substring(5,o.length));h.dataset[l]=s}}}h.mixParent===u&&(h.mixParent=i._id)}if(i._$targets.length&&t||!i._origOrder.length&&i._$targets.length){i._origOrder=[];for(r=0;r<i._$targets.length;r++){var h=i._$targets[r];i._origOrder.push(h)}}i._execAction("_refresh",1,arguments)},_bindHandlers:function(){var t=this,e=c.MixItUp.prototype._bound._filter,i=c.MixItUp.prototype._bound._sort;t._execAction("_bindHandlers",0),t.controls.live?t._$body.on("click.mixItUp."+t._id,t.selectors.sort,function(){t._processClick(c(this),"sort")}).on("click.mixItUp."+t._id,t.selectors.filter,function(){t._processClick(c(this),"filter")}):(t._$sortButtons=c(t.selectors.sort),t._$filterButtons=c(t.selectors.filter),t._$sortButtons.on("click.mixItUp."+t._id,function(){t._processClick(c(this),"sort")}),t._$filterButtons.on("click.mixItUp."+t._id,function(){t._processClick(c(this),"filter")})),e[t.selectors.filter]=e[t.selectors.filter]===u?1:e[t.selectors.filter]+1,i[t.selectors.sort]=i[t.selectors.sort]===u?1:i[t.selectors.sort]+1,t._execAction("_bindHandlers",1)},_processClick:function(t,e){function i(t,e,i){var r=c.MixItUp.prototype;r._handled["_"+e][n.selectors[e]]=r._handled["_"+e][n.selectors[e]]===u?1:r._handled["_"+e][n.selectors[e]]+1,r._handled["_"+e][n.selectors[e]]===r._bound["_"+e][n.selectors[e]]&&(t[(i?"remove":"add")+"Class"](n.controls.activeClass),delete r._handled["_"+e][n.selectors[e]])}var n=this;if(n._execAction("_processClick",0,arguments),!n._mixing||n.animation.queue&&n._queue.length<n.animation.queueLimit){if(n._clicking=!0,"sort"===e){var r=t.attr("data-sort");(!t.hasClass(n.controls.activeClass)||-1<r.indexOf("random"))&&(c(n.selectors.sort).removeClass(n.controls.activeClass),i(t,e),n.sort(r))}if("filter"===e){var a,o=t.attr("data-filter"),s="or"===n.controls.toggleLogic?",":"";n.controls.toggleFilterButtons?(n._buildToggleArray(),t.hasClass(n.controls.activeClass)?(i(t,e,!0),a=n._toggleArray.indexOf(o),n._toggleArray.splice(a,1)):(i(t,e),n._toggleArray.push(o)),n._toggleArray=c.grep(n._toggleArray,function(t){return t}),n._toggleString=n._toggleArray.join(s),n.filter(n._toggleString)):t.hasClass(n.controls.activeClass)||(c(n.selectors.filter).removeClass(n.controls.activeClass),i(t,e),n.filter(o))}n._execAction("_processClick",1,arguments)}else"function"==typeof n.callbacks.onMixBusy&&n.callbacks.onMixBusy.call(n._domNode,n._state,n),n._execAction("_processClickBusy",1,arguments)},_buildToggleArray:function(){var t=this,e=t._activeFilter.replace(/\s/g,"");if(t._execAction("_buildToggleArray",0,arguments),"or"===t.controls.toggleLogic)t._toggleArray=e.split(",");else{t._toggleArray=e.split("."),t._toggleArray[0]||t._toggleArray.shift();for(var i,r=0;i=t._toggleArray[r];r++)t._toggleArray[r]="."+i}t._execAction("_buildToggleArray",1,arguments)},_updateControls:function(t,i){function e(t,e){try{i&&"filter"===a&&"none"!==n.filter&&""!==n.filter?t.filter(e).addClass(r.controls.activeClass):t.removeClass(r.controls.activeClass).filter(e).addClass(r.controls.activeClass)}catch(t){}}var r=this,n={filter:t.filter,sort:t.sort},a="filter",o=null;r._execAction("_updateControls",0,arguments),t.filter===u&&(n.filter=r._activeFilter),t.sort===u&&(n.sort=r._activeSort),n.filter===r.selectors.target&&(n.filter="all");for(var s=0;s<2;s++)(o=r.controls.live?c(r.selectors[a]):r["_$"+a+"Buttons"])&&e(o,"[data-"+a+'="'+n[a]+'"]'),a="sort";r._execAction("_updateControls",1,arguments)},_filter:function(){this._execAction("_filter",0);for(var t=0;t<this._$targets.length;t++){var e=c(this._$targets[t]);e.is(this._activeFilter)?this._$show=this._$show.add(e):this._$hide=this._$hide.add(e)}this._execAction("_filter",1)},_sort:function(){var i=this;i._execAction("_sort",0),i._startOrder=[];for(var t=0;t<i._$targets.length;t++){var e=i._$targets[t];i._startOrder.push(e)}switch(i._newSort[0].sortBy){case"default":i._newOrder=i._origOrder;break;case"random":i._newOrder=function(t){for(var e=t.slice(),i=e.length,r=i;r--;){var n=parseInt(Math.random()*i),a=e[r];e[r]=e[n],e[n]=a}return e}(i._startOrder);break;case"custom":i._newOrder=i._newSort[0].order;break;default:i._newOrder=i._startOrder.concat().sort(function(t,e){return i._compare(t,e)})}i._execAction("_sort",1)},_compare:function(t,e,i){i=i||0;function r(t){return t.dataset[n._newSort[i].sortBy]||0}var n=this,a=n._newSort[i].order,o=isNaN(1*r(t))?r(t).toLowerCase():1*r(t),s=isNaN(1*r(e))?r(e).toLowerCase():1*r(e);return o<s?"asc"===a?-1:1:s<o?"asc"===a?1:-1:o===s&&n._newSort.length>i+1?n._compare(t,e,i+1):0},_printSort:function(t){var e=this,i=t?e._startOrder:e._newOrder,r=e._$parent[0].querySelectorAll(e.selectors.target),n=r.length?r[r.length-1].nextElementSibling:null,a=document.createDocumentFragment();e._execAction("_printSort",0,arguments);for(var o=0;o<r.length;o++){var s=r[o],l=s.nextSibling;"absolute"!==s.style.position&&(l&&"#text"===l.nodeName&&e._$parent[0].removeChild(l),e._$parent[0].removeChild(s))}for(o=0;o<i.length;o++){var h=i[o];if("default"!==e._newSort[0].sortBy||"desc"!==e._newSort[0].order||t)a.appendChild(h),a.appendChild(document.createTextNode(" "));else{var c=a.firstChild;a.insertBefore(h,c),a.insertBefore(document.createTextNode(" "),h)}}n?e._$parent[0].insertBefore(a,n):e._$parent[0].appendChild(a),e._execAction("_printSort",1,arguments)},_parseSort:function(t){for(var e="string"==typeof t?t.split(" "):[t],i=[],r=0;r<e.length;r++){var n="string"==typeof t?e[r].split(":"):["custom",e[r]],a={sortBy:this._helpers._camelCase(n[0]),order:n[1]||"asc"};if(i.push(a),"default"===a.sortBy||"random"===a.sortBy)break}return this._execFilter("_parseSort",i,arguments)},_parseEffects:function(){function l(t,e,i){if(-1<a.animation.effects.indexOf(t)){if(e){var r=a.animation.effects.indexOf(t+"(");if(-1<r){var n=a.animation.effects.substring(r);return{val:/\(([^)]+)\)/.exec(n)[1]}}}return!0}return!1}function t(t,e){for(var i=[["scale",".01"],["translateX","20px"],["translateY","20px"],["translateZ","20px"],["rotateX","90deg"],["rotateY","90deg"],["rotateZ","180deg"]],r=0;r<i.length;r++){var n=i[r][0],a=i[r][1],o=e&&"scale"!==n;h[t]+=l(n)?n+"("+(s=l(n,!0).val||a,o?"-"===s.charAt(0)?s.substr(1,s.length):"-"+s:s)+") ":""}var s}var a=this,h={opacity:"",transformIn:"",transformOut:"",filter:""};return h.opacity=l("fade")?l("fade",!0).val||"0":"1",t("transformIn"),a.animation.reverseOut?t("transformOut",!0):h.transformOut=h.transformIn,h.transition={},h.transition=a._getPrefixedCSS("transition","all "+a.animation.duration+"ms "+a.animation.easing+", opacity "+a.animation.duration+"ms linear"),a.animation.stagger=!!l("stagger"),a.animation.staggerDuration=parseInt(l("stagger")&&l("stagger",!0).val?l("stagger",!0).val:100),a._execFilter("_parseEffects",h)},_buildState:function(t){var e,i=this;return i._execAction("_buildState",0),e={activeFilter:""===i._activeFilter?"none":i._activeFilter,activeSort:t&&i._newSortString?i._newSortString:i._activeSort,fail:!i._$show.length&&""!==i._activeFilter,$targets:i._$targets,$show:i._$show,$hide:i._$hide,totalTargets:i._$targets.length,totalShow:i._$show.length,totalHide:i._$hide.length,display:t&&i._newDisplay?i._newDisplay:i.layout.display},t?i._execFilter("_buildState",e):(i._state=e,void i._execAction("_buildState",1))},_goMix:function(t){function e(){i._chrome&&31===i._chrome&&a(i._$parent[0]),i._setInter(),r()}var i=this,r=function(){var t=window.pageYOffset,e=window.pageXOffset;document.documentElement.scrollHeight,i._getInterMixData(),i._setFinal(),i._getFinalMixData(),window.pageYOffset!==t&&window.scrollTo(e,t),i._prepTargets(),window.requestAnimationFrame?requestAnimationFrame(n):setTimeout(function(){n()},20)},n=function(){i._animateTargets(),0===i._targetsBound&&i._cleanUp()},a=function(t){var e=t.parentElement,i=document.createElement("div"),r=document.createDocumentFragment();e.insertBefore(i,t),r.appendChild(t),e.replaceChild(t,i)},o=i._buildState(!0);i._execAction("_goMix",0,arguments),i.animation.duration||(t=!1),i._mixing=!0,i._$container.removeClass(i.layout.containerClassFail),"function"==typeof i.callbacks.onMixStart&&i.callbacks.onMixStart.call(i._domNode,i._state,o,i),i._$container.trigger("mixStart",[i._state,o,i]),i._getOrigMixData(),t&&!i._suckMode?window.requestAnimationFrame?requestAnimationFrame(e):e():i._cleanUp(),i._execAction("_goMix",1,arguments)},_getTargetData:function(t,e){var i;t.dataset[e+"PosX"]=t.offsetLeft,t.dataset[e+"PosY"]=t.offsetTop,this.animation.animateResizeTargets&&(i=this._suckMode?{marginBottom:"",marginRight:""}:window.getComputedStyle(t),t.dataset[e+"MarginBottom"]=parseInt(i.marginBottom),t.dataset[e+"MarginRight"]=parseInt(i.marginRight),t.dataset[e+"Width"]=t.offsetWidth,t.dataset[e+"Height"]=t.offsetHeight)},_getOrigMixData:function(){var t=this,e=t._suckMode?{boxSizing:""}:window.getComputedStyle(t._$parent[0]),i=e.boxSizing||e[t._vendor+"BoxSizing"];t._incPadding="border-box"===i,t._execAction("_getOrigMixData",0),t._suckMode||(t.effects=t._parseEffects()),t._$toHide=t._$hide.filter(":visible"),t._$toShow=t._$show.filter(":hidden"),t._$pre=t._$targets.filter(":visible"),t._startHeight=t._incPadding?t._$parent.outerHeight():t._$parent.height();for(var r=0;r<t._$pre.length;r++){var n=t._$pre[r];t._getTargetData(n,"orig")}t._execAction("_getOrigMixData",1)},_setInter:function(){var t=this;t._execAction("_setInter",0),t._changingLayout&&t.animation.animateChangeLayout?(t._$toShow.css("display",t._newDisplay),t._changingClass&&t._$container.removeClass(t.layout.containerClass).addClass(t._newClass)):t._$toShow.css("display",t.layout.display),t._execAction("_setInter",1)},_getInterMixData:function(){this._execAction("_getInterMixData",0);for(var t=0;t<this._$toShow.length;t++){var e=this._$toShow[t];this._getTargetData(e,"inter")}for(t=0;t<this._$pre.length;t++){e=this._$pre[t];this._getTargetData(e,"inter")}this._execAction("_getInterMixData",1)},_setFinal:function(){this._execAction("_setFinal",0),this._sorting&&this._printSort(),this._$toHide.removeStyle("display"),this._changingLayout&&this.animation.animateChangeLayout&&this._$pre.css("display",this._newDisplay),this._execAction("_setFinal",1)},_getFinalMixData:function(){var t=this;t._execAction("_getFinalMixData",0);for(var e=0;e<t._$toShow.length;e++){var i=t._$toShow[e];t._getTargetData(i,"final")}for(e=0;e<t._$pre.length;e++){i=t._$pre[e];t._getTargetData(i,"final")}t._newHeight=t._incPadding?t._$parent.outerHeight():t._$parent.height(),t._sorting&&t._printSort(!0),t._$toShow.removeStyle("display"),t._$pre.css("display",t.layout.display),t._changingClass&&t.animation.animateChangeLayout&&t._$container.removeClass(t._newClass).addClass(t.layout.containerClass),t._execAction("_getFinalMixData",1)},_prepTargets:function(){var t=this,e={_in:t._getPrefixedCSS("transform",t.effects.transformIn),_out:t._getPrefixedCSS("transform",t.effects.transformOut)};t._execAction("_prepTargets",0),t.animation.animateResizeContainer&&t._$parent.css("height",t._startHeight+"px");for(var i=0;i<t._$toShow.length;i++){var r=t._$toShow[i],n=c(r);r.style.opacity=t.effects.opacity,r.style.display=t._changingLayout&&t.animation.animateChangeLayout?t._newDisplay:t.layout.display,n.css(e._in),t.animation.animateResizeTargets&&(r.style.width=r.dataset.finalWidth+"px",r.style.height=r.dataset.finalHeight+"px",r.style.marginRight=-(r.dataset.finalWidth-r.dataset.interWidth)+1*r.dataset.finalMarginRight+"px",r.style.marginBottom=-(r.dataset.finalHeight-r.dataset.interHeight)+1*r.dataset.finalMarginBottom+"px")}for(i=0;i<t._$pre.length;i++){r=t._$pre[i],n=c(r);var a=r.dataset.origPosX-r.dataset.interPosX,o=r.dataset.origPosY-r.dataset.interPosY;e=t._getPrefixedCSS("transform","translate("+a+"px,"+o+"px)");n.css(e),t.animation.animateResizeTargets&&(r.style.width=r.dataset.origWidth+"px",r.style.height=r.dataset.origHeight+"px",r.dataset.origWidth-r.dataset.finalWidth&&(r.style.marginRight=-(r.dataset.origWidth-r.dataset.interWidth)+1*r.dataset.origMarginRight+"px"),r.dataset.origHeight-r.dataset.finalHeight&&(r.style.marginBottom=-(r.dataset.origHeight-r.dataset.interHeight)+1*r.dataset.origMarginBottom+"px"))}t._execAction("_prepTargets",1)},_animateTargets:function(){var t=this;t._execAction("_animateTargets",0),t._targetsDone=0,t._targetsBound=0,t._$parent.css(t._getPrefixedCSS("perspective",t.animation.perspectiveDistance+"px")).css(t._getPrefixedCSS("perspective-origin",t.animation.perspectiveOrigin)),t.animation.animateResizeContainer&&t._$parent.css(t._getPrefixedCSS("transition","height "+t.animation.duration+"ms ease")).css("height",t._newHeight+"px");for(var e=0;e<t._$toShow.length;e++){var i=t._$toShow[e],r=c(i),n={x:i.dataset.finalPosX-i.dataset.interPosX,y:i.dataset.finalPosY-i.dataset.interPosY},a=t._getDelay(e),o={};i.style.opacity="";for(var s=0;s<2;s++){var l=0===s?l=t._prefix:"";t._ff&&t._ff<=20&&(o[l+"transition-property"]="all",o[l+"transition-timing-function"]=t.animation.easing+"ms",o[l+"transition-duration"]=t.animation.duration+"ms"),o[l+"transition-delay"]=a+"ms",o[l+"transform"]="translate("+n.x+"px,"+n.y+"px)"}(t.effects.transform||t.effects.opacity)&&t._bindTargetDone(r),t._ff&&t._ff<=20?r.css(o):r.css(t.effects.transition).css(o)}for(e=0;e<t._$pre.length;e++){i=t._$pre[e],r=c(i),n={x:i.dataset.finalPosX-i.dataset.interPosX,y:i.dataset.finalPosY-i.dataset.interPosY},a=t._getDelay(e);i.dataset.finalPosX===i.dataset.origPosX&&i.dataset.finalPosY===i.dataset.origPosY||t._bindTargetDone(r),r.css(t._getPrefixedCSS("transition","all "+t.animation.duration+"ms "+t.animation.easing+" "+a+"ms")),r.css(t._getPrefixedCSS("transform","translate("+n.x+"px,"+n.y+"px)")),t.animation.animateResizeTargets&&(i.dataset.origWidth-i.dataset.finalWidth&&1*i.dataset.finalWidth&&(i.style.width=i.dataset.finalWidth+"px",i.style.marginRight=-(i.dataset.finalWidth-i.dataset.interWidth)+1*i.dataset.finalMarginRight+"px"),i.dataset.origHeight-i.dataset.finalHeight&&1*i.dataset.finalHeight&&(i.style.height=i.dataset.finalHeight+"px",i.style.marginBottom=-(i.dataset.finalHeight-i.dataset.interHeight)+1*i.dataset.finalMarginBottom+"px"))}t._changingClass&&t._$container.removeClass(t.layout.containerClass).addClass(t._newClass);for(e=0;e<t._$toHide.length;e++){i=t._$toHide[e],r=c(i),a=t._getDelay(e);var h={};for(s=0;s<2;s++){h[(l=0===s?l=t._prefix:"")+"transition-delay"]=a+"ms",h[l+"transform"]=t.effects.transformOut,h.opacity=t.effects.opacity}r.css(t.effects.transition).css(h),(t.effects.transform||t.effects.opacity)&&t._bindTargetDone(r)}t._execAction("_animateTargets",1)},_bindTargetDone:function(e){var i=this,r=e[0];i._execAction("_bindTargetDone",0,arguments),r.dataset.bound||(r.dataset.bound=!0,i._targetsBound++,e.on("webkitTransitionEnd.mixItUp transitionend.mixItUp",function(t){(-1<t.originalEvent.propertyName.indexOf("transform")||-1<t.originalEvent.propertyName.indexOf("opacity"))&&c(t.originalEvent.target).is(i.selectors.target)&&(e.off(".mixItUp"),r.dataset.bound="",i._targetDone())})),i._execAction("_bindTargetDone",1,arguments)},_targetDone:function(){this._execAction("_targetDone",0),this._targetsDone++,this._targetsDone===this._targetsBound&&this._cleanUp(),this._execAction("_targetDone",1)},_cleanUp:function(){var t=this,e=t.animation.animateResizeTargets?"transform opacity width height margin-bottom margin-right":"transform opacity";t._execAction("_cleanUp",0),t._changingLayout?t._$show.css("display",t._newDisplay):t._$show.css("display",t.layout.display),t._$targets.css(t._brake),t._$targets.removeStyle(e,t._prefix).removeAttr("data-inter-pos-x data-inter-pos-y data-final-pos-x data-final-pos-y data-orig-pos-x data-orig-pos-y data-orig-height data-orig-width data-final-height data-final-width data-inter-width data-inter-height data-orig-margin-right data-orig-margin-bottom data-inter-margin-right data-inter-margin-bottom data-final-margin-right data-final-margin-bottom"),t._$hide.removeStyle("display"),t._$parent.removeStyle("height transition perspective-distance perspective perspective-origin-x perspective-origin-y perspective-origin perspectiveOrigin",t._prefix),t._sorting&&(t._printSort(),t._activeSort=t._newSortString,t._sorting=!1),t._changingLayout&&(t._changingDisplay&&(t.layout.display=t._newDisplay,t._changingDisplay=!1),t._changingClass&&(t._$parent.removeClass(t.layout.containerClass).addClass(t._newClass),t.layout.containerClass=t._newClass,t._changingClass=!1),t._changingLayout=!1),t._refresh(),t._buildState(),t._state.fail&&t._$container.addClass(t.layout.containerClassFail),t._$show=c(),t._$hide=c(),window.requestAnimationFrame&&requestAnimationFrame(function(){t._$targets.removeStyle("transition",t._prefix)}),t._mixing=!1,"function"==typeof t.callbacks._user&&t.callbacks._user.call(t._domNode,t._state,t),"function"==typeof t.callbacks.onMixEnd&&t.callbacks.onMixEnd.call(t._domNode,t._state,t),t._$container.trigger("mixEnd",[t._state,t]),t._state.fail&&("function"==typeof t.callbacks.onMixFail&&t.callbacks.onMixFail.call(t._domNode,t._state,t),t._$container.trigger("mixFail",[t._state,t])),t._loading&&("function"==typeof t.callbacks.onMixLoad&&t.callbacks.onMixLoad.call(t._domNode,t._state,t),t._$container.trigger("mixLoad",[t._state,t])),t._queue.length&&(t._execAction("_queue",0),t.multiMix(t._queue[0][0],t._queue[0][1],t._queue[0][2]),t._queue.splice(0,1)),t._execAction("_cleanUp",1),t._loading=!1},_getPrefixedCSS:function(t,e,i){var r={},n="",a=-1;for(a=0;a<2;a++)r[(n=0===a?this._prefix:"")+t]=i?n+e:e;return this._execFilter("_getPrefixedCSS",r,arguments)},_getDelay:function(t){var e="function"==typeof this.animation.staggerSequence?this.animation.staggerSequence.call(this._domNode,t,this._state):t,i=this.animation.stagger?e*this.animation.staggerDuration:0;return this._execFilter("_getDelay",i,arguments)},_parseMultiMixArgs:function(t){for(var e={command:null,animate:this.animation.enable,callback:null},i=0;i<t.length;i++){var r=t[i];null!==r&&("object"==typeof r||"string"==typeof r?e.command=r:"boolean"==typeof r?e.animate=r:"function"==typeof r&&(e.callback=r))}return this._execFilter("_parseMultiMixArgs",e,arguments)},_parseInsertArgs:function(t){for(var e={index:0,$object:c(),multiMix:{filter:this._state.activeFilter},callback:null},i=0;i<t.length;i++){var r=t[i];"number"==typeof r?e.index=r:"object"==typeof r&&r instanceof c?e.$object=r:"object"==typeof r&&this._helpers._isElement(r)?e.$object=c(r):"object"==typeof r&&null!==r?e.multiMix=r:"boolean"!=typeof r||r?"function"==typeof r&&(e.callback=r):e.multiMix=!1}return this._execFilter("_parseInsertArgs",e,arguments)},_execAction:function(t,e,i){var r=e?"post":"pre";if(!this._actions.isEmptyObject&&this._actions.hasOwnProperty(t))for(var n in this._actions[t][r])this._actions[t][r][n].call(this,i)},_execFilter:function(t,e,i){if(this._filters.isEmptyObject||!this._filters.hasOwnProperty(t))return e;for(var r in this._filters[t])return this._filters[t][r].call(this,i)},_helpers:{_camelCase:function(t){return t.replace(/-([a-z])/g,function(t){return t[1].toUpperCase()})},_isElement:function(t){return window.HTMLElement?t instanceof HTMLElement:null!==t&&1===t.nodeType&&"string"===t.nodeName}},isMixing:function(){return this._execFilter("isMixing",this._mixing)},filter:function(){var t=this._parseMultiMixArgs(arguments);this._clicking&&(this._toggleString=""),this.multiMix({filter:t.command},t.animate,t.callback)},sort:function(){var t=this._parseMultiMixArgs(arguments);this.multiMix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this._parseMultiMixArgs(arguments);this.multiMix({changeLayout:t.command},t.animate,t.callback)},multiMix:function(){var t=this,e=t._parseMultiMixArgs(arguments);if(t._execAction("multiMix",0,arguments),t._mixing)t.animation.queue&&t._queue.length<t.animation.queueLimit?(t._queue.push(arguments),t.controls.enable&&!t._clicking&&t._updateControls(e.command),t._execAction("multiMixQueue",1,arguments)):("function"==typeof t.callbacks.onMixBusy&&t.callbacks.onMixBusy.call(t._domNode,t._state,t),t._$container.trigger("mixBusy",[t._state,t]),t._execAction("multiMixBusy",1,arguments));else{t.controls.enable&&!t._clicking&&(t.controls.toggleFilterButtons&&t._buildToggleArray(),t._updateControls(e.command,t.controls.toggleFilterButtons)),t._queue.length<2&&(t._clicking=!1),delete t.callbacks._user,e.callback&&(t.callbacks._user=e.callback);var i=e.command.sort,r=e.command.filter,n=e.command.changeLayout;t._refresh(),i&&(t._newSort=t._parseSort(i),t._newSortString=i,t._sorting=!0,t._sort()),r!==u&&(r="all"===r?t.selectors.target:r,t._activeFilter=r),t._filter(),n&&(t._newDisplay="string"==typeof n?n:n.display||t.layout.display,t._newClass=n.containerClass||"",t._newDisplay===t.layout.display&&t._newClass===t.layout.containerClass||(t._changingLayout=!0,t._changingClass=t._newClass!==t.layout.containerClass,t._changingDisplay=t._newDisplay!==t.layout.display)),t._$targets.css(t._brake),t._goMix(e.animate^t.animation.enable?e.animate:t.animation.enable),t._execAction("multiMix",1,arguments)}},insert:function(){var t=this,e=t._parseInsertArgs(arguments),i="function"==typeof e.callback?e.callback:null,r=document.createDocumentFragment(),n=(t._refresh(),t._$targets.length?e.index<t._$targets.length||!t._$targets.length?t._$targets[e.index]:t._$targets[t._$targets.length-1].nextElementSibling:t._$parent[0].children[0]);if(t._execAction("insert",0,arguments),e.$object){for(var a=0;a<e.$object.length;a++){var o=e.$object[a];r.appendChild(o),r.appendChild(document.createTextNode(" "))}t._$parent[0].insertBefore(r,n)}t._execAction("insert",1,arguments),"object"==typeof e.multiMix&&t.multiMix(e.multiMix,i)},prepend:function(){var t=this._parseInsertArgs(arguments);this.insert(0,t.$object,t.multiMix,t.callback)},append:function(){var t=this._parseInsertArgs(arguments);this.insert(this._state.totalTargets,t.$object,t.multiMix,t.callback)},getOption:function(t){return t?this._execFilter("getOption",function(t,e){for(var i=e.split("."),r=i.pop(),n=i.length,a=1,o=i[0]||e;(t=t[o])&&a<n;)o=i[a],a++;return t!==u?t[r]!==u?t[r]:t:void 0}(this,t),arguments):this},setOptions:function(t){this._execAction("setOptions",0,arguments),"object"==typeof t&&c.extend(!0,this,t),this._execAction("setOptions",1,arguments)},getState:function(){return this._execFilter("getState",this._state,this)},forceRefresh:function(){this._refresh(!1,!0)},destroy:function(t){var e=this,i=c.MixItUp.prototype._bound._filter,r=c.MixItUp.prototype._bound._sort;e._execAction("destroy",0,arguments),e._$body.add(c(e.selectors.sort)).add(c(e.selectors.filter)).off(".mixItUp");for(var n=0;n<e._$targets.length;n++){var a=e._$targets[n];t&&(a.style.display=""),delete a.mixParent}e._execAction("destroy",1,arguments),i[e.selectors.filter]&&1<i[e.selectors.filter]?i[e.selectors.filter]--:1===i[e.selectors.filter]&&delete i[e.selectors.filter],r[e.selectors.sort]&&1<r[e.selectors.sort]?r[e.selectors.sort]--:1===r[e.selectors.sort]&&delete r[e.selectors.sort],delete c.MixItUp.prototype._instances[e._id]}},c.fn.mixItUp=function(){var t,i=arguments,r=[];return t=this.each(function(){if(i&&"string"==typeof i[0]){var t=c.MixItUp.prototype._instances[this.id];if("isLoaded"===i[0])r.push(!!t);else{var e=t[i[0]](i[1],i[2],i[3]);e!==u&&r.push(e)}}else!function(t,e){var i=new c.MixItUp;i._execAction("_instantiate",0,arguments),t.id=t.id?t.id:"MixItUp"+("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase(),i._instances[t.id]||(i._instances[t.id]=i)._init(t,e),i._execAction("_instantiate",1,arguments)}(this,i[0])}),r.length?1<r.length?r:r[0]:t},c.fn.removeStyle=function(n,a){return a=a||"",this.each(function(){for(var t=n.split(" "),e=0;e<t.length;e++)for(var i=0;i<4;i++){switch(i){case 0:var r=t[e];break;case 1:r=c.MixItUp.prototype._helpers._camelCase(r);break;case 2:r=a+t[e];break;case 3:r=c.MixItUp.prototype._helpers._camelCase(a+t[e])}if(this.style[r]!==u&&"unknown"!=typeof this.style[r]&&0<this.style[r].length&&(this.style[r]=""),!a&&1===i)break}this.attributes&&this.attributes.style&&this.attributes.style!==u&&""===this.attributes.style.value&&this.attributes.removeNamedItem("style")})}}(jQuery),function(R,w,h){var i,H,r,n,o,a,s,l,c,u,t,d,e="mPageScroll2id",_="mPS2id",p={scrollSpeed:1e3,autoScrollSpeed:!0,scrollEasing:"easeInOutQuint",scrollingEasing:"easeOutQuint",pageEndSmoothScroll:!0,layout:"vertical",offset:0,highlightSelector:!1,clickedClass:_+"-clicked",targetClass:_+"-target",highlightClass:_+"-highlight",forceSingleHighlight:!1,keepHighlightUntilNext:!1,highlightByNextTarget:!1,disablePluginBelow:!1,clickEvents:!0,appendHash:!1,onStart:function(){},onComplete:function(){},defaultSelector:!1,live:!0,liveSelector:!1,excludeSelectors:!1},f=0,m={init:function(t){t=R.extend(!0,{},p,t);if(R(h).data(_,t),H=R(h).data(_),!this.selector){var e="__"+_;this.each(function(){var t=R(this);t.hasClass(e)||t.addClass(e)}),this.selector="."+e}H.liveSelector&&(this.selector+=","+H.liveSelector),i=i?i+","+this.selector:this.selector,H.defaultSelector&&("object"==typeof R(i)&&0!==R(i).length||(i=".m_PageScroll2id,a[rel~='m_PageScroll2id'],.page-scroll-to-id,a[rel~='page-scroll-to-id'],._ps2id")),H.clickEvents&&R(h).undelegate("."+_).delegate(i,"click."+_,function(t){if(g._isDisabled.call(null))g._removeClasses.call(null);else{var e=R(this),i=e.attr("href"),r=e.prop("href").baseVal||e.prop("href");H.excludeSelectors&&e.is(H.excludeSelectors)||i&&-1!==i.indexOf("#/")||(g._reset.call(null),u=e.data("ps2id-offset")||0,g._isValid.call(null,i,r)&&g._findTarget.call(null,i)&&(t.preventDefault(),n="selector",o=e,g._setClasses.call(null,!0),g._scrollTo.call(null)))}}),R(w).unbind("."+_).bind("scroll.mPS2id resize."+_,function(){if(g._isDisabled.call(null))g._removeClasses.call(null);else{var n=R("._mPS2id-t");n.each(function(t){var e=R(this),i=e.attr("id"),r=g._findHighlight.call(null,i);g._setClasses.call(null,!1,e,r),t==n.length-1&&g._extendClasses.call(null)})}}),r=!0,g._setup.call(null),g._live.call(null)},scrollTo:function(t,e){if(g._isDisabled.call(null))g._removeClasses.call(null);else if(t&&void 0!==t){g._isInit.call(null);var i={layout:H.layout,offset:H.offset,clicked:!1};e=R.extend(!0,{},i,e);g._reset.call(null),l=e.layout,c=e.offset,t=-1!==t.indexOf("#")?t:"#"+t,g._isValid.call(null,t)&&g._findTarget.call(null,t)&&(n="scrollTo",(o=e.clicked)&&g._setClasses.call(null,!0),g._scrollTo.call(null))}},destroy:function(){R(w).unbind("."+_),R(h).undelegate("."+_).removeData(_),R("._mPS2id-t").removeData(_),g._removeClasses.call(null,!0)}},g={_isDisabled:function(){var t=w,e="inner",i=H.disablePluginBelow instanceof Array?[H.disablePluginBelow[0]||0,H.disablePluginBelow[1]||0]:[H.disablePluginBelow||0,0];return"innerWidth"in w||(e="client",t=h.documentElement||h.body),t[e+"Width"]<=i[0]||t[e+"Height"]<=i[1]},_isValid:function(t,e){if(t){var i=-1!==(e=e||t).indexOf("#/")?e.split("#/")[0]:e.split("#")[0],r=w.location.toString().split("#")[0];return"#"!==t&&-1!==t.indexOf("#")&&(""===i||decodeURIComponent(i)===decodeURIComponent(r))}},_setup:function(){var o=g._highlightSelector(),s=1,l=0;return R(o).each(function(){var t=R(this),e=t.attr("href"),i=t.prop("href").baseVal||t.prop("href");if(g._isValid.call(null,e,i)){if(H.excludeSelectors&&t.is(H.excludeSelectors))return;var r=-1!==e.indexOf("#/")?e.split("#/")[1]:e.split("#")[1],n=-1!==r.indexOf("%")?R(h.getElementById(r)):R("#"+r);if(0<n.length){H.highlightByNextTarget&&n!==l&&(l?l.data(_,{tn:n}):n.data(_,{tn:"0"}),l=n),n.hasClass("_mPS2id-t")||n.addClass("_mPS2id-t"),n.data(_,{i:s}),t.hasClass("_mPS2id-h")||t.addClass("_mPS2id-h");var a=g._findHighlight.call(null,r);g._setClasses.call(null,!1,n,a),f=s,++s==R(o).length&&g._extendClasses.call(null)}}})},_highlightSelector:function(){return H.highlightSelector&&""!==H.highlightSelector?H.highlightSelector:i},_findTarget:function(t){var e=-1!==t.indexOf("#/")?t.split("#/")[1]:t.split("#")[1],i=-1!==e.indexOf("%")?R(h.getElementById(e)):R("#"+e);if(i.length<1||"fixed"===i.css("position")){if("top"!==e)return;i=R("body")}return a=i,l=l||H.layout,c=g._setOffset.call(null),(s=[(i.offset().top-c[0]).toString(),(i.offset().left-c[1]).toString()])[0]=s[0]<0?0:s[0],s[1]=s[1]<0?0:s[1],s},_setOffset:function(){var t,e,i,r;switch(c=c||(H.offset?H.offset:0),u&&(c=u),typeof c){case"object":case"string":0<(e=[(t=[c.y?c.y:c,c.x?c.x:c])[0]instanceof jQuery?t[0]:R(t[0]),t[1]instanceof jQuery?t[1]:R(t[1])])[0].length?(i=e[0].height(),"fixed"===e[0].css("position")&&(i+=e[0][0].offsetTop)):i=!isNaN(parseFloat(t[0]))&&isFinite(t[0])?parseInt(t[0]):0,0<e[1].length?(r=e[1].width(),"fixed"===e[1].css("position")&&(r+=e[1][0].offsetLeft)):r=!isNaN(parseFloat(t[1]))&&isFinite(t[1])?parseInt(t[1]):0;break;case"function":(t=c.call(null))instanceof Array?(i=t[0],r=t[1]):i=r=t;break;default:i=r=parseInt(c)}return[i,r]},_findHighlight:function(t){var e=w.location,i=e.toString().split("#")[0],r=e.pathname;return-1!==i.indexOf("'")&&(i=i.replace("'","\\'")),-1!==r.indexOf("'")&&(r=r.replace("'","\\'")),i=decodeURIComponent(i),r=decodeURIComponent(r),R("._mPS2id-h[href='#"+t+"'],._"+_+"-h[href='"+i+"#"+t+"'],._"+_+"-h[href='"+r+"#"+t+"'],._"+_+"-h[href='#/"+t+"'],._"+_+"-h[href='"+i+"#/"+t+"'],._"+_+"-h[href='"+r+"#/"+t+"']")},_setClasses:function(t,e,i){var r=H.clickedClass,n=H.targetClass,a=H.highlightClass;t&&r&&""!==r?(R("."+r).removeClass(r),o.addClass(r)):e&&n&&""!==n&&i&&a&&""!==a&&(g._currentTarget.call(null,e)?(e.addClass(n),i.addClass(a)):(!H.keepHighlightUntilNext||1<R("."+a).length)&&(e.removeClass(n),i.removeClass(a)))},_extendClasses:function(){var t=H.targetClass,e=H.highlightClass,i=R("."+t),r=R("."+e),n=t+"-first",a=t+"-last",o=e+"-first",s=e+"-last";R("._mPS2id-t").removeClass(n+" "+a),R("._mPS2id-h").removeClass(o+" "+s),H.forceSingleHighlight?H.keepHighlightUntilNext&&1<i.length?(i.slice(0,1).removeClass(t),r.slice(0,1).removeClass(e)):(i.slice(1).removeClass(t),r.slice(1).removeClass(e)):(i.slice(0,1).addClass(n).end().slice(-1).addClass(a),r.slice(0,1).addClass(o).end().slice(-1).addClass(s))},_removeClasses:function(t){R("."+H.clickedClass).removeClass(H.clickedClass),R("."+H.targetClass).removeClass(H.targetClass+" "+H.targetClass+"-first "+H.targetClass+"-last"),R("."+H.highlightClass).removeClass(H.highlightClass+" "+H.highlightClass+"-first "+H.highlightClass+"-last"),t&&(R("._mPS2id-t").removeClass("_mPS2id-t"),R("._mPS2id-h").removeClass("_mPS2id-h"))},_currentTarget:function(t){var e=H["target_"+t.data(_).i],i=t.data("ps2id-target"),r=i&&R(i)[0]?R(i)[0].getBoundingClientRect():t[0].getBoundingClientRect();if(void 0!==e){var n=t.offset().top,a=t.offset().left,o=e.from?e.from+n:n,s=e.to?e.to+n:n,l=e.fromX?e.fromX+a:a,h=e.toX?e.toX+a:a;return r.top>=s&&r.top<=o&&r.left>=h&&r.left<=l}var c=R(w).height(),u=R(w).width(),d=i?R(i).height():t.height(),p=i?R(i).width():t.width(),f=1+d/c,m=f,g=d<c?c/d*f:f,E=1+p/u,v=E,y=p<u?u/p*E:E,T=[r.top<=c/m,r.bottom>=c/g,r.left<=u/v,r.right>=u/y];if(H.highlightByNextTarget){var x=t.data(_).tn;if(x){var b=x[0].getBoundingClientRect();"vertical"===H.layout?T=[r.top<=c/2,b.top>c/2,1,1]:"horizontal"===H.layout&&(T=[1,1,r.left<=u/2,b.left>u/2])}}return T[0]&&T[1]&&T[2]&&T[3]},_scrollTo:function(){d=g._scrollSpeed.call(null),s=H.pageEndSmoothScroll?g._pageEndSmoothScroll.call(null):s;var t=R("html,body"),e=H.autoScrollSpeed?g._autoScrollSpeed.call(null):d,i=t.is(":animated")?H.scrollingEasing:H.scrollEasing,r=R(w).scrollTop(),n=R(w).scrollLeft();switch(l){case"horizontal":n!=s[1]&&(g._callbacks.call(null,"onStart"),t.stop().animate({scrollLeft:s[1]},e,i).promise().then(function(){g._callbacks.call(null,"onComplete")}));break;case"auto":var a;if(r!=s[0]||n!=s[1])if(g._callbacks.call(null,"onStart"),navigator.userAgent.match(/(iPod|iPhone|iPad|Android)/))t.stop().animate({pageYOffset:s[0],pageXOffset:s[1]},{duration:e,easing:i,step:function(t,e){"pageXOffset"==e.prop?a=t:"pageYOffset"==e.prop&&w.scrollTo(a,t)}}).promise().then(function(){g._callbacks.call(null,"onComplete")});else t.stop().animate({scrollTop:s[0],scrollLeft:s[1]},e,i).promise().then(function(){g._callbacks.call(null,"onComplete")});break;default:r!=s[0]&&(g._callbacks.call(null,"onStart"),t.stop().animate({scrollTop:s[0]},e,i).promise().then(function(){g._callbacks.call(null,"onComplete")}))}},_pageEndSmoothScroll:function(){var t=R(h).height(),e=R(h).width(),i=R(w).height(),r=R(w).width();return[t-s[0]<i?t-i:s[0],e-s[1]<r?e-r:s[1]]},_scrollSpeed:function(){var r=H.scrollSpeed;return o&&o.length&&o.add(o.parent()).each(function(){var t=R(this);if(t.attr("class")){var e=t.attr("class").split(" ");for(var i in e)if(String(e[i]).match(/^ps2id-speed-\d+$/)){r=e[i].split("ps2id-speed-")[1];break}}}),parseInt(r)},_autoScrollSpeed:function(){var t=R(w).scrollTop(),e=R(w).scrollLeft(),i=R(h).height(),r=R(h).width(),n=[d+d*Math.floor(Math.abs(s[0]-t)/i*100)/100,d+d*Math.floor(Math.abs(s[1]-e)/r*100)/100];return Math.max.apply(Math,n)},_callbacks:function(t){if(H)switch(this[_]={trigger:n,clicked:o,target:a,scrollTo:{y:s[0],x:s[1]}},t){case"onStart":if(H.appendHash&&w.history&&w.history.pushState&&o&&o.length){var e="#"+o.attr("href").split("#")[1];e!==w.location.hash&&history.pushState("","",e)}H.onStart.call(null,this[_]);break;case"onComplete":H.onComplete.call(null,this[_])}},_reset:function(){l=c=u=!1},_isInit:function(){r||m.init.apply(this)},_live:function(){t=setTimeout(function(){H.live?R(g._highlightSelector()).length!==f&&g._setup.call(null):t&&clearTimeout(t),g._live.call(null)},1e3)},_easing:function(){function e(t){var e=7.5625;return t<1/2.75?e*t*t:t<2/2.75?e*(t-=1.5/2.75)*t+.75:t<2.5/2.75?e*(t-=2.25/2.75)*t+.9375:e*(t-=2.625/2.75)*t+.984375}R.easing.easeInQuad=R.easing.easeInQuad||function(t){return t*t},R.easing.easeOutQuad=R.easing.easeOutQuad||function(t){return 1-(1-t)*(1-t)},R.easing.easeInOutQuad=R.easing.easeInOutQuad||function(t){return t<.5?2*t*t:1-Math.pow(-2*t+2,2)/2},R.easing.easeInCubic=R.easing.easeInCubic||function(t){return t*t*t},R.easing.easeOutCubic=R.easing.easeOutCubic||function(t){return 1-Math.pow(1-t,3)},R.easing.easeInOutCubic=R.easing.easeInOutCubic||function(t){return t<.5?4*t*t*t:1-Math.pow(-2*t+2,3)/2},R.easing.easeInQuart=R.easing.easeInQuart||function(t){return t*t*t*t},R.easing.easeOutQuart=R.easing.easeOutQuart||function(t){return 1-Math.pow(1-t,4)},R.easing.easeInOutQuart=R.easing.easeInOutQuart||function(t){return t<.5?8*t*t*t*t:1-Math.pow(-2*t+2,4)/2},R.easing.easeInQuint=R.easing.easeInQuint||function(t){return t*t*t*t*t},R.easing.easeOutQuint=R.easing.easeOutQuint||function(t){return 1-Math.pow(1-t,5)},R.easing.easeInOutQuint=R.easing.easeInOutQuint||function(t){return t<.5?16*t*t*t*t*t:1-Math.pow(-2*t+2,5)/2},R.easing.easeInExpo=R.easing.easeInExpo||function(t){return 0===t?0:Math.pow(2,10*t-10)},R.easing.easeOutExpo=R.easing.easeOutExpo||function(t){return 1===t?1:1-Math.pow(2,-10*t)},R.easing.easeInOutExpo=R.easing.easeInOutExpo||function(t){return 0===t?0:1===t?1:t<.5?Math.pow(2,20*t-10)/2:(2-Math.pow(2,-20*t+10))/2},R.easing.easeInSine=R.easing.easeInSine||function(t){return 1-Math.cos(t*Math.PI/2)},R.easing.easeOutSine=R.easing.easeOutSine||function(t){return Math.sin(t*Math.PI/2)},R.easing.easeInOutSine=R.easing.easeInOutSine||function(t){return-(Math.cos(Math.PI*t)-1)/2},R.easing.easeInCirc=R.easing.easeInCirc||function(t){return 1-Math.sqrt(1-Math.pow(t,2))},R.easing.easeOutCirc=R.easing.easeOutCirc||function(t){return Math.sqrt(1-Math.pow(t-1,2))},R.easing.easeInOutCirc=R.easing.easeInOutCirc||function(t){return t<.5?(1-Math.sqrt(1-Math.pow(2*t,2)))/2:(Math.sqrt(1-Math.pow(-2*t+2,2))+1)/2},R.easing.easeInElastic=R.easing.easeInElastic||function(t){return 0===t?0:1===t?1:-Math.pow(2,10*t-10)*Math.sin((10*t-10.75)*(2*Math.PI/3))},R.easing.easeOutElastic=R.easing.easeOutElastic||function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin((10*t-.75)*(2*Math.PI/3))+1},R.easing.easeInOutElastic=R.easing.easeInOutElastic||function(t){return 0===t?0:1===t?1:t<.5?-Math.pow(2,20*t-10)*Math.sin((20*t-11.125)*(2*Math.PI/4.5))/2:Math.pow(2,-20*t+10)*Math.sin((20*t-11.125)*(2*Math.PI/4.5))/2+1},R.easing.easeInBack=R.easing.easeInBack||function(t){return 2.70158*t*t*t-1.70158*t*t},R.easing.easeOutBack=R.easing.easeOutBack||function(t){return 1+2.70158*Math.pow(t-1,3)+1.70158*Math.pow(t-1,2)},R.easing.easeInOutBack=R.easing.easeInOutBack||function(t){return t<.5?Math.pow(2*t,2)*(7.189819*t-2.5949095)/2:(Math.pow(2*t-2,2)*(3.5949095*(2*t-2)+2.5949095)+2)/2},R.easing.easeInBounce=R.easing.easeInBounce||function(t){return 1-e(1-t)},R.easing.easeOutBounce=R.easing.easeOutBounce||e,R.easing.easeInOutBounce=R.easing.easeInOutBounce||function(t){return t<.5?(1-e(1-2*t))/2:(1+e(2*t-1))/2}}};g._easing.call(),R.fn[e]=function(t){return m[t]?m[t].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof t&&t?void R.error("Method "+t+" does not exist"):m.init.apply(this,arguments)},R[e]=function(t){return m[t]?m[t].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof t&&t?void R.error("Method "+t+" does not exist"):m.init.apply(this,arguments)},R[e].defaults=p}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
